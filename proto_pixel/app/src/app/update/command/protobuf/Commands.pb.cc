// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace ea {
namespace eamobile {
namespace nfsmw {
namespace protoc {

namespace {

const ::google::protobuf::Descriptor* UserViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardN_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Prop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Prop_reflection_ = NULL;
const ::google::protobuf::Descriptor* FleetRace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FleetRace_reflection_ = NULL;
const ::google::protobuf::Descriptor* Leaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Leaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderboardProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderboardProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckPointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckPointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewbieTierCheckList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewbieTierCheckList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TierInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TierInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPSInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPSInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestResourceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestResourceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseResourceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseResourceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTrackCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTrackCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTrackCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTrackCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUserInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUserInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseWeiboShareLocksCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseWeiboShareLocksCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserWeiboInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserWeiboInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestModifyUserInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestModifyUserInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseModifyUserInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseModifyUserInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUserInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUserInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RacerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RacerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestModeInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestModeInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRacerForGhostCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRacerForGhostCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseModeInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseModeInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRaceResultCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRaceResultCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockInfoMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockInfoMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRaceResultCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRaceResultCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentRaceResultCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentRaceResultCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentRankingListMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentRankingListMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentRewardListMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentRewardListMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentRewardDetailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentRewardDetailMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentDetailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentDetailMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TournamentDetailRewardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TournamentDetailRewardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTournamentCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTournamentCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTournamentRewardDetailCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTournamentRewardDetailCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentRewardDetailCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentRewardDetailCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* responseTournamentRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  responseTournamentRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTournamentSignUpCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTournamentSignUpCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentSignUpCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentSignUpCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTournamentDetailCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTournamentDetailCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentDetailCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentDetailCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGetRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGetRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGetRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGetRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRaceStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRaceStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRaceStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRaceStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentRaceStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentRaceStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBindingStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBindingStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBindingStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBindingStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBindingTokenCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBindingTokenCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBindingTokenCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBindingTokenCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBindingInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBindingInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBindingInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBindingInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBindingResultCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBindingResultCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBindingResultCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBindingResultCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBindingConfirmCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBindingConfirmCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBindingConfirmCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBindingConfirmCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBindingPopupCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBindingPopupCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GotchaExpense_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GotchaExpense_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartletInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartletInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConsumableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConsumableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGarageCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGarageCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGarageCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGarageCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBuyCarCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBuyCarCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBuyCarCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBuyCarCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCarDataCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCarDataCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCarDataCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCarDataCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUpgradeSlotCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUpgradeSlotCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUpgradeSlotCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUpgradeSlotCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUseChartletCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUseChartletCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUseChartletCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUseChartletCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestChallengeMathInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestChallengeMathInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseChallengeMatchInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseChallengeMatchInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFeedCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFeedCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStoreDetailCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStoreDetailCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseStoreDetailCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseStoreDetailCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestBuyItemCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestBuyItemCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseBuyItemCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseBuyItemCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSystemCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSystemCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestSystemCommand_SystemConfigType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResponseSystemCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSystemCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventOptionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventOptionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashRewardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashRewardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedalPositionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedalPositionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedalScoreMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedalScoreMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedalTimeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedalTimeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountdownInitialTimeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountdownInitialTimeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PenaltyTimeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PenaltyTimeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpponentCollectionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpponentCollectionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpponentMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpponentMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AiSettingsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AiSettingsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceEventMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceEventMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficFlowMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficFlowMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceTrafficCongestionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceTrafficCongestionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrafficCarSpawnDescsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrafficCarSpawnDescsMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRegistJaguarCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegistJaguarCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegistJaguarCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegistJaguarCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRpLeaderboardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRpLeaderboardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRpLeaderboardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRpLeaderboardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpLeaderboardMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpLeaderboardMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfileCarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfileCarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProfileUserDataCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProfileUserDataCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseProfileUserDataCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseProfileUserDataCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProfileNextCarCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProfileNextCarCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseProfileNextCarCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseProfileNextCarCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProfileLikeCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProfileLikeCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseProfileLikeCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseProfileLikeCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProfileReportCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProfileReportCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseProfileReportCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseProfileReportCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserVSProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserVSProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProfileVSCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProfileVSCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseProfileVSCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseProfileVSCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRecordUserRaceActionCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRecordUserRaceActionCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQuickRaceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQuickRaceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQuickRaceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQuickRaceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseNotificationCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseNotificationCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGhostRecordCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGhostRecordCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGhostRecordCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGhostRecordCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestIapCheckCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestIapCheckCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseIapCheckCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseIapCheckCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentNotificationCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentNotificationCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTutorialRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTutorialRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTutorialRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTutorialRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponsePopupCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePopupCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponsePopupListCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePopupListCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentRewardNumCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentRewardNumCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGotchaCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGotchaCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGotchaCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGotchaCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* GotchaItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GotchaItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCheatInfoCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCheatInfoCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderboardClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderboardClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderboardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderboardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLeaderboardClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLeaderboardClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLeaderboardClass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLeaderboardClass_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderboardHeadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderboardHeadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLeaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLeaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLeaderboard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLeaderboard_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestTournamentNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestTournamentNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseTournamentNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseTournamentNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCollectEnergyCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCollectEnergyCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestEnergyTimeCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEnergyTimeCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseEnergyTimeCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseEnergyTimeCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFansRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFansRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFansRewardTimeCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFansRewardTimeCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPropPurchaseCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPropPurchaseCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMissionRewardCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMissionRewardCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestMissionFinishCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestMissionFinishCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseMissionListCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseMissionListCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestLotteryCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLotteryCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLotteryCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLotteryCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFleetRaceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFleetRaceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFleetRaceCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFleetRaceCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFleetStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFleetStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFleetStartCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFleetStartCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFleetEndCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFleetEndCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFleetEndCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFleetEndCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFleetDoubleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFleetDoubleCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFleetDoubleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFleetDoubleCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFixCarLimitCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFixCarLimitCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFixCarLimitCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFixCarLimitCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocalUserinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalUserinfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Commands_2eproto() {
  protobuf_AddDesc_Commands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Commands.proto");
  GOOGLE_CHECK(file != NULL);
  UserViewInfo_descriptor_ = file->message_type(0);
  static const int UserViewInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, isnamechanged_),
  };
  UserViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserViewInfo_descriptor_,
      UserViewInfo::default_instance_,
      UserViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserViewInfo));
  MissionInfo_descriptor_ = file->message_type(1);
  static const int MissionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, rewardcount_),
  };
  MissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionInfo_descriptor_,
      MissionInfo::default_instance_,
      MissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionInfo));
  Reward_descriptor_ = file->message_type(2);
  static const int Reward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, rpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, mostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, finishratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, displaystrings_),
  };
  Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reward_descriptor_,
      Reward::default_instance_,
      Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reward));
  RewardN_descriptor_ = file->message_type(3);
  static const int RewardN_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardN, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardN, count_),
  };
  RewardN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardN_descriptor_,
      RewardN::default_instance_,
      RewardN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardN));
  RewardList_descriptor_ = file->message_type(4);
  static const int RewardList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, rewards_),
  };
  RewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardList_descriptor_,
      RewardList::default_instance_,
      RewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardList));
  Prop_descriptor_ = file->message_type(5);
  static const int Prop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, count_),
  };
  Prop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Prop_descriptor_,
      Prop::default_instance_,
      Prop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Prop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Prop));
  FleetRace_descriptor_ = file->message_type(6);
  static const int FleetRace_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, limitcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, energycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, cartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, ramaintime_),
  };
  FleetRace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FleetRace_descriptor_,
      FleetRace::default_instance_,
      FleetRace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FleetRace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FleetRace));
  Leaderboard_descriptor_ = file->message_type(7);
  static const int Leaderboard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, raceresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, ismyself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, userid_),
  };
  Leaderboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Leaderboard_descriptor_,
      Leaderboard::default_instance_,
      Leaderboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaderboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Leaderboard));
  LeaderboardProfile_descriptor_ = file->message_type(8);
  static const int LeaderboardProfile_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, raceresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, ismyself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carcolorindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carmodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carmodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, carmodlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, userid_),
  };
  LeaderboardProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderboardProfile_descriptor_,
      LeaderboardProfile::default_instance_,
      LeaderboardProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderboardProfile));
  ModeInfo_descriptor_ = file->message_type(9);
  static const int ModeInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, modename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, modetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, finishratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, mostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, leaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, realtrackindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, energycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, carlimitdisplaystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, leaderboard2_),
  };
  ModeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModeInfo_descriptor_,
      ModeInfo::default_instance_,
      ModeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModeInfo));
  TrackInfo_descriptor_ = file->message_type(10);
  static const int TrackInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, trackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, finishratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, cartypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, usermostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, modes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, trackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, cartypefordisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, trackstatusupdated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, ishasnewmode_),
  };
  TrackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackInfo_descriptor_,
      TrackInfo::default_instance_,
      TrackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackInfo));
  CheckPointInfo_descriptor_ = file->message_type(11);
  static const int CheckPointInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, unlockmostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, eventname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, acceptablecarids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, carlimitdisplaystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, staminacost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, reward_),
  };
  CheckPointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckPointInfo_descriptor_,
      CheckPointInfo::default_instance_,
      CheckPointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckPointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckPointInfo));
  NewbieTierCheckList_descriptor_ = file->message_type(12);
  static const int NewbieTierCheckList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewbieTierCheckList, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewbieTierCheckList, isfinished_),
  };
  NewbieTierCheckList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewbieTierCheckList_descriptor_,
      NewbieTierCheckList::default_instance_,
      NewbieTierCheckList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewbieTierCheckList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewbieTierCheckList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewbieTierCheckList));
  TierInfo_descriptor_ = file->message_type(13);
  static const int TierInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TierInfo, tierindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TierInfo, tieramount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TierInfo, newbietierchecklist_),
  };
  TierInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TierInfo_descriptor_,
      TierInfo::default_instance_,
      TierInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TierInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TierInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TierInfo));
  GPSInfo_descriptor_ = file->message_type(14);
  static const int GPSInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, locality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, sublocality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, thoroughfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, subthoroughfare_),
  };
  GPSInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPSInfo_descriptor_,
      GPSInfo::default_instance_,
      GPSInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPSInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPSInfo));
  RequestResourceCommand_descriptor_ = file->message_type(15);
  static const int RequestResourceCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResourceCommand, clientversion_),
  };
  RequestResourceCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestResourceCommand_descriptor_,
      RequestResourceCommand::default_instance_,
      RequestResourceCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResourceCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestResourceCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestResourceCommand));
  ResourceItemInfo_descriptor_ = file->message_type(16);
  static const int ResourceItemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, version_),
  };
  ResourceItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceItemInfo_descriptor_,
      ResourceItemInfo::default_instance_,
      ResourceItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceItemInfo));
  ResponseResourceCommand_descriptor_ = file->message_type(17);
  static const int ResponseResourceCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResourceCommand, rootpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResourceCommand, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResourceCommand, items_),
  };
  ResponseResourceCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseResourceCommand_descriptor_,
      ResponseResourceCommand::default_instance_,
      ResponseResourceCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResourceCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseResourceCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseResourceCommand));
  RequestTrackCommand_descriptor_ = file->message_type(18);
  static const int RequestTrackCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackCommand, requesttier_),
  };
  RequestTrackCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTrackCommand_descriptor_,
      RequestTrackCommand::default_instance_,
      RequestTrackCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTrackCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTrackCommand));
  ResponseTrackCommand_descriptor_ = file->message_type(19);
  static const int ResponseTrackCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTrackCommand, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTrackCommand, tracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTrackCommand, checkpointinfo_),
  };
  ResponseTrackCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTrackCommand_descriptor_,
      ResponseTrackCommand::default_instance_,
      ResponseTrackCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTrackCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTrackCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTrackCommand));
  RequestUserInfoCommand_descriptor_ = file->message_type(20);
  static const int RequestUserInfoCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, gpsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, isold_),
  };
  RequestUserInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUserInfoCommand_descriptor_,
      RequestUserInfoCommand::default_instance_,
      RequestUserInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUserInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUserInfoCommand));
  ResponseWeiboShareLocksCommand_descriptor_ = file->message_type(21);
  static const int ResponseWeiboShareLocksCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, isracerewardshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, istrackunlockinfoshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, iscarunlockinfoshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, isspeedwallshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, isbindingweiboshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, istournamentrewardshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, isbuycarshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, isupdateconsumableshareopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, isjaguarshareopen_),
  };
  ResponseWeiboShareLocksCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseWeiboShareLocksCommand_descriptor_,
      ResponseWeiboShareLocksCommand::default_instance_,
      ResponseWeiboShareLocksCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseWeiboShareLocksCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseWeiboShareLocksCommand));
  UserWeiboInfo_descriptor_ = file->message_type(22);
  static const int UserWeiboInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWeiboInfo, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWeiboInfo, uid_),
  };
  UserWeiboInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserWeiboInfo_descriptor_,
      UserWeiboInfo::default_instance_,
      UserWeiboInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWeiboInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserWeiboInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserWeiboInfo));
  UserInfo_descriptor_ = file->message_type(23);
  static const int UserInfo_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, rplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, rpexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, mostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, accountinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, expmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, expmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, finishedfirstrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, weiboinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, tutorialrewardisgiven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, rpmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, isnamechanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, energytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, propnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, packagestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, isnoble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, leftnobletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, leftgoldtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, isgoldunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, fansrewardstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, fansrewardlasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, missionrewardstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, missionfinishstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, racetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, isnewuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, lotterytimes_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  RequestModifyUserInfoCommand_descriptor_ = file->message_type(24);
  static const int RequestModifyUserInfoCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoCommand, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoCommand, nickname_),
  };
  RequestModifyUserInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestModifyUserInfoCommand_descriptor_,
      RequestModifyUserInfoCommand::default_instance_,
      RequestModifyUserInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModifyUserInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestModifyUserInfoCommand));
  ResponseModifyUserInfoCommand_descriptor_ = file->message_type(25);
  static const int ResponseModifyUserInfoCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModifyUserInfoCommand, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModifyUserInfoCommand, userinfo_),
  };
  ResponseModifyUserInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseModifyUserInfoCommand_descriptor_,
      ResponseModifyUserInfoCommand::default_instance_,
      ResponseModifyUserInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModifyUserInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModifyUserInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseModifyUserInfoCommand));
  ResponseUserInfoCommand_descriptor_ = file->message_type(26);
  static const int ResponseUserInfoCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserInfoCommand, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserInfoCommand, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserInfoCommand, defaulthint_),
  };
  ResponseUserInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseUserInfoCommand_descriptor_,
      ResponseUserInfoCommand::default_instance_,
      ResponseUserInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUserInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseUserInfoCommand));
  GhostInfo_descriptor_ = file->message_type(27);
  static const int GhostInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, racetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, averagespd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, raceeventname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carcolorindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carmodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carmodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carmodlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, raceresultstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carprefabfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, cartopspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, carmidspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, tracklength_),
  };
  GhostInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostInfo_descriptor_,
      GhostInfo::default_instance_,
      GhostInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostInfo));
  RacerInfo_descriptor_ = file->message_type(28);
  static const int RacerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, ghost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, rplv_),
  };
  RacerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RacerInfo_descriptor_,
      RacerInfo::default_instance_,
      RacerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RacerInfo));
  RequestModeInfoCommand_descriptor_ = file->message_type(29);
  static const int RequestModeInfoCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModeInfoCommand, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModeInfoCommand, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModeInfoCommand, racetype_),
  };
  RequestModeInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestModeInfoCommand_descriptor_,
      RequestModeInfoCommand::default_instance_,
      RequestModeInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModeInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestModeInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestModeInfoCommand));
  ResponseRacerForGhostCommand_descriptor_ = file->message_type(30);
  static const int ResponseRacerForGhostCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRacerForGhostCommand, racers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRacerForGhostCommand, ghostavergeeol_),
  };
  ResponseRacerForGhostCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRacerForGhostCommand_descriptor_,
      ResponseRacerForGhostCommand::default_instance_,
      ResponseRacerForGhostCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRacerForGhostCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRacerForGhostCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRacerForGhostCommand));
  ResponseModeInfoCommand_descriptor_ = file->message_type(31);
  static const int ResponseModeInfoCommand_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, energycost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, carlimitdisplaystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, acceptablecarids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, personalrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, currentenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, personalbesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, friendleaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, friendleaderboard2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, userid_),
  };
  ResponseModeInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseModeInfoCommand_descriptor_,
      ResponseModeInfoCommand::default_instance_,
      ResponseModeInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseModeInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseModeInfoCommand));
  RequestRaceResultCommand_descriptor_ = file->message_type(32);
  static const int RequestRaceResultCommand_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, trackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, ghosts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, racetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, ghostavergeeol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, propnum_),
  };
  RequestRaceResultCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRaceResultCommand_descriptor_,
      RequestRaceResultCommand::default_instance_,
      RequestRaceResultCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceResultCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRaceResultCommand));
  RPMessage_descriptor_ = file->message_type(33);
  static const int RPMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, iconname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, currentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, minexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, maxexp_),
  };
  RPMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPMessage_descriptor_,
      RPMessage::default_instance_,
      RPMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPMessage));
  UnlockInfoMessage_descriptor_ = file->message_type(34);
  static const int UnlockInfoMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockInfoMessage, tierunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockInfoMessage, istrackunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockInfoMessage, ismodeunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockInfoMessage, unlockedcar_),
  };
  UnlockInfoMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockInfoMessage_descriptor_,
      UnlockInfoMessage::default_instance_,
      UnlockInfoMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockInfoMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockInfoMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockInfoMessage));
  ResponseRaceResultCommand_descriptor_ = file->message_type(35);
  static const int ResponseRaceResultCommand_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, trackfinishratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, modefinishratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, gainmostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, unlocktracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, unlockmodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, isnewrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, newrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, leaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, personalbesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, bestrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, rpmessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, unlockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, friendleaderboard_),
  };
  ResponseRaceResultCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRaceResultCommand_descriptor_,
      ResponseRaceResultCommand::default_instance_,
      ResponseRaceResultCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceResultCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRaceResultCommand));
  ResponseTournamentRaceResultCommand_descriptor_ = file->message_type(36);
  static const int ResponseTournamentRaceResultCommand_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, rpmessages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, tournamentremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, tournamentlefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, board_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, selfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, selfraceresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, uprank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, isnewrecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, friendleaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, tournamentonlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, istournamentonlinefinish_),
  };
  ResponseTournamentRaceResultCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentRaceResultCommand_descriptor_,
      ResponseTournamentRaceResultCommand::default_instance_,
      ResponseTournamentRaceResultCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceResultCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentRaceResultCommand));
  TournamentMessage_descriptor_ = file->message_type(37);
  static const int TournamentMessage_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, signuptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, signup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, rankinghighlight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, rewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, onlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, signupprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, backgroundpictureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, adid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, isalreadygetreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, tournamentgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, tournamentcarname_),
  };
  TournamentMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentMessage_descriptor_,
      TournamentMessage::default_instance_,
      TournamentMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentMessage));
  TournamentRankingListMessage_descriptor_ = file->message_type(38);
  static const int TournamentRankingListMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRankingListMessage, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRankingListMessage, name_),
  };
  TournamentRankingListMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentRankingListMessage_descriptor_,
      TournamentRankingListMessage::default_instance_,
      TournamentRankingListMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRankingListMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRankingListMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentRankingListMessage));
  TournamentRewardListMessage_descriptor_ = file->message_type(39);
  static const int TournamentRewardListMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardListMessage, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardListMessage, name_),
  };
  TournamentRewardListMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentRewardListMessage_descriptor_,
      TournamentRewardListMessage::default_instance_,
      TournamentRewardListMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardListMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardListMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentRewardListMessage));
  TournamentRewardDetailMessage_descriptor_ = file->message_type(40);
  static const int TournamentRewardDetailMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, racetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, displayname_),
  };
  TournamentRewardDetailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentRewardDetailMessage_descriptor_,
      TournamentRewardDetailMessage::default_instance_,
      TournamentRewardDetailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentRewardDetailMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentRewardDetailMessage));
  TournamentDetailMessage_descriptor_ = file->message_type(41);
  static const int TournamentDetailMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, racetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, userid_),
  };
  TournamentDetailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentDetailMessage_descriptor_,
      TournamentDetailMessage::default_instance_,
      TournamentDetailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentDetailMessage));
  TournamentDetailRewardMessage_descriptor_ = file->message_type(42);
  static const int TournamentDetailRewardMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailRewardMessage, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailRewardMessage, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailRewardMessage, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailRewardMessage, displayname_),
  };
  TournamentDetailRewardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TournamentDetailRewardMessage_descriptor_,
      TournamentDetailRewardMessage::default_instance_,
      TournamentDetailRewardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailRewardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TournamentDetailRewardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TournamentDetailRewardMessage));
  RequestTournamentCommand_descriptor_ = file->message_type(43);
  static const int RequestTournamentCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentCommand, type_),
  };
  RequestTournamentCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTournamentCommand_descriptor_,
      RequestTournamentCommand::default_instance_,
      RequestTournamentCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTournamentCommand));
  ResponseTournamentCommand_descriptor_ = file->message_type(44);
  static const int ResponseTournamentCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentCommand, tournament_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentCommand, type_),
  };
  ResponseTournamentCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentCommand_descriptor_,
      ResponseTournamentCommand::default_instance_,
      ResponseTournamentCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentCommand));
  RequestTournamentRewardDetailCommand_descriptor_ = file->message_type(45);
  static const int RequestTournamentRewardDetailCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentRewardDetailCommand, tournamentonlineid_),
  };
  RequestTournamentRewardDetailCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTournamentRewardDetailCommand_descriptor_,
      RequestTournamentRewardDetailCommand::default_instance_,
      RequestTournamentRewardDetailCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentRewardDetailCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentRewardDetailCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTournamentRewardDetailCommand));
  ResponseTournamentRewardDetailCommand_descriptor_ = file->message_type(46);
  static const int ResponseTournamentRewardDetailCommand_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, rewarddetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, selfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, selfracetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, selfreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, selfheadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, selfheadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, tournamentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, friendleaderboard_),
  };
  ResponseTournamentRewardDetailCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentRewardDetailCommand_descriptor_,
      ResponseTournamentRewardDetailCommand::default_instance_,
      ResponseTournamentRewardDetailCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardDetailCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentRewardDetailCommand));
  responseTournamentRewardCommand_descriptor_ = file->message_type(47);
  static const int responseTournamentRewardCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, moneyiconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, goldiconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, displayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, isget_),
  };
  responseTournamentRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      responseTournamentRewardCommand_descriptor_,
      responseTournamentRewardCommand::default_instance_,
      responseTournamentRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(responseTournamentRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(responseTournamentRewardCommand));
  RequestTournamentSignUpCommand_descriptor_ = file->message_type(48);
  static const int RequestTournamentSignUpCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentSignUpCommand, tournamentonlineid_),
  };
  RequestTournamentSignUpCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTournamentSignUpCommand_descriptor_,
      RequestTournamentSignUpCommand::default_instance_,
      RequestTournamentSignUpCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentSignUpCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentSignUpCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTournamentSignUpCommand));
  ResponseTournamentSignUpCommand_descriptor_ = file->message_type(49);
  static const int ResponseTournamentSignUpCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentSignUpCommand, result_),
  };
  ResponseTournamentSignUpCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentSignUpCommand_descriptor_,
      ResponseTournamentSignUpCommand::default_instance_,
      ResponseTournamentSignUpCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentSignUpCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentSignUpCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentSignUpCommand));
  RequestTournamentDetailCommand_descriptor_ = file->message_type(50);
  static const int RequestTournamentDetailCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentDetailCommand, tournamentonlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentDetailCommand, racetype_),
  };
  RequestTournamentDetailCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTournamentDetailCommand_descriptor_,
      RequestTournamentDetailCommand::default_instance_,
      RequestTournamentDetailCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentDetailCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentDetailCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTournamentDetailCommand));
  ResponseTournamentDetailCommand_descriptor_ = file->message_type(51);
  static const int ResponseTournamentDetailCommand_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentdetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, selfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, selfracetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, selfheadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, selfheadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentsignupprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentdescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentcarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, detailreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, ishascar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, carids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, hotridecarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, isnotconsumable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, weibocontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, friendleaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, startcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, endcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, weibosharecontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentonlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, tournamentgroupid_),
  };
  ResponseTournamentDetailCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentDetailCommand_descriptor_,
      ResponseTournamentDetailCommand::default_instance_,
      ResponseTournamentDetailCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentDetailCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentDetailCommand));
  RequestGetRewardCommand_descriptor_ = file->message_type(52);
  static const int RequestGetRewardCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetRewardCommand, tournamentonlineid_),
  };
  RequestGetRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGetRewardCommand_descriptor_,
      RequestGetRewardCommand::default_instance_,
      RequestGetRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGetRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGetRewardCommand));
  ResponseGetRewardCommand_descriptor_ = file->message_type(53);
  static const int ResponseGetRewardCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetRewardCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetRewardCommand, errormessage_),
  };
  ResponseGetRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseGetRewardCommand_descriptor_,
      ResponseGetRewardCommand::default_instance_,
      ResponseGetRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGetRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseGetRewardCommand));
  HeadInfo_descriptor_ = file->message_type(54);
  static const int HeadInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, gameversion_),
  };
  HeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeadInfo_descriptor_,
      HeadInfo::default_instance_,
      HeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeadInfo));
  RequestRaceStartCommand_descriptor_ = file->message_type(55);
  static const int RequestRaceStartCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, gamemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, racetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, tournamentonlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, carmodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, carmodslotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, carid_),
  };
  RequestRaceStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRaceStartCommand_descriptor_,
      RequestRaceStartCommand::default_instance_,
      RequestRaceStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRaceStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRaceStartCommand));
  ResponseRaceStartCommand_descriptor_ = file->message_type(56);
  static const int ResponseRaceStartCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, approved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, hint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, sampleperiod_),
  };
  ResponseRaceStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRaceStartCommand_descriptor_,
      ResponseRaceStartCommand::default_instance_,
      ResponseRaceStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRaceStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRaceStartCommand));
  ResponseTournamentRaceStartCommand_descriptor_ = file->message_type(57);
  static const int ResponseTournamentRaceStartCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceStartCommand, trackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceStartCommand, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceStartCommand, detailreward_),
  };
  ResponseTournamentRaceStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentRaceStartCommand_descriptor_,
      ResponseTournamentRaceStartCommand::default_instance_,
      ResponseTournamentRaceStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRaceStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentRaceStartCommand));
  AccountInfo_descriptor_ = file->message_type(58);
  static const int AccountInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, isexpired_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  RequestBindingStartCommand_descriptor_ = file->message_type(59);
  static const int RequestBindingStartCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingStartCommand, token_),
  };
  RequestBindingStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBindingStartCommand_descriptor_,
      RequestBindingStartCommand::default_instance_,
      RequestBindingStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBindingStartCommand));
  ResponseBindingStartCommand_descriptor_ = file->message_type(60);
  static const int ResponseBindingStartCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingStartCommand, authurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingStartCommand, closeurl_),
  };
  ResponseBindingStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBindingStartCommand_descriptor_,
      ResponseBindingStartCommand::default_instance_,
      ResponseBindingStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBindingStartCommand));
  RequestBindingTokenCommand_descriptor_ = file->message_type(61);
  static const int RequestBindingTokenCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, isoverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, nickname_),
  };
  RequestBindingTokenCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBindingTokenCommand_descriptor_,
      RequestBindingTokenCommand::default_instance_,
      RequestBindingTokenCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingTokenCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBindingTokenCommand));
  ResponseBindingTokenCommand_descriptor_ = file->message_type(62);
  static const int ResponseBindingTokenCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingTokenCommand, token_),
  };
  ResponseBindingTokenCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBindingTokenCommand_descriptor_,
      ResponseBindingTokenCommand::default_instance_,
      ResponseBindingTokenCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingTokenCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingTokenCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBindingTokenCommand));
  RequestBindingInfoCommand_descriptor_ = file->message_type(63);
  static const int RequestBindingInfoCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingInfoCommand, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingInfoCommand, uid_),
  };
  RequestBindingInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBindingInfoCommand_descriptor_,
      RequestBindingInfoCommand::default_instance_,
      RequestBindingInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBindingInfoCommand));
  ResponseBindingInfoCommand_descriptor_ = file->message_type(64);
  static const int ResponseBindingInfoCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingInfoCommand, isbinding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingInfoCommand, bindingconfirmcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingInfoCommand, userinfo_),
  };
  ResponseBindingInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBindingInfoCommand_descriptor_,
      ResponseBindingInfoCommand::default_instance_,
      ResponseBindingInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBindingInfoCommand));
  RequestBindingResultCommand_descriptor_ = file->message_type(65);
  static const int RequestBindingResultCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingResultCommand, token_),
  };
  RequestBindingResultCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBindingResultCommand_descriptor_,
      RequestBindingResultCommand::default_instance_,
      RequestBindingResultCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingResultCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingResultCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBindingResultCommand));
  ResponseBindingResultCommand_descriptor_ = file->message_type(66);
  static const int ResponseBindingResultCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingResultCommand, isbinding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingResultCommand, bindingconfirmcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingResultCommand, userinfo_),
  };
  ResponseBindingResultCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBindingResultCommand_descriptor_,
      ResponseBindingResultCommand::default_instance_,
      ResponseBindingResultCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingResultCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingResultCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBindingResultCommand));
  RequestBindingConfirmCommand_descriptor_ = file->message_type(67);
  static const int RequestBindingConfirmCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingConfirmCommand, isoverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingConfirmCommand, token_),
  };
  RequestBindingConfirmCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBindingConfirmCommand_descriptor_,
      RequestBindingConfirmCommand::default_instance_,
      RequestBindingConfirmCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingConfirmCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBindingConfirmCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBindingConfirmCommand));
  ResponseBindingConfirmCommand_descriptor_ = file->message_type(68);
  static const int ResponseBindingConfirmCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingConfirmCommand, token_),
  };
  ResponseBindingConfirmCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBindingConfirmCommand_descriptor_,
      ResponseBindingConfirmCommand::default_instance_,
      ResponseBindingConfirmCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingConfirmCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingConfirmCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBindingConfirmCommand));
  ResponseBindingPopupCommand_descriptor_ = file->message_type(69);
  static const int ResponseBindingPopupCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingPopupCommand, ispopup_),
  };
  ResponseBindingPopupCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBindingPopupCommand_descriptor_,
      ResponseBindingPopupCommand::default_instance_,
      ResponseBindingPopupCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingPopupCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBindingPopupCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBindingPopupCommand));
  ErrorCommand_descriptor_ = file->message_type(70);
  static const int ErrorCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCommand, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCommand, message_),
  };
  ErrorCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorCommand_descriptor_,
      ErrorCommand::default_instance_,
      ErrorCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorCommand));
  CarData_descriptor_ = file->message_type(71);
  static const int CarData_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, unlockmwlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, chartletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, islock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, chartletinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, sellflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, isspecialcar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, fragmentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, gotchaexpense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, totalfragmentnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, remainpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, remainprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, maxlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, state_),
  };
  CarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarData_descriptor_,
      CarData::default_instance_,
      CarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarData));
  GotchaExpense_descriptor_ = file->message_type(72);
  static const int GotchaExpense_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaExpense, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaExpense, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaExpense, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaExpense, leftfreetimes_),
  };
  GotchaExpense_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GotchaExpense_descriptor_,
      GotchaExpense::default_instance_,
      GotchaExpense_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaExpense, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaExpense, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GotchaExpense));
  ChartletInfo_descriptor_ = file->message_type(73);
  static const int ChartletInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, diffusetexturepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, diffusemaskpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, brdfpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, brdfspecularpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, numberplatepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, swatchcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, swatchcolor2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, painttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, usevinylmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, tenancy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, owned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, sellflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, score_),
  };
  ChartletInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChartletInfo_descriptor_,
      ChartletInfo::default_instance_,
      ChartletInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartletInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChartletInfo));
  CarSlotInfo_descriptor_ = file->message_type(74);
  static const int CarSlotInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, reachmaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, consumble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, nextaddscore_),
  };
  CarSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarSlotInfo_descriptor_,
      CarSlotInfo::default_instance_,
      CarSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarSlotInfo));
  ConsumableData_descriptor_ = file->message_type(75);
  static const int ConsumableData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumableData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumableData, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumableData, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumableData, price_),
  };
  ConsumableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConsumableData_descriptor_,
      ConsumableData::default_instance_,
      ConsumableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConsumableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConsumableData));
  RequestGarageCommand_descriptor_ = file->message_type(76);
  static const int RequestGarageCommand_offsets_[1] = {
  };
  RequestGarageCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGarageCommand_descriptor_,
      RequestGarageCommand::default_instance_,
      RequestGarageCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGarageCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGarageCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGarageCommand));
  ResponseGarageCommand_descriptor_ = file->message_type(77);
  static const int ResponseGarageCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGarageCommand, cardatas_),
  };
  ResponseGarageCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseGarageCommand_descriptor_,
      ResponseGarageCommand::default_instance_,
      ResponseGarageCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGarageCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGarageCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseGarageCommand));
  RequestBuyCarCommand_descriptor_ = file->message_type(78);
  static const int RequestBuyCarCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBuyCarCommand, carid_),
  };
  RequestBuyCarCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBuyCarCommand_descriptor_,
      RequestBuyCarCommand::default_instance_,
      RequestBuyCarCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBuyCarCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBuyCarCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBuyCarCommand));
  ResponseBuyCarCommand_descriptor_ = file->message_type(79);
  static const int ResponseBuyCarCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyCarCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyCarCommand, message_),
  };
  ResponseBuyCarCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBuyCarCommand_descriptor_,
      ResponseBuyCarCommand::default_instance_,
      ResponseBuyCarCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyCarCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyCarCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBuyCarCommand));
  RequestCarDataCommand_descriptor_ = file->message_type(80);
  static const int RequestCarDataCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCarDataCommand, carid_),
  };
  RequestCarDataCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCarDataCommand_descriptor_,
      RequestCarDataCommand::default_instance_,
      RequestCarDataCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCarDataCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCarDataCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCarDataCommand));
  ResponseCarDataCommand_descriptor_ = file->message_type(81);
  static const int ResponseCarDataCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCarDataCommand, cardata_),
  };
  ResponseCarDataCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseCarDataCommand_descriptor_,
      ResponseCarDataCommand::default_instance_,
      ResponseCarDataCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCarDataCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCarDataCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseCarDataCommand));
  RequestUpgradeSlotCommand_descriptor_ = file->message_type(82);
  static const int RequestUpgradeSlotCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeSlotCommand, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeSlotCommand, usercarid_),
  };
  RequestUpgradeSlotCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUpgradeSlotCommand_descriptor_,
      RequestUpgradeSlotCommand::default_instance_,
      RequestUpgradeSlotCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeSlotCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeSlotCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUpgradeSlotCommand));
  ResponseUpgradeSlotCommand_descriptor_ = file->message_type(83);
  static const int ResponseUpgradeSlotCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeSlotCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeSlotCommand, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeSlotCommand, remaintime_),
  };
  ResponseUpgradeSlotCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseUpgradeSlotCommand_descriptor_,
      ResponseUpgradeSlotCommand::default_instance_,
      ResponseUpgradeSlotCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeSlotCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeSlotCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseUpgradeSlotCommand));
  RequestUseChartletCommand_descriptor_ = file->message_type(84);
  static const int RequestUseChartletCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUseChartletCommand, chartletid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUseChartletCommand, carid_),
  };
  RequestUseChartletCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUseChartletCommand_descriptor_,
      RequestUseChartletCommand::default_instance_,
      RequestUseChartletCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUseChartletCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUseChartletCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUseChartletCommand));
  ResponseUseChartletCommand_descriptor_ = file->message_type(85);
  static const int ResponseUseChartletCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUseChartletCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUseChartletCommand, message_),
  };
  ResponseUseChartletCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseUseChartletCommand_descriptor_,
      ResponseUseChartletCommand::default_instance_,
      ResponseUseChartletCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUseChartletCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUseChartletCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseUseChartletCommand));
  RequestChallengeMathInfoCommand_descriptor_ = file->message_type(86);
  static const int RequestChallengeMathInfoCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChallengeMathInfoCommand, request_),
  };
  RequestChallengeMathInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestChallengeMathInfoCommand_descriptor_,
      RequestChallengeMathInfoCommand::default_instance_,
      RequestChallengeMathInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChallengeMathInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestChallengeMathInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestChallengeMathInfoCommand));
  ResponseChallengeMatchInfoCommand_descriptor_ = file->message_type(87);
  static const int ResponseChallengeMatchInfoCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, challengedays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, remaintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, eventname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, carlimitdisplaystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, expireseconds_),
  };
  ResponseChallengeMatchInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseChallengeMatchInfoCommand_descriptor_,
      ResponseChallengeMatchInfoCommand::default_instance_,
      ResponseChallengeMatchInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseChallengeMatchInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseChallengeMatchInfoCommand));
  ResponseFeedCommand_descriptor_ = file->message_type(88);
  static const int ResponseFeedCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFeedCommand, feedcontent_),
  };
  ResponseFeedCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFeedCommand_descriptor_,
      ResponseFeedCommand::default_instance_,
      ResponseFeedCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFeedCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFeedCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFeedCommand));
  ItemMessage_descriptor_ = file->message_type(89);
  static const int ItemMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, discountnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, discountprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, buytimelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, sellflag_),
  };
  ItemMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemMessage_descriptor_,
      ItemMessage::default_instance_,
      ItemMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemMessage));
  RequestStoreDetailCommand_descriptor_ = file->message_type(90);
  static const int RequestStoreDetailCommand_offsets_[1] = {
  };
  RequestStoreDetailCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestStoreDetailCommand_descriptor_,
      RequestStoreDetailCommand::default_instance_,
      RequestStoreDetailCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStoreDetailCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStoreDetailCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestStoreDetailCommand));
  ResponseStoreDetailCommand_descriptor_ = file->message_type(91);
  static const int ResponseStoreDetailCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStoreDetailCommand, items_),
  };
  ResponseStoreDetailCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseStoreDetailCommand_descriptor_,
      ResponseStoreDetailCommand::default_instance_,
      ResponseStoreDetailCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStoreDetailCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStoreDetailCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseStoreDetailCommand));
  RequestBuyItemCommand_descriptor_ = file->message_type(92);
  static const int RequestBuyItemCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBuyItemCommand, itemid_),
  };
  RequestBuyItemCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestBuyItemCommand_descriptor_,
      RequestBuyItemCommand::default_instance_,
      RequestBuyItemCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBuyItemCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestBuyItemCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestBuyItemCommand));
  ResponseBuyItemCommand_descriptor_ = file->message_type(93);
  static const int ResponseBuyItemCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyItemCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyItemCommand, message_),
  };
  ResponseBuyItemCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseBuyItemCommand_descriptor_,
      ResponseBuyItemCommand::default_instance_,
      ResponseBuyItemCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyItemCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseBuyItemCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseBuyItemCommand));
  RequestSystemCommand_descriptor_ = file->message_type(94);
  static const int RequestSystemCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemCommand, content_),
  };
  RequestSystemCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestSystemCommand_descriptor_,
      RequestSystemCommand::default_instance_,
      RequestSystemCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSystemCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestSystemCommand));
  RequestSystemCommand_SystemConfigType_descriptor_ = RequestSystemCommand_descriptor_->enum_type(0);
  ResponseSystemCommand_descriptor_ = file->message_type(95);
  static const int ResponseSystemCommand_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, eventoption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, ctaparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, messageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, speedfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, ipspfailedmessageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, rentjaguarurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, getjaguarurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, jaguarinfourl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, servers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, popmod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, energyrecoveringstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, energyrecoveringperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, energyrecoveringnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, ipsppurchaseitemcallbacktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, energymaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, newmod_),
  };
  ResponseSystemCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseSystemCommand_descriptor_,
      ResponseSystemCommand::default_instance_,
      ResponseSystemCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSystemCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseSystemCommand));
  EventOptionMessage_descriptor_ = file->message_type(96);
  static const int EventOptionMessage_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, cashreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, opponentcollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, raceevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, trafficflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, medalposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, medalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, medaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, initialtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, penaltytime_),
  };
  EventOptionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventOptionMessage_descriptor_,
      EventOptionMessage::default_instance_,
      EventOptionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventOptionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventOptionMessage));
  CashRewardMessage_descriptor_ = file->message_type(97);
  static const int CashRewardMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashRewardMessage, bronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashRewardMessage, silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashRewardMessage, gold_),
  };
  CashRewardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CashRewardMessage_descriptor_,
      CashRewardMessage::default_instance_,
      CashRewardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashRewardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashRewardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CashRewardMessage));
  MedalPositionMessage_descriptor_ = file->message_type(98);
  static const int MedalPositionMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalPositionMessage, positionbronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalPositionMessage, positionsilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalPositionMessage, positiongold_),
  };
  MedalPositionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedalPositionMessage_descriptor_,
      MedalPositionMessage::default_instance_,
      MedalPositionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalPositionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalPositionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedalPositionMessage));
  MedalScoreMessage_descriptor_ = file->message_type(99);
  static const int MedalScoreMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalScoreMessage, scorebronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalScoreMessage, scoresilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalScoreMessage, scoregold_),
  };
  MedalScoreMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedalScoreMessage_descriptor_,
      MedalScoreMessage::default_instance_,
      MedalScoreMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalScoreMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalScoreMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedalScoreMessage));
  MedalTimeMessage_descriptor_ = file->message_type(100);
  static const int MedalTimeMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalTimeMessage, timebronze_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalTimeMessage, timesilver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalTimeMessage, timegold_),
  };
  MedalTimeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedalTimeMessage_descriptor_,
      MedalTimeMessage::default_instance_,
      MedalTimeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalTimeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedalTimeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedalTimeMessage));
  CountdownInitialTimeMessage_descriptor_ = file->message_type(101);
  static const int CountdownInitialTimeMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountdownInitialTimeMessage, initialtime_),
  };
  CountdownInitialTimeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountdownInitialTimeMessage_descriptor_,
      CountdownInitialTimeMessage::default_instance_,
      CountdownInitialTimeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountdownInitialTimeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountdownInitialTimeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountdownInitialTimeMessage));
  PenaltyTimeMessage_descriptor_ = file->message_type(102);
  static const int PenaltyTimeMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyTimeMessage, maximumtime_),
  };
  PenaltyTimeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PenaltyTimeMessage_descriptor_,
      PenaltyTimeMessage::default_instance_,
      PenaltyTimeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyTimeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PenaltyTimeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PenaltyTimeMessage));
  OpponentCollectionMessage_descriptor_ = file->message_type(103);
  static const int OpponentCollectionMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentCollectionMessage, opponent_),
  };
  OpponentCollectionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpponentCollectionMessage_descriptor_,
      OpponentCollectionMessage::default_instance_,
      OpponentCollectionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentCollectionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentCollectionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpponentCollectionMessage));
  OpponentMessage_descriptor_ = file->message_type(104);
  static const int OpponentMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, drivername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, cardescriptionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, colourindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, stationary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, aisettings_),
  };
  OpponentMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpponentMessage_descriptor_,
      OpponentMessage::default_instance_,
      OpponentMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpponentMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpponentMessage));
  AiSettingsMessage_descriptor_ = file->message_type(105);
  static const int AiSettingsMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, speedfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, corneringfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, racinglinescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, rubberbandingtweakstouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, rubberbandingdifficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, rubberbandingtargetdifficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, pathfindingskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, nitroskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, maxhealth_),
  };
  AiSettingsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AiSettingsMessage_descriptor_,
      AiSettingsMessage::default_instance_,
      AiSettingsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AiSettingsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AiSettingsMessage));
  RaceEventMessage_descriptor_ = file->message_type(106);
  static const int RaceEventMessage_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, racetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, racefsmprefaboverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, carrestriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, trackname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, blacklistevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, classrestriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, environmentprefab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, trafficcarcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, openworldtrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, autologid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, pursuittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, startlinenospawnzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, finishlinenospawnzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, spawndistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, startline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, finishline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, endoftrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, checkpointcollection_),
  };
  RaceEventMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceEventMessage_descriptor_,
      RaceEventMessage::default_instance_,
      RaceEventMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceEventMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceEventMessage));
  TrafficFlowMessage_descriptor_ = file->message_type(107);
  static const int TrafficFlowMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, maxincomingcarsoverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, maxoutcomingcarsoverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, outgoinglightmindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, outgoinglightmaxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, outgoingheavymindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, outgoingheavymaxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, incominglightmindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, incominglightmaxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, incomingheavymindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, incomingheavymaxdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, intialnotrafficdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, racetrafficcongestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, trfficcarspawndescs_),
  };
  TrafficFlowMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficFlowMessage_descriptor_,
      TrafficFlowMessage::default_instance_,
      TrafficFlowMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficFlowMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficFlowMessage));
  RaceTrafficCongestionMessage_descriptor_ = file->message_type(108);
  static const int RaceTrafficCongestionMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTrafficCongestionMessage, racecompletetionfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTrafficCongestionMessage, outgoingtrafficcongestionfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTrafficCongestionMessage, oncomingtrafficcongestionfactor_),
  };
  RaceTrafficCongestionMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceTrafficCongestionMessage_descriptor_,
      RaceTrafficCongestionMessage::default_instance_,
      RaceTrafficCongestionMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTrafficCongestionMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceTrafficCongestionMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceTrafficCongestionMessage));
  TrafficCarSpawnDescsMessage_descriptor_ = file->message_type(109);
  static const int TrafficCarSpawnDescsMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficCarSpawnDescsMessage, prefabld_),
  };
  TrafficCarSpawnDescsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrafficCarSpawnDescsMessage_descriptor_,
      TrafficCarSpawnDescsMessage::default_instance_,
      TrafficCarSpawnDescsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficCarSpawnDescsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficCarSpawnDescsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrafficCarSpawnDescsMessage));
  RequestRegistJaguarCommand_descriptor_ = file->message_type(110);
  static const int RequestRegistJaguarCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegistJaguarCommand, jaguartype_),
  };
  RequestRegistJaguarCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegistJaguarCommand_descriptor_,
      RequestRegistJaguarCommand::default_instance_,
      RequestRegistJaguarCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegistJaguarCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegistJaguarCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegistJaguarCommand));
  ResponseRegistJaguarCommand_descriptor_ = file->message_type(111);
  static const int ResponseRegistJaguarCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegistJaguarCommand, levelracecanuse_),
  };
  ResponseRegistJaguarCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegistJaguarCommand_descriptor_,
      ResponseRegistJaguarCommand::default_instance_,
      ResponseRegistJaguarCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegistJaguarCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegistJaguarCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegistJaguarCommand));
  RequestRpLeaderboardCommand_descriptor_ = file->message_type(112);
  static const int RequestRpLeaderboardCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRpLeaderboardCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRpLeaderboardCommand, hasprofileui_),
  };
  RequestRpLeaderboardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRpLeaderboardCommand_descriptor_,
      RequestRpLeaderboardCommand::default_instance_,
      RequestRpLeaderboardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRpLeaderboardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRpLeaderboardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRpLeaderboardCommand));
  ResponseRpLeaderboardCommand_descriptor_ = file->message_type(113);
  static const int ResponseRpLeaderboardCommand_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, rpleaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, selfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, selfheadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, selfheadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, selfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, selfrplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, selfrpnum_),
  };
  ResponseRpLeaderboardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRpLeaderboardCommand_descriptor_,
      ResponseRpLeaderboardCommand::default_instance_,
      ResponseRpLeaderboardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRpLeaderboardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRpLeaderboardCommand));
  RpLeaderboardMessage_descriptor_ = file->message_type(114);
  static const int RpLeaderboardMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, rplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, rpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, userid_),
  };
  RpLeaderboardMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpLeaderboardMessage_descriptor_,
      RpLeaderboardMessage::default_instance_,
      RpLeaderboardMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpLeaderboardMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpLeaderboardMessage));
  ProfileCarInfo_descriptor_ = file->message_type(115);
  static const int ProfileCarInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, usercarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, slotlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, carpaintjobindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, carscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, likenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, canlike_),
  };
  ProfileCarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfileCarInfo_descriptor_,
      ProfileCarInfo::default_instance_,
      ProfileCarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfileCarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfileCarInfo));
  RequestProfileUserDataCommand_descriptor_ = file->message_type(116);
  static const int RequestProfileUserDataCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileUserDataCommand, profileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileUserDataCommand, sourcetypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileUserDataCommand, tournamentonlineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileUserDataCommand, tournamentgroupid_),
  };
  RequestProfileUserDataCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProfileUserDataCommand_descriptor_,
      RequestProfileUserDataCommand::default_instance_,
      RequestProfileUserDataCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileUserDataCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileUserDataCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProfileUserDataCommand));
  ResponseProfileUserDataCommand_descriptor_ = file->message_type(117);
  static const int ResponseProfileUserDataCommand_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, rplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, rpexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, mostwantednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, carnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, garagescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, canreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, carinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, ownedcarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, ownedusercarid_),
  };
  ResponseProfileUserDataCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseProfileUserDataCommand_descriptor_,
      ResponseProfileUserDataCommand::default_instance_,
      ResponseProfileUserDataCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileUserDataCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseProfileUserDataCommand));
  RequestProfileNextCarCommand_descriptor_ = file->message_type(118);
  static const int RequestProfileNextCarCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileNextCarCommand, usercarid_),
  };
  RequestProfileNextCarCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProfileNextCarCommand_descriptor_,
      RequestProfileNextCarCommand::default_instance_,
      RequestProfileNextCarCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileNextCarCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileNextCarCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProfileNextCarCommand));
  ResponseProfileNextCarCommand_descriptor_ = file->message_type(119);
  static const int ResponseProfileNextCarCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileNextCarCommand, carinfo_),
  };
  ResponseProfileNextCarCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseProfileNextCarCommand_descriptor_,
      ResponseProfileNextCarCommand::default_instance_,
      ResponseProfileNextCarCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileNextCarCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileNextCarCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseProfileNextCarCommand));
  RequestProfileLikeCommand_descriptor_ = file->message_type(120);
  static const int RequestProfileLikeCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileLikeCommand, usercarid_),
  };
  RequestProfileLikeCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProfileLikeCommand_descriptor_,
      RequestProfileLikeCommand::default_instance_,
      RequestProfileLikeCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileLikeCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileLikeCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProfileLikeCommand));
  ResponseProfileLikeCommand_descriptor_ = file->message_type(121);
  static const int ResponseProfileLikeCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileLikeCommand, likenum_),
  };
  ResponseProfileLikeCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseProfileLikeCommand_descriptor_,
      ResponseProfileLikeCommand::default_instance_,
      ResponseProfileLikeCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileLikeCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileLikeCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseProfileLikeCommand));
  RequestProfileReportCommand_descriptor_ = file->message_type(122);
  static const int RequestProfileReportCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileReportCommand, profileid_),
  };
  RequestProfileReportCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProfileReportCommand_descriptor_,
      RequestProfileReportCommand::default_instance_,
      RequestProfileReportCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileReportCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileReportCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProfileReportCommand));
  ResponseProfileReportCommand_descriptor_ = file->message_type(123);
  static const int ResponseProfileReportCommand_offsets_[1] = {
  };
  ResponseProfileReportCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseProfileReportCommand_descriptor_,
      ResponseProfileReportCommand::default_instance_,
      ResponseProfileReportCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileReportCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileReportCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseProfileReportCommand));
  UserVSProfile_descriptor_ = file->message_type(124);
  static const int UserVSProfile_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, titlestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, playervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, ghostvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, hasprogressbar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, subtitlestr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, unitsstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, valuetype_),
  };
  UserVSProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserVSProfile_descriptor_,
      UserVSProfile::default_instance_,
      UserVSProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserVSProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserVSProfile));
  RequestProfileVSCommand_descriptor_ = file->message_type(125);
  static const int RequestProfileVSCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileVSCommand, profileid_),
  };
  RequestProfileVSCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProfileVSCommand_descriptor_,
      RequestProfileVSCommand::default_instance_,
      RequestProfileVSCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileVSCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProfileVSCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProfileVSCommand));
  ResponseProfileVSCommand_descriptor_ = file->message_type(126);
  static const int ResponseProfileVSCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileVSCommand, vsdata_),
  };
  ResponseProfileVSCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseProfileVSCommand_descriptor_,
      ResponseProfileVSCommand::default_instance_,
      ResponseProfileVSCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileVSCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseProfileVSCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseProfileVSCommand));
  RequestRecordUserRaceActionCommand_descriptor_ = file->message_type(127);
  static const int RequestRecordUserRaceActionCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, copskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, consumable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, drift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, billboard_),
  };
  RequestRecordUserRaceActionCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRecordUserRaceActionCommand_descriptor_,
      RequestRecordUserRaceActionCommand::default_instance_,
      RequestRecordUserRaceActionCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRecordUserRaceActionCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRecordUserRaceActionCommand));
  RequestQuickRaceCommand_descriptor_ = file->message_type(128);
  static const int RequestQuickRaceCommand_offsets_[1] = {
  };
  RequestQuickRaceCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestQuickRaceCommand_descriptor_,
      RequestQuickRaceCommand::default_instance_,
      RequestQuickRaceCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuickRaceCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuickRaceCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestQuickRaceCommand));
  ResponseQuickRaceCommand_descriptor_ = file->message_type(129);
  static const int ResponseQuickRaceCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickRaceCommand, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickRaceCommand, trackindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickRaceCommand, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickRaceCommand, checkpointinfo_),
  };
  ResponseQuickRaceCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseQuickRaceCommand_descriptor_,
      ResponseQuickRaceCommand::default_instance_,
      ResponseQuickRaceCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickRaceCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickRaceCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseQuickRaceCommand));
  ResponseNotificationCommand_descriptor_ = file->message_type(130);
  static const int ResponseNotificationCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNotificationCommand, iconid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNotificationCommand, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNotificationCommand, content_),
  };
  ResponseNotificationCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseNotificationCommand_descriptor_,
      ResponseNotificationCommand::default_instance_,
      ResponseNotificationCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNotificationCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseNotificationCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseNotificationCommand));
  RequestGhostRecordCommand_descriptor_ = file->message_type(131);
  static const int RequestGhostRecordCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, modeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, racetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, carmodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, carmodvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, carmodlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, carmodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, sampleperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, sampledata_),
  };
  RequestGhostRecordCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGhostRecordCommand_descriptor_,
      RequestGhostRecordCommand::default_instance_,
      RequestGhostRecordCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGhostRecordCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGhostRecordCommand));
  ResponseGhostRecordCommand_descriptor_ = file->message_type(132);
  static const int ResponseGhostRecordCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGhostRecordCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGhostRecordCommand, message_),
  };
  ResponseGhostRecordCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseGhostRecordCommand_descriptor_,
      ResponseGhostRecordCommand::default_instance_,
      ResponseGhostRecordCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGhostRecordCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGhostRecordCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseGhostRecordCommand));
  RequestIapCheckCommand_descriptor_ = file->message_type(133);
  static const int RequestIapCheckCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIapCheckCommand, receiptdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIapCheckCommand, ipsppurchaseitemcallbacktype_),
  };
  RequestIapCheckCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestIapCheckCommand_descriptor_,
      RequestIapCheckCommand::default_instance_,
      RequestIapCheckCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIapCheckCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestIapCheckCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestIapCheckCommand));
  ResponseIapCheckCommand_descriptor_ = file->message_type(134);
  static const int ResponseIapCheckCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseIapCheckCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseIapCheckCommand, message_),
  };
  ResponseIapCheckCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseIapCheckCommand_descriptor_,
      ResponseIapCheckCommand::default_instance_,
      ResponseIapCheckCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseIapCheckCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseIapCheckCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseIapCheckCommand));
  ResponseTournamentNotificationCommand_descriptor_ = file->message_type(135);
  static const int ResponseTournamentNotificationCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentNotificationCommand, message_),
  };
  ResponseTournamentNotificationCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentNotificationCommand_descriptor_,
      ResponseTournamentNotificationCommand::default_instance_,
      ResponseTournamentNotificationCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentNotificationCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentNotificationCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentNotificationCommand));
  RequestTutorialRewardCommand_descriptor_ = file->message_type(136);
  static const int RequestTutorialRewardCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTutorialRewardCommand, finishedalltutorial_),
  };
  RequestTutorialRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTutorialRewardCommand_descriptor_,
      RequestTutorialRewardCommand::default_instance_,
      RequestTutorialRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTutorialRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTutorialRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTutorialRewardCommand));
  ResponseTutorialRewardCommand_descriptor_ = file->message_type(137);
  static const int ResponseTutorialRewardCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTutorialRewardCommand, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTutorialRewardCommand, reward_),
  };
  ResponseTutorialRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTutorialRewardCommand_descriptor_,
      ResponseTutorialRewardCommand::default_instance_,
      ResponseTutorialRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTutorialRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTutorialRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTutorialRewardCommand));
  ResponsePopupCommand_descriptor_ = file->message_type(138);
  static const int ResponsePopupCommand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, popscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, flowid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, yesbuttonid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, nobuttonid_),
  };
  ResponsePopupCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponsePopupCommand_descriptor_,
      ResponsePopupCommand::default_instance_,
      ResponsePopupCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponsePopupCommand));
  ResponsePopupListCommand_descriptor_ = file->message_type(139);
  static const int ResponsePopupListCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupListCommand, popups_),
  };
  ResponsePopupListCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponsePopupListCommand_descriptor_,
      ResponsePopupListCommand::default_instance_,
      ResponsePopupListCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupListCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePopupListCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponsePopupListCommand));
  ResponseTournamentRewardNumCommand_descriptor_ = file->message_type(140);
  static const int ResponseTournamentRewardNumCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardNumCommand, rewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardNumCommand, endtime_),
  };
  ResponseTournamentRewardNumCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentRewardNumCommand_descriptor_,
      ResponseTournamentRewardNumCommand::default_instance_,
      ResponseTournamentRewardNumCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardNumCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentRewardNumCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentRewardNumCommand));
  RequestGotchaCommand_descriptor_ = file->message_type(141);
  static const int RequestGotchaCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGotchaCommand, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGotchaCommand, carid_),
  };
  RequestGotchaCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGotchaCommand_descriptor_,
      RequestGotchaCommand::default_instance_,
      RequestGotchaCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGotchaCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGotchaCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGotchaCommand));
  ResponseGotchaCommand_descriptor_ = file->message_type(142);
  static const int ResponseGotchaCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGotchaCommand, gotchaitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGotchaCommand, globalmessage_),
  };
  ResponseGotchaCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseGotchaCommand_descriptor_,
      ResponseGotchaCommand::default_instance_,
      ResponseGotchaCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGotchaCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGotchaCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseGotchaCommand));
  GotchaItemInfo_descriptor_ = file->message_type(143);
  static const int GotchaItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaItemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaItemInfo, number_),
  };
  GotchaItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GotchaItemInfo_descriptor_,
      GotchaItemInfo::default_instance_,
      GotchaItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotchaItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GotchaItemInfo));
  RequestCheatInfoCommand_descriptor_ = file->message_type(144);
  static const int RequestCheatInfoCommand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, cheattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, carconfigname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, midgearspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, topgearspd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, exefilemd5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, userselectcarid_),
  };
  RequestCheatInfoCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCheatInfoCommand_descriptor_,
      RequestCheatInfoCommand::default_instance_,
      RequestCheatInfoCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheatInfoCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCheatInfoCommand));
  LeaderboardClass_descriptor_ = file->message_type(145);
  static const int LeaderboardClass_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardClass, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardClass, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardClass, type_),
  };
  LeaderboardClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderboardClass_descriptor_,
      LeaderboardClass::default_instance_,
      LeaderboardClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderboardClass));
  LeaderboardItem_descriptor_ = file->message_type(146);
  static const int LeaderboardItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, headindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, rplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, rpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, ismyself_),
  };
  LeaderboardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderboardItem_descriptor_,
      LeaderboardItem::default_instance_,
      LeaderboardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderboardItem));
  RequestLeaderboardClass_descriptor_ = file->message_type(147);
  static const int RequestLeaderboardClass_offsets_[1] = {
  };
  RequestLeaderboardClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLeaderboardClass_descriptor_,
      RequestLeaderboardClass::default_instance_,
      RequestLeaderboardClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaderboardClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaderboardClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLeaderboardClass));
  ResponseLeaderboardClass_descriptor_ = file->message_type(148);
  static const int ResponseLeaderboardClass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboardClass, clases_),
  };
  ResponseLeaderboardClass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseLeaderboardClass_descriptor_,
      ResponseLeaderboardClass::default_instance_,
      ResponseLeaderboardClass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboardClass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboardClass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseLeaderboardClass));
  LeaderboardHeadInfo_descriptor_ = file->message_type(149);
  static const int LeaderboardHeadInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardHeadInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardHeadInfo, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardHeadInfo, range_),
  };
  LeaderboardHeadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderboardHeadInfo_descriptor_,
      LeaderboardHeadInfo::default_instance_,
      LeaderboardHeadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardHeadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderboardHeadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderboardHeadInfo));
  RequestLeaderboard_descriptor_ = file->message_type(150);
  static const int RequestLeaderboard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaderboard, info_),
  };
  RequestLeaderboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLeaderboard_descriptor_,
      RequestLeaderboard::default_instance_,
      RequestLeaderboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaderboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaderboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLeaderboard));
  ResponseLeaderboard_descriptor_ = file->message_type(151);
  static const int ResponseLeaderboard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboard, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboard, items_),
  };
  ResponseLeaderboard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseLeaderboard_descriptor_,
      ResponseLeaderboard::default_instance_,
      ResponseLeaderboard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaderboard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseLeaderboard));
  RequestTournamentNum_descriptor_ = file->message_type(152);
  static const int RequestTournamentNum_offsets_[1] = {
  };
  RequestTournamentNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestTournamentNum_descriptor_,
      RequestTournamentNum::default_instance_,
      RequestTournamentNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestTournamentNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestTournamentNum));
  ResponseTournamentNum_descriptor_ = file->message_type(153);
  static const int ResponseTournamentNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentNum, rewardnum_),
  };
  ResponseTournamentNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseTournamentNum_descriptor_,
      ResponseTournamentNum::default_instance_,
      ResponseTournamentNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseTournamentNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseTournamentNum));
  RequestCollectEnergyCommand_descriptor_ = file->message_type(154);
  static const int RequestCollectEnergyCommand_offsets_[1] = {
  };
  RequestCollectEnergyCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCollectEnergyCommand_descriptor_,
      RequestCollectEnergyCommand::default_instance_,
      RequestCollectEnergyCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCollectEnergyCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCollectEnergyCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCollectEnergyCommand));
  RequestEnergyTimeCommand_descriptor_ = file->message_type(155);
  static const int RequestEnergyTimeCommand_offsets_[1] = {
  };
  RequestEnergyTimeCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestEnergyTimeCommand_descriptor_,
      RequestEnergyTimeCommand::default_instance_,
      RequestEnergyTimeCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnergyTimeCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnergyTimeCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestEnergyTimeCommand));
  ResponseEnergyTimeCommand_descriptor_ = file->message_type(156);
  static const int ResponseEnergyTimeCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnergyTimeCommand, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnergyTimeCommand, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnergyTimeCommand, energy_),
  };
  ResponseEnergyTimeCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseEnergyTimeCommand_descriptor_,
      ResponseEnergyTimeCommand::default_instance_,
      ResponseEnergyTimeCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnergyTimeCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnergyTimeCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseEnergyTimeCommand));
  RequestFansRewardCommand_descriptor_ = file->message_type(157);
  static const int RequestFansRewardCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFansRewardCommand, id_),
  };
  RequestFansRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFansRewardCommand_descriptor_,
      RequestFansRewardCommand::default_instance_,
      RequestFansRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFansRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFansRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFansRewardCommand));
  ResponseFansRewardTimeCommand_descriptor_ = file->message_type(158);
  static const int ResponseFansRewardTimeCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFansRewardTimeCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFansRewardTimeCommand, starttime_),
  };
  ResponseFansRewardTimeCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFansRewardTimeCommand_descriptor_,
      ResponseFansRewardTimeCommand::default_instance_,
      ResponseFansRewardTimeCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFansRewardTimeCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFansRewardTimeCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFansRewardTimeCommand));
  RequestPropPurchaseCommand_descriptor_ = file->message_type(159);
  static const int RequestPropPurchaseCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPropPurchaseCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPropPurchaseCommand, count_),
  };
  RequestPropPurchaseCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPropPurchaseCommand_descriptor_,
      RequestPropPurchaseCommand::default_instance_,
      RequestPropPurchaseCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPropPurchaseCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPropPurchaseCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPropPurchaseCommand));
  RequestMissionRewardCommand_descriptor_ = file->message_type(160);
  static const int RequestMissionRewardCommand_offsets_[1] = {
  };
  RequestMissionRewardCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMissionRewardCommand_descriptor_,
      RequestMissionRewardCommand::default_instance_,
      RequestMissionRewardCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionRewardCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionRewardCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMissionRewardCommand));
  RequestMissionFinishCommand_descriptor_ = file->message_type(161);
  static const int RequestMissionFinishCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionFinishCommand, id_),
  };
  RequestMissionFinishCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestMissionFinishCommand_descriptor_,
      RequestMissionFinishCommand::default_instance_,
      RequestMissionFinishCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionFinishCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestMissionFinishCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestMissionFinishCommand));
  ResponseMissionListCommand_descriptor_ = file->message_type(162);
  static const int ResponseMissionListCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseMissionListCommand, missions_),
  };
  ResponseMissionListCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseMissionListCommand_descriptor_,
      ResponseMissionListCommand::default_instance_,
      ResponseMissionListCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseMissionListCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseMissionListCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseMissionListCommand));
  RequestLotteryCommand_descriptor_ = file->message_type(163);
  static const int RequestLotteryCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLotteryCommand, lotterytype_),
  };
  RequestLotteryCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestLotteryCommand_descriptor_,
      RequestLotteryCommand::default_instance_,
      RequestLotteryCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLotteryCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLotteryCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestLotteryCommand));
  ResponseLotteryCommand_descriptor_ = file->message_type(164);
  static const int ResponseLotteryCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLotteryCommand, rewards_),
  };
  ResponseLotteryCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseLotteryCommand_descriptor_,
      ResponseLotteryCommand::default_instance_,
      ResponseLotteryCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLotteryCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLotteryCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseLotteryCommand));
  RequestFleetRaceCommand_descriptor_ = file->message_type(165);
  static const int RequestFleetRaceCommand_offsets_[1] = {
  };
  RequestFleetRaceCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFleetRaceCommand_descriptor_,
      RequestFleetRaceCommand::default_instance_,
      RequestFleetRaceCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetRaceCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetRaceCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFleetRaceCommand));
  ResponseFleetRaceCommand_descriptor_ = file->message_type(166);
  static const int ResponseFleetRaceCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetRaceCommand, races_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetRaceCommand, rpleaderboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetRaceCommand, selfrank_),
  };
  ResponseFleetRaceCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFleetRaceCommand_descriptor_,
      ResponseFleetRaceCommand::default_instance_,
      ResponseFleetRaceCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetRaceCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetRaceCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFleetRaceCommand));
  RequestFleetStartCommand_descriptor_ = file->message_type(167);
  static const int RequestFleetStartCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetStartCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetStartCommand, cars_),
  };
  RequestFleetStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFleetStartCommand_descriptor_,
      RequestFleetStartCommand::default_instance_,
      RequestFleetStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFleetStartCommand));
  ResponseFleetStartCommand_descriptor_ = file->message_type(168);
  static const int ResponseFleetStartCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetStartCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetStartCommand, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetStartCommand, displayname_),
  };
  ResponseFleetStartCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFleetStartCommand_descriptor_,
      ResponseFleetStartCommand::default_instance_,
      ResponseFleetStartCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetStartCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetStartCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFleetStartCommand));
  RequestFleetEndCommand_descriptor_ = file->message_type(169);
  static const int RequestFleetEndCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetEndCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetEndCommand, advanced_),
  };
  RequestFleetEndCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFleetEndCommand_descriptor_,
      RequestFleetEndCommand::default_instance_,
      RequestFleetEndCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetEndCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetEndCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFleetEndCommand));
  ResponseFleetEndCommand_descriptor_ = file->message_type(170);
  static const int ResponseFleetEndCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, displayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, rewards_),
  };
  ResponseFleetEndCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFleetEndCommand_descriptor_,
      ResponseFleetEndCommand::default_instance_,
      ResponseFleetEndCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetEndCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFleetEndCommand));
  RequestFleetDoubleCommand_descriptor_ = file->message_type(171);
  static const int RequestFleetDoubleCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetDoubleCommand, id_),
  };
  RequestFleetDoubleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFleetDoubleCommand_descriptor_,
      RequestFleetDoubleCommand::default_instance_,
      RequestFleetDoubleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetDoubleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFleetDoubleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFleetDoubleCommand));
  ResponseFleetDoubleCommand_descriptor_ = file->message_type(172);
  static const int ResponseFleetDoubleCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetDoubleCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetDoubleCommand, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetDoubleCommand, displayname_),
  };
  ResponseFleetDoubleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFleetDoubleCommand_descriptor_,
      ResponseFleetDoubleCommand::default_instance_,
      ResponseFleetDoubleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetDoubleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFleetDoubleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFleetDoubleCommand));
  RequestFixCarLimitCommand_descriptor_ = file->message_type(173);
  static const int RequestFixCarLimitCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFixCarLimitCommand, carid_),
  };
  RequestFixCarLimitCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFixCarLimitCommand_descriptor_,
      RequestFixCarLimitCommand::default_instance_,
      RequestFixCarLimitCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFixCarLimitCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFixCarLimitCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFixCarLimitCommand));
  ResponseFixCarLimitCommand_descriptor_ = file->message_type(174);
  static const int ResponseFixCarLimitCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFixCarLimitCommand, carid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFixCarLimitCommand, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFixCarLimitCommand, displayname_),
  };
  ResponseFixCarLimitCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFixCarLimitCommand_descriptor_,
      ResponseFixCarLimitCommand::default_instance_,
      ResponseFixCarLimitCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFixCarLimitCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFixCarLimitCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFixCarLimitCommand));
  RequestCommand_descriptor_ = file->message_type(175);
  static const int RequestCommand_offsets_[56] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, trackcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, logincommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, ghostcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, raceresultcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, tournamentdetailcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, tournamentrewarddetailcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, tournamentcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, resourcecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, tournamentsignupcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, racestartcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, bindingstartcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, bindingresultcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, bindingconfirmcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, getrward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, garagecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, buycarcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, cardatacommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, upgradeslotcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, usechartletcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, modifyuserinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, storedetailcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, buyitemcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, registjaguar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, iapcheckcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, tutorialrewardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, rpleaderboardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, ghostrecordcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, challengemathinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, profileuserdatacommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, profilenextcarcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, profilelikecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, profilereportcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, profilevscommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, gotchacommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, cheatinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, recorduserraceactioncommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, systemcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, leaderboardclasscommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, leaderboardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, requesttournamentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, requestquickrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, bindingtokencommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, bindinginfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, collectenergycommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, energytimecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, fansrewardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, proppurchasecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, missionrewardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, missionfinishcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, lotterycommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, fleetracecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, fleetstartcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, fleetendcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, fleetdoublecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, fixcarlimitcommand_),
  };
  RequestCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCommand_descriptor_,
      RequestCommand::default_instance_,
      RequestCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCommand));
  ResponseCommand_descriptor_ = file->message_type(176);
  static const int ResponseCommand_offsets_[64] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, trackcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, userinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, ghostcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, raceresultcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentdetailcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentrewarddetailcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, resourcecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentsignupcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, racestartcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, bindingstartcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, bindingresultcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, bindingconfirmcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, bindingpopupcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, errorcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, modeinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, rewardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, getreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentracestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentracereault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, garagecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, buycarcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, cardatacommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, upgradeslotcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, usechartletcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, modifyuserinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, challengematchinfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, storedetailcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, buyitemcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, systemcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, weibosharecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, registjaguar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, feedcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, iapcheckcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentnotificationcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tutorialrewardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, popupcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, rpleaderboardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, notificationcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, ghostrecordcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, tournamentrewardnumcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, profileuserdatacommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, profilenextcarcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, profilelikecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, profilereportcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, profilevscommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, gotchacommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, leaderboardclasscommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, leaderboardcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, responsetournamentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, responsequickrace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, bindingtokencommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, bindinginfocommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, energytimecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, fansrewardtimecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, missionlistcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, lotterycommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, popuplistcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, fleetracecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, fleetstartcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, fleetendcommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, fleetdoublecommand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, fixcarlimitcommand_),
  };
  ResponseCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseCommand_descriptor_,
      ResponseCommand::default_instance_,
      ResponseCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseCommand));
  LocalUserinfo_descriptor_ = file->message_type(177);
  static const int LocalUserinfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, snsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, serverurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, uid_),
  };
  LocalUserinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocalUserinfo_descriptor_,
      LocalUserinfo::default_instance_,
      LocalUserinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalUserinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocalUserinfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Commands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserViewInfo_descriptor_, &UserViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionInfo_descriptor_, &MissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reward_descriptor_, &Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardN_descriptor_, &RewardN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardList_descriptor_, &RewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Prop_descriptor_, &Prop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FleetRace_descriptor_, &FleetRace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Leaderboard_descriptor_, &Leaderboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderboardProfile_descriptor_, &LeaderboardProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModeInfo_descriptor_, &ModeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackInfo_descriptor_, &TrackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckPointInfo_descriptor_, &CheckPointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewbieTierCheckList_descriptor_, &NewbieTierCheckList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TierInfo_descriptor_, &TierInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPSInfo_descriptor_, &GPSInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestResourceCommand_descriptor_, &RequestResourceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceItemInfo_descriptor_, &ResourceItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseResourceCommand_descriptor_, &ResponseResourceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTrackCommand_descriptor_, &RequestTrackCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTrackCommand_descriptor_, &ResponseTrackCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUserInfoCommand_descriptor_, &RequestUserInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseWeiboShareLocksCommand_descriptor_, &ResponseWeiboShareLocksCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserWeiboInfo_descriptor_, &UserWeiboInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestModifyUserInfoCommand_descriptor_, &RequestModifyUserInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseModifyUserInfoCommand_descriptor_, &ResponseModifyUserInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseUserInfoCommand_descriptor_, &ResponseUserInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostInfo_descriptor_, &GhostInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RacerInfo_descriptor_, &RacerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestModeInfoCommand_descriptor_, &RequestModeInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRacerForGhostCommand_descriptor_, &ResponseRacerForGhostCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseModeInfoCommand_descriptor_, &ResponseModeInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRaceResultCommand_descriptor_, &RequestRaceResultCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPMessage_descriptor_, &RPMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockInfoMessage_descriptor_, &UnlockInfoMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRaceResultCommand_descriptor_, &ResponseRaceResultCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentRaceResultCommand_descriptor_, &ResponseTournamentRaceResultCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentMessage_descriptor_, &TournamentMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentRankingListMessage_descriptor_, &TournamentRankingListMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentRewardListMessage_descriptor_, &TournamentRewardListMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentRewardDetailMessage_descriptor_, &TournamentRewardDetailMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentDetailMessage_descriptor_, &TournamentDetailMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TournamentDetailRewardMessage_descriptor_, &TournamentDetailRewardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTournamentCommand_descriptor_, &RequestTournamentCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentCommand_descriptor_, &ResponseTournamentCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTournamentRewardDetailCommand_descriptor_, &RequestTournamentRewardDetailCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentRewardDetailCommand_descriptor_, &ResponseTournamentRewardDetailCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    responseTournamentRewardCommand_descriptor_, &responseTournamentRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTournamentSignUpCommand_descriptor_, &RequestTournamentSignUpCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentSignUpCommand_descriptor_, &ResponseTournamentSignUpCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTournamentDetailCommand_descriptor_, &RequestTournamentDetailCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentDetailCommand_descriptor_, &ResponseTournamentDetailCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGetRewardCommand_descriptor_, &RequestGetRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseGetRewardCommand_descriptor_, &ResponseGetRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeadInfo_descriptor_, &HeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRaceStartCommand_descriptor_, &RequestRaceStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRaceStartCommand_descriptor_, &ResponseRaceStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentRaceStartCommand_descriptor_, &ResponseTournamentRaceStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBindingStartCommand_descriptor_, &RequestBindingStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBindingStartCommand_descriptor_, &ResponseBindingStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBindingTokenCommand_descriptor_, &RequestBindingTokenCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBindingTokenCommand_descriptor_, &ResponseBindingTokenCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBindingInfoCommand_descriptor_, &RequestBindingInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBindingInfoCommand_descriptor_, &ResponseBindingInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBindingResultCommand_descriptor_, &RequestBindingResultCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBindingResultCommand_descriptor_, &ResponseBindingResultCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBindingConfirmCommand_descriptor_, &RequestBindingConfirmCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBindingConfirmCommand_descriptor_, &ResponseBindingConfirmCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBindingPopupCommand_descriptor_, &ResponseBindingPopupCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorCommand_descriptor_, &ErrorCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarData_descriptor_, &CarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GotchaExpense_descriptor_, &GotchaExpense::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChartletInfo_descriptor_, &ChartletInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarSlotInfo_descriptor_, &CarSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConsumableData_descriptor_, &ConsumableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGarageCommand_descriptor_, &RequestGarageCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseGarageCommand_descriptor_, &ResponseGarageCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBuyCarCommand_descriptor_, &RequestBuyCarCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBuyCarCommand_descriptor_, &ResponseBuyCarCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCarDataCommand_descriptor_, &RequestCarDataCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseCarDataCommand_descriptor_, &ResponseCarDataCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUpgradeSlotCommand_descriptor_, &RequestUpgradeSlotCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseUpgradeSlotCommand_descriptor_, &ResponseUpgradeSlotCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUseChartletCommand_descriptor_, &RequestUseChartletCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseUseChartletCommand_descriptor_, &ResponseUseChartletCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestChallengeMathInfoCommand_descriptor_, &RequestChallengeMathInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseChallengeMatchInfoCommand_descriptor_, &ResponseChallengeMatchInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFeedCommand_descriptor_, &ResponseFeedCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemMessage_descriptor_, &ItemMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestStoreDetailCommand_descriptor_, &RequestStoreDetailCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseStoreDetailCommand_descriptor_, &ResponseStoreDetailCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestBuyItemCommand_descriptor_, &RequestBuyItemCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseBuyItemCommand_descriptor_, &ResponseBuyItemCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestSystemCommand_descriptor_, &RequestSystemCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseSystemCommand_descriptor_, &ResponseSystemCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventOptionMessage_descriptor_, &EventOptionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CashRewardMessage_descriptor_, &CashRewardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedalPositionMessage_descriptor_, &MedalPositionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedalScoreMessage_descriptor_, &MedalScoreMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedalTimeMessage_descriptor_, &MedalTimeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountdownInitialTimeMessage_descriptor_, &CountdownInitialTimeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PenaltyTimeMessage_descriptor_, &PenaltyTimeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpponentCollectionMessage_descriptor_, &OpponentCollectionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpponentMessage_descriptor_, &OpponentMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AiSettingsMessage_descriptor_, &AiSettingsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceEventMessage_descriptor_, &RaceEventMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficFlowMessage_descriptor_, &TrafficFlowMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceTrafficCongestionMessage_descriptor_, &RaceTrafficCongestionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrafficCarSpawnDescsMessage_descriptor_, &TrafficCarSpawnDescsMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegistJaguarCommand_descriptor_, &RequestRegistJaguarCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegistJaguarCommand_descriptor_, &ResponseRegistJaguarCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRpLeaderboardCommand_descriptor_, &RequestRpLeaderboardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRpLeaderboardCommand_descriptor_, &ResponseRpLeaderboardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpLeaderboardMessage_descriptor_, &RpLeaderboardMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfileCarInfo_descriptor_, &ProfileCarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProfileUserDataCommand_descriptor_, &RequestProfileUserDataCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseProfileUserDataCommand_descriptor_, &ResponseProfileUserDataCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProfileNextCarCommand_descriptor_, &RequestProfileNextCarCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseProfileNextCarCommand_descriptor_, &ResponseProfileNextCarCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProfileLikeCommand_descriptor_, &RequestProfileLikeCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseProfileLikeCommand_descriptor_, &ResponseProfileLikeCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProfileReportCommand_descriptor_, &RequestProfileReportCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseProfileReportCommand_descriptor_, &ResponseProfileReportCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserVSProfile_descriptor_, &UserVSProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProfileVSCommand_descriptor_, &RequestProfileVSCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseProfileVSCommand_descriptor_, &ResponseProfileVSCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRecordUserRaceActionCommand_descriptor_, &RequestRecordUserRaceActionCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestQuickRaceCommand_descriptor_, &RequestQuickRaceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseQuickRaceCommand_descriptor_, &ResponseQuickRaceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseNotificationCommand_descriptor_, &ResponseNotificationCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGhostRecordCommand_descriptor_, &RequestGhostRecordCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseGhostRecordCommand_descriptor_, &ResponseGhostRecordCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestIapCheckCommand_descriptor_, &RequestIapCheckCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseIapCheckCommand_descriptor_, &ResponseIapCheckCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentNotificationCommand_descriptor_, &ResponseTournamentNotificationCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTutorialRewardCommand_descriptor_, &RequestTutorialRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTutorialRewardCommand_descriptor_, &ResponseTutorialRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponsePopupCommand_descriptor_, &ResponsePopupCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponsePopupListCommand_descriptor_, &ResponsePopupListCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentRewardNumCommand_descriptor_, &ResponseTournamentRewardNumCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGotchaCommand_descriptor_, &RequestGotchaCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseGotchaCommand_descriptor_, &ResponseGotchaCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GotchaItemInfo_descriptor_, &GotchaItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCheatInfoCommand_descriptor_, &RequestCheatInfoCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderboardClass_descriptor_, &LeaderboardClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderboardItem_descriptor_, &LeaderboardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLeaderboardClass_descriptor_, &RequestLeaderboardClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseLeaderboardClass_descriptor_, &ResponseLeaderboardClass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderboardHeadInfo_descriptor_, &LeaderboardHeadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLeaderboard_descriptor_, &RequestLeaderboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseLeaderboard_descriptor_, &ResponseLeaderboard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestTournamentNum_descriptor_, &RequestTournamentNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseTournamentNum_descriptor_, &ResponseTournamentNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCollectEnergyCommand_descriptor_, &RequestCollectEnergyCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestEnergyTimeCommand_descriptor_, &RequestEnergyTimeCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseEnergyTimeCommand_descriptor_, &ResponseEnergyTimeCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFansRewardCommand_descriptor_, &RequestFansRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFansRewardTimeCommand_descriptor_, &ResponseFansRewardTimeCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPropPurchaseCommand_descriptor_, &RequestPropPurchaseCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMissionRewardCommand_descriptor_, &RequestMissionRewardCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestMissionFinishCommand_descriptor_, &RequestMissionFinishCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseMissionListCommand_descriptor_, &ResponseMissionListCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestLotteryCommand_descriptor_, &RequestLotteryCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseLotteryCommand_descriptor_, &ResponseLotteryCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFleetRaceCommand_descriptor_, &RequestFleetRaceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFleetRaceCommand_descriptor_, &ResponseFleetRaceCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFleetStartCommand_descriptor_, &RequestFleetStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFleetStartCommand_descriptor_, &ResponseFleetStartCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFleetEndCommand_descriptor_, &RequestFleetEndCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFleetEndCommand_descriptor_, &ResponseFleetEndCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFleetDoubleCommand_descriptor_, &RequestFleetDoubleCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFleetDoubleCommand_descriptor_, &ResponseFleetDoubleCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFixCarLimitCommand_descriptor_, &RequestFixCarLimitCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFixCarLimitCommand_descriptor_, &ResponseFixCarLimitCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCommand_descriptor_, &RequestCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseCommand_descriptor_, &ResponseCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocalUserinfo_descriptor_, &LocalUserinfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Commands_2eproto() {
  delete UserViewInfo::default_instance_;
  delete UserViewInfo_reflection_;
  delete MissionInfo::default_instance_;
  delete MissionInfo_reflection_;
  delete Reward::default_instance_;
  delete Reward_reflection_;
  delete RewardN::default_instance_;
  delete RewardN_reflection_;
  delete RewardList::default_instance_;
  delete RewardList_reflection_;
  delete Prop::default_instance_;
  delete Prop_reflection_;
  delete FleetRace::default_instance_;
  delete FleetRace_reflection_;
  delete Leaderboard::default_instance_;
  delete Leaderboard_reflection_;
  delete LeaderboardProfile::default_instance_;
  delete LeaderboardProfile_reflection_;
  delete ModeInfo::default_instance_;
  delete ModeInfo_reflection_;
  delete TrackInfo::default_instance_;
  delete TrackInfo_reflection_;
  delete CheckPointInfo::default_instance_;
  delete CheckPointInfo_reflection_;
  delete NewbieTierCheckList::default_instance_;
  delete NewbieTierCheckList_reflection_;
  delete TierInfo::default_instance_;
  delete TierInfo_reflection_;
  delete GPSInfo::default_instance_;
  delete GPSInfo_reflection_;
  delete RequestResourceCommand::default_instance_;
  delete RequestResourceCommand_reflection_;
  delete ResourceItemInfo::default_instance_;
  delete ResourceItemInfo_reflection_;
  delete ResponseResourceCommand::default_instance_;
  delete ResponseResourceCommand_reflection_;
  delete RequestTrackCommand::default_instance_;
  delete RequestTrackCommand_reflection_;
  delete ResponseTrackCommand::default_instance_;
  delete ResponseTrackCommand_reflection_;
  delete RequestUserInfoCommand::default_instance_;
  delete RequestUserInfoCommand_reflection_;
  delete ResponseWeiboShareLocksCommand::default_instance_;
  delete ResponseWeiboShareLocksCommand_reflection_;
  delete UserWeiboInfo::default_instance_;
  delete UserWeiboInfo_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete RequestModifyUserInfoCommand::default_instance_;
  delete RequestModifyUserInfoCommand_reflection_;
  delete ResponseModifyUserInfoCommand::default_instance_;
  delete ResponseModifyUserInfoCommand_reflection_;
  delete ResponseUserInfoCommand::default_instance_;
  delete ResponseUserInfoCommand_reflection_;
  delete GhostInfo::default_instance_;
  delete GhostInfo_reflection_;
  delete RacerInfo::default_instance_;
  delete RacerInfo_reflection_;
  delete RequestModeInfoCommand::default_instance_;
  delete RequestModeInfoCommand_reflection_;
  delete ResponseRacerForGhostCommand::default_instance_;
  delete ResponseRacerForGhostCommand_reflection_;
  delete ResponseModeInfoCommand::default_instance_;
  delete ResponseModeInfoCommand_reflection_;
  delete RequestRaceResultCommand::default_instance_;
  delete RequestRaceResultCommand_reflection_;
  delete RPMessage::default_instance_;
  delete RPMessage_reflection_;
  delete UnlockInfoMessage::default_instance_;
  delete UnlockInfoMessage_reflection_;
  delete ResponseRaceResultCommand::default_instance_;
  delete ResponseRaceResultCommand_reflection_;
  delete ResponseTournamentRaceResultCommand::default_instance_;
  delete ResponseTournamentRaceResultCommand_reflection_;
  delete TournamentMessage::default_instance_;
  delete TournamentMessage_reflection_;
  delete TournamentRankingListMessage::default_instance_;
  delete TournamentRankingListMessage_reflection_;
  delete TournamentRewardListMessage::default_instance_;
  delete TournamentRewardListMessage_reflection_;
  delete TournamentRewardDetailMessage::default_instance_;
  delete TournamentRewardDetailMessage_reflection_;
  delete TournamentDetailMessage::default_instance_;
  delete TournamentDetailMessage_reflection_;
  delete TournamentDetailRewardMessage::default_instance_;
  delete TournamentDetailRewardMessage_reflection_;
  delete RequestTournamentCommand::default_instance_;
  delete RequestTournamentCommand_reflection_;
  delete ResponseTournamentCommand::default_instance_;
  delete ResponseTournamentCommand_reflection_;
  delete RequestTournamentRewardDetailCommand::default_instance_;
  delete RequestTournamentRewardDetailCommand_reflection_;
  delete ResponseTournamentRewardDetailCommand::default_instance_;
  delete ResponseTournamentRewardDetailCommand_reflection_;
  delete responseTournamentRewardCommand::default_instance_;
  delete responseTournamentRewardCommand_reflection_;
  delete RequestTournamentSignUpCommand::default_instance_;
  delete RequestTournamentSignUpCommand_reflection_;
  delete ResponseTournamentSignUpCommand::default_instance_;
  delete ResponseTournamentSignUpCommand_reflection_;
  delete RequestTournamentDetailCommand::default_instance_;
  delete RequestTournamentDetailCommand_reflection_;
  delete ResponseTournamentDetailCommand::default_instance_;
  delete ResponseTournamentDetailCommand_reflection_;
  delete RequestGetRewardCommand::default_instance_;
  delete RequestGetRewardCommand_reflection_;
  delete ResponseGetRewardCommand::default_instance_;
  delete ResponseGetRewardCommand_reflection_;
  delete HeadInfo::default_instance_;
  delete HeadInfo_reflection_;
  delete RequestRaceStartCommand::default_instance_;
  delete RequestRaceStartCommand_reflection_;
  delete ResponseRaceStartCommand::default_instance_;
  delete ResponseRaceStartCommand_reflection_;
  delete ResponseTournamentRaceStartCommand::default_instance_;
  delete ResponseTournamentRaceStartCommand_reflection_;
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete RequestBindingStartCommand::default_instance_;
  delete RequestBindingStartCommand_reflection_;
  delete ResponseBindingStartCommand::default_instance_;
  delete ResponseBindingStartCommand_reflection_;
  delete RequestBindingTokenCommand::default_instance_;
  delete RequestBindingTokenCommand_reflection_;
  delete ResponseBindingTokenCommand::default_instance_;
  delete ResponseBindingTokenCommand_reflection_;
  delete RequestBindingInfoCommand::default_instance_;
  delete RequestBindingInfoCommand_reflection_;
  delete ResponseBindingInfoCommand::default_instance_;
  delete ResponseBindingInfoCommand_reflection_;
  delete RequestBindingResultCommand::default_instance_;
  delete RequestBindingResultCommand_reflection_;
  delete ResponseBindingResultCommand::default_instance_;
  delete ResponseBindingResultCommand_reflection_;
  delete RequestBindingConfirmCommand::default_instance_;
  delete RequestBindingConfirmCommand_reflection_;
  delete ResponseBindingConfirmCommand::default_instance_;
  delete ResponseBindingConfirmCommand_reflection_;
  delete ResponseBindingPopupCommand::default_instance_;
  delete ResponseBindingPopupCommand_reflection_;
  delete ErrorCommand::default_instance_;
  delete ErrorCommand_reflection_;
  delete CarData::default_instance_;
  delete CarData_reflection_;
  delete GotchaExpense::default_instance_;
  delete GotchaExpense_reflection_;
  delete ChartletInfo::default_instance_;
  delete ChartletInfo_reflection_;
  delete CarSlotInfo::default_instance_;
  delete CarSlotInfo_reflection_;
  delete ConsumableData::default_instance_;
  delete ConsumableData_reflection_;
  delete RequestGarageCommand::default_instance_;
  delete RequestGarageCommand_reflection_;
  delete ResponseGarageCommand::default_instance_;
  delete ResponseGarageCommand_reflection_;
  delete RequestBuyCarCommand::default_instance_;
  delete RequestBuyCarCommand_reflection_;
  delete ResponseBuyCarCommand::default_instance_;
  delete ResponseBuyCarCommand_reflection_;
  delete RequestCarDataCommand::default_instance_;
  delete RequestCarDataCommand_reflection_;
  delete ResponseCarDataCommand::default_instance_;
  delete ResponseCarDataCommand_reflection_;
  delete RequestUpgradeSlotCommand::default_instance_;
  delete RequestUpgradeSlotCommand_reflection_;
  delete ResponseUpgradeSlotCommand::default_instance_;
  delete ResponseUpgradeSlotCommand_reflection_;
  delete RequestUseChartletCommand::default_instance_;
  delete RequestUseChartletCommand_reflection_;
  delete ResponseUseChartletCommand::default_instance_;
  delete ResponseUseChartletCommand_reflection_;
  delete RequestChallengeMathInfoCommand::default_instance_;
  delete RequestChallengeMathInfoCommand_reflection_;
  delete ResponseChallengeMatchInfoCommand::default_instance_;
  delete ResponseChallengeMatchInfoCommand_reflection_;
  delete ResponseFeedCommand::default_instance_;
  delete ResponseFeedCommand_reflection_;
  delete ItemMessage::default_instance_;
  delete ItemMessage_reflection_;
  delete RequestStoreDetailCommand::default_instance_;
  delete RequestStoreDetailCommand_reflection_;
  delete ResponseStoreDetailCommand::default_instance_;
  delete ResponseStoreDetailCommand_reflection_;
  delete RequestBuyItemCommand::default_instance_;
  delete RequestBuyItemCommand_reflection_;
  delete ResponseBuyItemCommand::default_instance_;
  delete ResponseBuyItemCommand_reflection_;
  delete RequestSystemCommand::default_instance_;
  delete RequestSystemCommand_reflection_;
  delete ResponseSystemCommand::default_instance_;
  delete ResponseSystemCommand_reflection_;
  delete EventOptionMessage::default_instance_;
  delete EventOptionMessage_reflection_;
  delete CashRewardMessage::default_instance_;
  delete CashRewardMessage_reflection_;
  delete MedalPositionMessage::default_instance_;
  delete MedalPositionMessage_reflection_;
  delete MedalScoreMessage::default_instance_;
  delete MedalScoreMessage_reflection_;
  delete MedalTimeMessage::default_instance_;
  delete MedalTimeMessage_reflection_;
  delete CountdownInitialTimeMessage::default_instance_;
  delete CountdownInitialTimeMessage_reflection_;
  delete PenaltyTimeMessage::default_instance_;
  delete PenaltyTimeMessage_reflection_;
  delete OpponentCollectionMessage::default_instance_;
  delete OpponentCollectionMessage_reflection_;
  delete OpponentMessage::default_instance_;
  delete OpponentMessage_reflection_;
  delete AiSettingsMessage::default_instance_;
  delete AiSettingsMessage_reflection_;
  delete RaceEventMessage::default_instance_;
  delete RaceEventMessage_reflection_;
  delete TrafficFlowMessage::default_instance_;
  delete TrafficFlowMessage_reflection_;
  delete RaceTrafficCongestionMessage::default_instance_;
  delete RaceTrafficCongestionMessage_reflection_;
  delete TrafficCarSpawnDescsMessage::default_instance_;
  delete TrafficCarSpawnDescsMessage_reflection_;
  delete RequestRegistJaguarCommand::default_instance_;
  delete RequestRegistJaguarCommand_reflection_;
  delete ResponseRegistJaguarCommand::default_instance_;
  delete ResponseRegistJaguarCommand_reflection_;
  delete RequestRpLeaderboardCommand::default_instance_;
  delete RequestRpLeaderboardCommand_reflection_;
  delete ResponseRpLeaderboardCommand::default_instance_;
  delete ResponseRpLeaderboardCommand_reflection_;
  delete RpLeaderboardMessage::default_instance_;
  delete RpLeaderboardMessage_reflection_;
  delete ProfileCarInfo::default_instance_;
  delete ProfileCarInfo_reflection_;
  delete RequestProfileUserDataCommand::default_instance_;
  delete RequestProfileUserDataCommand_reflection_;
  delete ResponseProfileUserDataCommand::default_instance_;
  delete ResponseProfileUserDataCommand_reflection_;
  delete RequestProfileNextCarCommand::default_instance_;
  delete RequestProfileNextCarCommand_reflection_;
  delete ResponseProfileNextCarCommand::default_instance_;
  delete ResponseProfileNextCarCommand_reflection_;
  delete RequestProfileLikeCommand::default_instance_;
  delete RequestProfileLikeCommand_reflection_;
  delete ResponseProfileLikeCommand::default_instance_;
  delete ResponseProfileLikeCommand_reflection_;
  delete RequestProfileReportCommand::default_instance_;
  delete RequestProfileReportCommand_reflection_;
  delete ResponseProfileReportCommand::default_instance_;
  delete ResponseProfileReportCommand_reflection_;
  delete UserVSProfile::default_instance_;
  delete UserVSProfile_reflection_;
  delete RequestProfileVSCommand::default_instance_;
  delete RequestProfileVSCommand_reflection_;
  delete ResponseProfileVSCommand::default_instance_;
  delete ResponseProfileVSCommand_reflection_;
  delete RequestRecordUserRaceActionCommand::default_instance_;
  delete RequestRecordUserRaceActionCommand_reflection_;
  delete RequestQuickRaceCommand::default_instance_;
  delete RequestQuickRaceCommand_reflection_;
  delete ResponseQuickRaceCommand::default_instance_;
  delete ResponseQuickRaceCommand_reflection_;
  delete ResponseNotificationCommand::default_instance_;
  delete ResponseNotificationCommand_reflection_;
  delete RequestGhostRecordCommand::default_instance_;
  delete RequestGhostRecordCommand_reflection_;
  delete ResponseGhostRecordCommand::default_instance_;
  delete ResponseGhostRecordCommand_reflection_;
  delete RequestIapCheckCommand::default_instance_;
  delete RequestIapCheckCommand_reflection_;
  delete ResponseIapCheckCommand::default_instance_;
  delete ResponseIapCheckCommand_reflection_;
  delete ResponseTournamentNotificationCommand::default_instance_;
  delete ResponseTournamentNotificationCommand_reflection_;
  delete RequestTutorialRewardCommand::default_instance_;
  delete RequestTutorialRewardCommand_reflection_;
  delete ResponseTutorialRewardCommand::default_instance_;
  delete ResponseTutorialRewardCommand_reflection_;
  delete ResponsePopupCommand::default_instance_;
  delete ResponsePopupCommand_reflection_;
  delete ResponsePopupListCommand::default_instance_;
  delete ResponsePopupListCommand_reflection_;
  delete ResponseTournamentRewardNumCommand::default_instance_;
  delete ResponseTournamentRewardNumCommand_reflection_;
  delete RequestGotchaCommand::default_instance_;
  delete RequestGotchaCommand_reflection_;
  delete ResponseGotchaCommand::default_instance_;
  delete ResponseGotchaCommand_reflection_;
  delete GotchaItemInfo::default_instance_;
  delete GotchaItemInfo_reflection_;
  delete RequestCheatInfoCommand::default_instance_;
  delete RequestCheatInfoCommand_reflection_;
  delete LeaderboardClass::default_instance_;
  delete LeaderboardClass_reflection_;
  delete LeaderboardItem::default_instance_;
  delete LeaderboardItem_reflection_;
  delete RequestLeaderboardClass::default_instance_;
  delete RequestLeaderboardClass_reflection_;
  delete ResponseLeaderboardClass::default_instance_;
  delete ResponseLeaderboardClass_reflection_;
  delete LeaderboardHeadInfo::default_instance_;
  delete LeaderboardHeadInfo_reflection_;
  delete RequestLeaderboard::default_instance_;
  delete RequestLeaderboard_reflection_;
  delete ResponseLeaderboard::default_instance_;
  delete ResponseLeaderboard_reflection_;
  delete RequestTournamentNum::default_instance_;
  delete RequestTournamentNum_reflection_;
  delete ResponseTournamentNum::default_instance_;
  delete ResponseTournamentNum_reflection_;
  delete RequestCollectEnergyCommand::default_instance_;
  delete RequestCollectEnergyCommand_reflection_;
  delete RequestEnergyTimeCommand::default_instance_;
  delete RequestEnergyTimeCommand_reflection_;
  delete ResponseEnergyTimeCommand::default_instance_;
  delete ResponseEnergyTimeCommand_reflection_;
  delete RequestFansRewardCommand::default_instance_;
  delete RequestFansRewardCommand_reflection_;
  delete ResponseFansRewardTimeCommand::default_instance_;
  delete ResponseFansRewardTimeCommand_reflection_;
  delete RequestPropPurchaseCommand::default_instance_;
  delete RequestPropPurchaseCommand_reflection_;
  delete RequestMissionRewardCommand::default_instance_;
  delete RequestMissionRewardCommand_reflection_;
  delete RequestMissionFinishCommand::default_instance_;
  delete RequestMissionFinishCommand_reflection_;
  delete ResponseMissionListCommand::default_instance_;
  delete ResponseMissionListCommand_reflection_;
  delete RequestLotteryCommand::default_instance_;
  delete RequestLotteryCommand_reflection_;
  delete ResponseLotteryCommand::default_instance_;
  delete ResponseLotteryCommand_reflection_;
  delete RequestFleetRaceCommand::default_instance_;
  delete RequestFleetRaceCommand_reflection_;
  delete ResponseFleetRaceCommand::default_instance_;
  delete ResponseFleetRaceCommand_reflection_;
  delete RequestFleetStartCommand::default_instance_;
  delete RequestFleetStartCommand_reflection_;
  delete ResponseFleetStartCommand::default_instance_;
  delete ResponseFleetStartCommand_reflection_;
  delete RequestFleetEndCommand::default_instance_;
  delete RequestFleetEndCommand_reflection_;
  delete ResponseFleetEndCommand::default_instance_;
  delete ResponseFleetEndCommand_reflection_;
  delete RequestFleetDoubleCommand::default_instance_;
  delete RequestFleetDoubleCommand_reflection_;
  delete ResponseFleetDoubleCommand::default_instance_;
  delete ResponseFleetDoubleCommand_reflection_;
  delete RequestFixCarLimitCommand::default_instance_;
  delete RequestFixCarLimitCommand_reflection_;
  delete ResponseFixCarLimitCommand::default_instance_;
  delete ResponseFixCarLimitCommand_reflection_;
  delete RequestCommand::default_instance_;
  delete RequestCommand_reflection_;
  delete ResponseCommand::default_instance_;
  delete ResponseCommand_reflection_;
  delete LocalUserinfo::default_instance_;
  delete LocalUserinfo_reflection_;
}

void protobuf_AddDesc_Commands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Commands.proto\022\034com.ea.eamobile.nfsmw."
    "protoc\"\271\001\n\014UserViewInfo\022\016\n\006userId\030\001 \002(\003\022"
    "\017\n\007headUrl\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\r\n\005email\030"
    "\004 \002(\t\022\016\n\006mobile\030\005 \002(\t\022\016\n\006status\030\006 \002(\005\022\r\n"
    "\005money\030\007 \002(\005\022\022\n\ncreateTime\030\010 \002(\003\022\021\n\tlogi"
    "nTime\030\t \002(\003\022\025\n\risNameChanged\030\n \001(\010\"I\n\013Mi"
    "ssionInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003d"
    "es\030\003 \001(\t\022\023\n\013rewardCount\030\004 \003(\005\"w\n\006Reward\022"
    "\013\n\003rmb\030\001 \001(\005\022\r\n\005money\030\002 \001(\005\022\r\n\005rpNum\030\003 \001"
    "(\005\022\025\n\rmostwantedNum\030\004 \001(\005\022\023\n\013finishRatio"
    "\030\005 \001(\005\022\026\n\016displayStrings\030\006 \001(\t\"$\n\007Reward"
    "N\022\n\n\002id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\"D\n\nRewardLi"
    "st\0226\n\007rewards\030\001 \003(\0132%.com.ea.eamobile.nf"
    "smw.protoc.RewardN\"!\n\004Prop\022\n\n\002id\030\001 \001(\005\022\r"
    "\n\005count\030\002 \001(\005\"\223\002\n\tFleetRace\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004type\030\002 \002(\005\022\014\n\004name\030\003 \002(\005\022\r\n\005carid\030\004 \002"
    "(\t\022\014\n\004time\030\005 \002(\005\022\016\n\006points\030\006 \002(\005\022\021\n\tlimi"
    "tCost\030\007 \002(\005\022\022\n\nenergyCost\030\010 \002(\005\0229\n\007rewar"
    "ds\030\t \003(\0132(.com.ea.eamobile.nfsmw.protoc."
    "RewardList\022\r\n\005count\030\n \002(\005\022\r\n\005state\030\013 \002(\005"
    "\022\014\n\004tier\030\014 \002(\005\022\017\n\007cartype\030\r \002(\005\022\022\n\nramai"
    "nTime\030\016 \002(\005\"\203\001\n\013Leaderboard\022\014\n\004name\030\001 \002("
    "\t\022\022\n\nraceResult\030\002 \002(\002\022\021\n\theadIndex\030\003 \001(\005"
    "\022\017\n\007headUrl\030\004 \001(\t\022\014\n\004rank\030\005 \001(\005\022\020\n\010isMys"
    "elf\030\006 \001(\010\022\016\n\006userId\030\007 \001(\003\"\222\002\n\022Leaderboar"
    "dProfile\022\014\n\004name\030\001 \002(\t\022\022\n\nraceResult\030\002 \002"
    "(\002\022\021\n\theadIndex\030\003 \001(\005\022\017\n\007headUrl\030\004 \001(\t\022\014"
    "\n\004rank\030\005 \001(\005\022\020\n\010isMyself\030\006 \001(\010\022\r\n\005carID\030"
    "\007 \001(\t\022\025\n\rcarColorIndex\030\010 \001(\005\022\022\n\ncarModTy"
    "pe\030\t \003(\005\022\023\n\013carModValue\030\n \003(\002\022\020\n\010carScor"
    "e\030\013 \001(\005\022\020\n\010carModId\030\014 \003(\005\022\023\n\013carModLevel"
    "\030\r \003(\005\022\016\n\006userid\030\016 \001(\003\"\314\002\n\010ModeInfo\022\016\n\006m"
    "odeId\030\001 \002(\005\022\020\n\010modeName\030\002 \002(\t\022\020\n\010modeTyp"
    "e\030\003 \002(\005\022\023\n\013finishRatio\030\004 \002(\005\022\025\n\rmostwant"
    "edNum\030\005 \002(\005\022\r\n\005isNew\030\006 \002(\010\022>\n\013leaderboar"
    "d\030\007 \003(\0132).com.ea.eamobile.nfsmw.protoc.L"
    "eaderboard\022\026\n\016realTrackIndex\030\010 \001(\005\022\022\n\nen"
    "ergyCost\030\t \001(\005\022\035\n\025carLimitDisplayString\030"
    "\n \001(\t\022F\n\014leaderboard2\030\013 \003(\01320.com.ea.eam"
    "obile.nfsmw.protoc.LeaderboardProfile\"\336\002"
    "\n\tTrackInfo\022\017\n\007trackId\030\001 \002(\t\022\023\n\013finishRa"
    "tio\030\002 \002(\005\022\020\n\010carTypes\030\003 \003(\005\022\022\n\ndifficult"
    "y\030\004 \002(\005\022\016\n\006unlock\030\005 \002(\010\022\031\n\021userMostwante"
    "dNum\030\006 \001(\005\022\r\n\005isNew\030\007 \001(\010\0225\n\005modes\030\010 \003(\013"
    "2&.com.ea.eamobile.nfsmw.protoc.ModeInfo"
    "\022\021\n\ttrackName\030\t \002(\t\022\031\n\021carTypeForDisplay"
    "\030\n \001(\t\022\032\n\022trackStatusUpdated\030\013 \001(\010\0224\n\006re"
    "ward\030\014 \001(\0132$.com.ea.eamobile.nfsmw.proto"
    "c.Reward\022\024\n\014isHasNewMode\030\r \001(\010\"\344\001\n\016Check"
    "PointInfo\022\016\n\006modeId\030\001 \002(\005\022\016\n\006status\030\002 \002("
    "\005\022\033\n\023unlockMostwantedNum\030\003 \002(\005\022\021\n\teventN"
    "ame\030\004 \002(\t\022\030\n\020acceptableCarIDs\030\005 \003(\t\022\035\n\025c"
    "arLimitDisplayString\030\006 \002(\t\022\023\n\013staminaCos"
    "t\030\007 \002(\005\0224\n\006reward\030\010 \002(\0132$.com.ea.eamobil"
    "e.nfsmw.protoc.Reward\"7\n\023NewbieTierCheck"
    "List\022\014\n\004text\030\001 \002(\t\022\022\n\nisFinished\030\002 \002(\010\"\201"
    "\001\n\010TierInfo\022\021\n\ttierIndex\030\001 \002(\005\022\022\n\ntierAm"
    "ount\030\002 \002(\005\022N\n\023newbieTierCheckList\030\003 \003(\0132"
    "1.com.ea.eamobile.nfsmw.protoc.NewbieTie"
    "rCheckList\"\225\001\n\007GPSInfo\022\020\n\010latitude\030\001 \002(\001"
    "\022\021\n\tlongitude\030\002 \002(\001\022\017\n\007country\030\003 \002(\t\022\020\n\010"
    "locality\030\004 \002(\t\022\023\n\013subLocality\030\005 \002(\t\022\024\n\014t"
    "horoughfare\030\006 \002(\t\022\027\n\017subThoroughfare\030\007 \002"
    "(\t\"/\n\026RequestResourceCommand\022\025\n\rclientVe"
    "rsion\030\001 \002(\005\"\\\n\020ResourceItemInfo\022\014\n\004path\030"
    "\001 \002(\t\022\014\n\004size\030\002 \002(\005\022\013\n\003md5\030\003 \002(\t\022\016\n\006acti"
    "on\030\004 \002(\005\022\017\n\007version\030\005 \001(\005\"{\n\027ResponseRes"
    "ourceCommand\022\020\n\010rootPath\030\001 \002(\t\022\017\n\007versio"
    "n\030\002 \002(\005\022=\n\005items\030\003 \003(\0132..com.ea.eamobile"
    ".nfsmw.protoc.ResourceItemInfo\"*\n\023Reques"
    "tTrackCommand\022\023\n\013requestTier\030\002 \002(\005\"\313\001\n\024R"
    "esponseTrackCommand\0224\n\004tier\030\001 \001(\0132&.com."
    "ea.eamobile.nfsmw.protoc.TierInfo\0227\n\006tra"
    "cks\030\002 \003(\0132\'.com.ea.eamobile.nfsmw.protoc"
    ".TrackInfo\022D\n\016checkPointInfo\030\003 \001(\0132,.com"
    ".ea.eamobile.nfsmw.protoc.CheckPointInfo"
    "\"\217\001\n\026RequestUserInfoCommand\022\013\n\003mac\030\001 \002(\t"
    "\022\022\n\ndeviceName\030\002 \001(\t\022\r\n\005token\030\003 \002(\t\0226\n\007g"
    "psInfo\030\004 \001(\0132%.com.ea.eamobile.nfsmw.pro"
    "toc.GPSInfo\022\r\n\005isOld\030\005 \001(\010\"\304\002\n\036ResponseW"
    "eiboShareLocksCommand\022\035\n\025isRaceRewardSha"
    "reOpen\030\001 \002(\010\022\"\n\032isTrackUnlockInfoShareOp"
    "en\030\002 \002(\010\022 \n\030isCarUnlockInfoShareOpen\030\003 \002"
    "(\010\022\034\n\024isSpeedWallShareOpen\030\004 \002(\010\022\037\n\027isBi"
    "ndingWeiboShareOpen\030\005 \002(\010\022#\n\033isTournamen"
    "tRewardShareOpen\030\006 \002(\010\022\031\n\021isBuyCarShareO"
    "pen\030\007 \002(\010\022#\n\033isUpdateConsumableShareOpen"
    "\030\010 \002(\010\022\031\n\021isJaguarShareOpen\030\t \001(\010\"2\n\rUse"
    "rWeiboInfo\022\024\n\014access_token\030\001 \002(\t\022\013\n\003uid\030"
    "\002 \002(\t\"\347\006\n\010UserInfo\022\020\n\010nickname\030\001 \002(\t\022\017\n\007"
    "headUrl\030\002 \002(\t\022\021\n\theadIndex\030\003 \002(\005\022\014\n\004tier"
    "\030\004 \002(\005\022\017\n\007rpLevel\030\005 \002(\005\022\r\n\005rpExp\030\006 \002(\005\022\025"
    "\n\rmostwantedNum\030\007 \002(\005\022\020\n\010currency\030\010 \002(\005\022"
    "\013\n\003rmb\030\t \002(\005\022\016\n\006energy\030\n \002(\005\022\?\n\014accountI"
    "nfos\030\013 \003(\0132).com.ea.eamobile.nfsmw.proto"
    "c.AccountInfo\022\016\n\006expMax\030\014 \001(\005\022\016\n\006expMin\030"
    "\r \001(\005\022\031\n\021finishedFirstRace\030\016 \001(\010\022>\n\tweib"
    "oInfo\030\017 \001(\0132+.com.ea.eamobile.nfsmw.prot"
    "oc.UserWeiboInfo\022\035\n\025tutorialRewardIsGive"
    "n\030\020 \001(\010\022:\n\trpMessage\030\021 \001(\0132\'.com.ea.eamo"
    "bile.nfsmw.protoc.RPMessage\022\025\n\risNameCha"
    "nged\030\022 \001(\010\022\024\n\014access_token\030\023 \001(\t\022\013\n\003uid\030"
    "\024 \001(\t\022\022\n\nenergytime\030\025 \001(\005\0223\n\007propnum\030\026 \003"
    "(\0132\".com.ea.eamobile.nfsmw.protoc.Prop\022\025"
    "\n\rpackageStatus\030\027 \001(\005\022\017\n\007isNoble\030\030 \001(\010\022\025"
    "\n\rleftNobleTime\030\031 \001(\005\022\024\n\014leftGoldTime\030\032 "
    "\001(\005\022\026\n\016isGoldUnlocked\030\033 \001(\010\022\030\n\020fansRewar"
    "dStatus\030\034 \001(\005\022\032\n\022fansRewardLastTime\030\035 \001("
    "\005\022\033\n\023missionRewardStatus\030\036 \001(\005\022\033\n\023missio"
    "nFinishStatus\030\037 \001(\005\022\021\n\traceTimes\030  \001(\005\022\021"
    "\n\tisNewUser\030! \001(\010\022\024\n\014lotteryTimes\030\" \001(\005\""
    "C\n\034RequestModifyUserInfoCommand\022\021\n\theadI"
    "ndex\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\"\225\001\n\035Respons"
    "eModifyUserInfoCommand\022:\n\006result\030\001 \001(\0132*"
    ".com.ea.eamobile.nfsmw.protoc.ErrorComma"
    "nd\0228\n\010userinfo\030\002 \001(\0132&.com.ea.eamobile.n"
    "fsmw.protoc.UserInfo\"w\n\027ResponseUserInfo"
    "Command\0228\n\010userInfo\030\001 \002(\0132&.com.ea.eamob"
    "ile.nfsmw.protoc.UserInfo\022\r\n\005token\030\002 \002(\t"
    "\022\023\n\013defaultHint\030\003 \001(\t\"\356\002\n\tGhostInfo\022\017\n\007s"
    "uccess\030\001 \002(\010\022\020\n\010raceTime\030\002 \002(\002\022\022\n\naverag"
    "eSpd\030\003 \002(\002\022\020\n\010position\030\004 \002(\005\022\016\n\006modeId\030\005"
    " \002(\005\022\025\n\rraceEventName\030\006 \002(\t\022\r\n\005carID\030\007 \002"
    "(\t\022\025\n\rcarColorIndex\030\010 \002(\005\022\022\n\ncarModType\030"
    "\t \003(\005\022\023\n\013carModValue\030\n \003(\002\022\020\n\010carScore\030\013"
    " \001(\005\022\020\n\010carModId\030\014 \003(\005\022\023\n\013carModLevel\030\r "
    "\003(\005\022\027\n\017raceResultState\030\016 \001(\005\022\025\n\rcarPrefa"
    "bFile\030\017 \001(\t\022\021\n\tcarTopSpd\030\020 \001(\005\022\021\n\tcarMid"
    "Spd\030\021 \001(\005\022\023\n\013trackLength\030\022 \001(\002\"\203\001\n\tRacer"
    "Info\022\014\n\004name\030\001 \002(\t\022\021\n\theadIndex\030\002 \002(\005\022\017\n"
    "\007headUrl\030\003 \001(\t\0226\n\005ghost\030\004 \002(\0132\'.com.ea.e"
    "amobile.nfsmw.protoc.GhostInfo\022\014\n\004rpLv\030\005"
    " \001(\005\"L\n\026RequestModeInfoCommand\022\020\n\010gameMo"
    "de\030\001 \002(\005\022\016\n\006modeId\030\002 \002(\005\022\020\n\010raceType\030\003 \002"
    "(\005\"o\n\034ResponseRacerForGhostCommand\0227\n\006ra"
    "cers\030\001 \003(\0132\'.com.ea.eamobile.nfsmw.proto"
    "c.RacerInfo\022\026\n\016ghostAvergeEol\030\002 \001(\005\"\276\003\n\027"
    "ResponseModeInfoCommand\022\022\n\nenergyCost\030\001 "
    "\002(\005\0224\n\006reward\030\002 \002(\0132$.com.ea.eamobile.nf"
    "smw.protoc.Reward\022\035\n\025carLimitDisplayStri"
    "ng\030\003 \002(\t\022\030\n\020acceptableCarIDs\030\004 \003(\t\022\024\n\014pe"
    "rsonalRank\030\005 \001(\005\022\025\n\rcurrentEnergy\030\006 \001(\005\022"
    "\030\n\020personalBestTime\030\007 \001(\002\022D\n\021friendLeade"
    "rboard\030\010 \003(\0132).com.ea.eamobile.nfsmw.pro"
    "toc.Leaderboard\0225\n\007rewards\030\t \003(\0132$.com.e"
    "a.eamobile.nfsmw.protoc.Reward\022L\n\022friend"
    "Leaderboard2\030\n \003(\01320.com.ea.eamobile.nfs"
    "mw.protoc.LeaderboardProfile\022\016\n\006userId\030\013"
    " \001(\003\"\363\001\n\030RequestRaceResultCommand\022\020\n\010gam"
    "eMode\030\001 \002(\005\022\017\n\007trackId\030\002 \002(\t\022\016\n\006modeId\030\003"
    " \002(\005\022\014\n\004rank\030\004 \002(\005\0227\n\006ghosts\030\005 \002(\0132\'.com"
    ".ea.eamobile.nfsmw.protoc.GhostInfo\022\020\n\010r"
    "aceType\030\006 \002(\005\022\026\n\016ghostAvergeEol\030\007 \001(\005\0223\n"
    "\007propnum\030\010 \003(\0132\".com.ea.eamobile.nfsmw.p"
    "rotoc.Prop\"\203\001\n\tRPMessage\022\r\n\005level\030\001 \002(\005\022"
    "\020\n\010iconname\030\002 \001(\t\022\r\n\005title\030\003 \002(\t\022\022\n\nperc"
    "entage\030\004 \001(\002\022\022\n\ncurrentExp\030\005 \001(\005\022\016\n\006minE"
    "xp\030\006 \001(\005\022\016\n\006maxExp\030\007 \001(\005\"o\n\021UnlockInfoMe"
    "ssage\022\024\n\014tierUnlocked\030\001 \001(\005\022\027\n\017isTrackUn"
    "locked\030\002 \001(\010\022\026\n\016isModeUnlocked\030\003 \001(\010\022\023\n\013"
    "unlockedCar\030\004 \003(\t\"\333\004\n\031ResponseRaceResult"
    "Command\022\030\n\020trackFinishRatio\030\001 \002(\005\022\027\n\017mod"
    "eFinishRatio\030\002 \002(\005\022\031\n\021gainMostWantedNum\030"
    "\003 \002(\005\022\024\n\014unlockTracks\030\004 \003(\t\022\023\n\013unlockMod"
    "es\030\005 \003(\005\0225\n\007rewards\030\006 \001(\0132$.com.ea.eamob"
    "ile.nfsmw.protoc.Reward\022\023\n\013isNewRecord\030\007"
    " \001(\010\022\017\n\007newRank\030\010 \001(\005\022>\n\013leaderBoard\030\t \003"
    "(\0132).com.ea.eamobile.nfsmw.protoc.Leader"
    "board\0224\n\004tier\030\n \001(\0132&.com.ea.eamobile.nf"
    "smw.protoc.TierInfo\022\030\n\020personalBestTime\030"
    "\013 \001(\002\022\020\n\010bestRank\030\014 \001(\005\022;\n\nrpmessages\030\r "
    "\003(\0132\'.com.ea.eamobile.nfsmw.protoc.RPMes"
    "sage\022C\n\nunlockInfo\030\016 \001(\0132/.com.ea.eamobi"
    "le.nfsmw.protoc.UnlockInfoMessage\022D\n\021fri"
    "endLeaderboard\030\017 \003(\0132).com.ea.eamobile.n"
    "fsmw.protoc.Leaderboard\"\363\003\n#ResponseTour"
    "namentRaceResultCommand\0225\n\007rewards\030\006 \001(\013"
    "2$.com.ea.eamobile.nfsmw.protoc.Reward\022;"
    "\n\nrpmessages\030\r \003(\0132\'.com.ea.eamobile.nfs"
    "mw.protoc.RPMessage\022\034\n\024tournamentRemainT"
    "ime\030\017 \001(\002\022\033\n\023tournamentLeftTimes\030\020 \001(\005\0228"
    "\n\005board\030\021 \003(\0132).com.ea.eamobile.nfsmw.pr"
    "otoc.Leaderboard\022\020\n\010selfRank\030\022 \002(\005\022\020\n\010se"
    "lfName\030\023 \002(\t\022\026\n\016selfRaceResult\030\024 \002(\002\022\016\n\006"
    "upRank\030\025 \001(\005\022\023\n\013isNewRecode\030\026 \001(\010\022D\n\021fri"
    "endLeaderboard\030\027 \003(\0132).com.ea.eamobile.n"
    "fsmw.protoc.Leaderboard\022\032\n\022tournamentOnl"
    "ineId\030\030 \001(\005\022 \n\030isTournamentOnlineFinish\030"
    "\031 \001(\010\"\223\004\n\021TournamentMessage\022\014\n\004type\030\001 \002("
    "\005\022\014\n\004name\030\002 \002(\t\022\021\n\tstartTime\030\003 \001(\003\022\022\n\nre"
    "mainTime\030\004 \001(\003\022\022\n\nsignUpType\030\005 \001(\005\022\016\n\006si"
    "gnUp\030\006 \001(\005\022L\n\010rankList\030\007 \003(\0132:.com.ea.ea"
    "mobile.nfsmw.protoc.TournamentRankingLis"
    "tMessage\022\030\n\020rankingHighLight\030\r \001(\005\022M\n\nre"
    "wardList\030\016 \003(\01329.com.ea.eamobile.nfsmw.p"
    "rotoc.TournamentRewardListMessage\022\021\n\tlef"
    "tTimes\030\021 \001(\005\022\n\n\002id\030\022 \002(\t\022\016\n\006energy\030\026 \002(\005"
    "\022\020\n\010onlineId\030\027 \002(\005\022\017\n\007eventId\030\030 \002(\005\022\023\n\013s"
    "ignUpPrice\030\031 \001(\005\022\033\n\023backgroundPictureId\030"
    "\032 \001(\t\022\014\n\004adId\030\033 \001(\005\022\032\n\022isAlreadyGetRewar"
    "d\030\034 \001(\010\022\027\n\017tournamentGroup\030\035 \001(\t\022\031\n\021tour"
    "namentCarName\030\036 \001(\t\":\n\034TournamentRanking"
    "ListMessage\022\014\n\004rank\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\""
    "8\n\033TournamentRewardListMessage\022\013\n\003num\030\001 "
    "\002(\t\022\014\n\004name\030\002 \002(\t\"\226\001\n\035TournamentRewardDe"
    "tailMessage\022\014\n\004rank\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022"
    "\020\n\010raceTime\030\003 \002(\002\022\016\n\006reward\030\004 \002(\t\022\021\n\thea"
    "dIndex\030\005 \002(\005\022\017\n\007headUrl\030\006 \001(\t\022\023\n\013display"
    "Name\030\007 \001(\t\"{\n\027TournamentDetailMessage\022\014\n"
    "\004rank\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\020\n\010raceTime\030\003 "
    "\002(\002\022\021\n\theadIndex\030\004 \002(\005\022\017\n\007headUrl\030\005 \001(\t\022"
    "\016\n\006userId\030\006 \001(\003\"_\n\035TournamentDetailRewar"
    "dMessage\022\r\n\005title\030\001 \002(\t\022\r\n\005money\030\002 \001(\t\022\013"
    "\n\003rmb\030\003 \001(\t\022\023\n\013displayName\030\004 \001(\t\"(\n\030Requ"
    "estTournamentCommand\022\014\n\004type\030\001 \002(\005\"n\n\031Re"
    "sponseTournamentCommand\022C\n\ntournament\030\001 "
    "\003(\0132/.com.ea.eamobile.nfsmw.protoc.Tourn"
    "amentMessage\022\014\n\004type\030\002 \001(\005\"B\n$RequestTou"
    "rnamentRewardDetailCommand\022\032\n\022tournament"
    "OnlineId\030\002 \002(\005\"\340\002\n%ResponseTournamentRew"
    "ardDetailCommand\022Q\n\014rewardDetail\030\001 \003(\0132;"
    ".com.ea.eamobile.nfsmw.protoc.Tournament"
    "RewardDetailMessage\022\020\n\010selfRank\030\002 \001(\005\022\020\n"
    "\010selfName\030\003 \001(\t\022\024\n\014selfRaceTime\030\004 \001(\002\022\022\n"
    "\nselfReward\030\005 \001(\t\022\025\n\rselfHeadIndex\030\006 \001(\005"
    "\022\023\n\013selfHeadUrl\030\007 \001(\t\022\026\n\016tournamentName\030"
    "\010 \002(\t\022\014\n\004info\030\t \001(\t\022D\n\021friendLeaderboard"
    "\030\n \003(\0132).com.ea.eamobile.nfsmw.protoc.Le"
    "aderboard\"\230\001\n\037responseTournamentRewardCo"
    "mmand\022\014\n\004rank\030\001 \002(\005\022\r\n\005money\030\002 \001(\t\022\023\n\013mo"
    "neyIconId\030\003 \001(\005\022\013\n\003rmb\030\004 \001(\t\022\022\n\ngoldIcon"
    "Id\030\005 \001(\005\022\023\n\013displayName\030\006 \001(\t\022\r\n\005isGet\030\007"
    " \001(\010\"<\n\036RequestTournamentSignUpCommand\022\032"
    "\n\022tournamentOnlineId\030\001 \002(\005\"1\n\037ResponseTo"
    "urnamentSignUpCommand\022\016\n\006result\030\001 \002(\005\"N\n"
    "\036RequestTournamentDetailCommand\022\032\n\022tourn"
    "amentOnlineId\030\002 \002(\005\022\020\n\010raceType\030\003 \001(\005\"\324\005"
    "\n\037ResponseTournamentDetailCommand\022O\n\020tou"
    "rnamentDetail\030\001 \003(\01325.com.ea.eamobile.nf"
    "smw.protoc.TournamentDetailMessage\022\020\n\010se"
    "lfRank\030\002 \001(\005\022\020\n\010selfName\030\003 \001(\t\022\024\n\014selfRa"
    "ceTime\030\004 \001(\002\022\025\n\rselfHeadIndex\030\006 \001(\005\022\023\n\013s"
    "elfHeadUrl\030\007 \001(\t\022\035\n\025tournamentSignUpPric"
    "e\030\013 \002(\005\022\027\n\017tournamentGroup\030\014 \002(\t\022\035\n\025tour"
    "namentDescription\030\r \002(\t\022\031\n\021tournamentCar"
    "Name\030\016 \003(\t\022Q\n\014detailReward\030\017 \003(\0132;.com.e"
    "a.eamobile.nfsmw.protoc.TournamentDetail"
    "RewardMessage\022\020\n\010ishasCar\030\020 \002(\005\022\016\n\006carID"
    "s\030\021 \003(\t\022\024\n\014hotRideCarId\030\022 \001(\t\022\027\n\017isNotCo"
    "nsumable\030\023 \001(\010\022\024\n\014weiboContent\030\024 \001(\t\022\014\n\004"
    "hint\030\025 \001(\t\022D\n\021friendLeaderboard\030\026 \003(\0132)."
    "com.ea.eamobile.nfsmw.protoc.Leaderboard"
    "\022\024\n\014startContent\030\027 \001(\t\022\022\n\nendContent\030\030 \001"
    "(\t\022\031\n\021weiboShareContent\030\031 \001(\t\022\032\n\022tournam"
    "entOnlineId\030\032 \001(\005\022\031\n\021tournamentGroupId\030\033"
    " \001(\005\"5\n\027RequestGetRewardCommand\022\032\n\022tourn"
    "amentOnlineId\030\002 \002(\005\"A\n\030ResponseGetReward"
    "Command\022\017\n\007success\030\002 \002(\005\022\024\n\014errorMessage"
    "\030\003 \001(\t\"S\n\010HeadInfo\022\017\n\007version\030\001 \002(\005\022\020\n\010d"
    "atetime\030\002 \002(\003\022\017\n\007session\030\004 \002(\t\022\023\n\013gameVe"
    "rsion\030\005 \002(\005\"\242\001\n\027RequestRaceStartCommand\022"
    "\016\n\006modeId\030\001 \002(\005\022\020\n\010gameMode\030\002 \002(\005\022\020\n\010rac"
    "eType\030\003 \001(\005\022\032\n\022tournamentOnlineId\030\004 \001(\005\022"
    "\022\n\ncarModType\030\005 \003(\005\022\024\n\014carModSlotID\030\006 \003("
    "\005\022\r\n\005carId\030\007 \001(\t\"q\n\030ResponseRaceStartCom"
    "mand\022\020\n\010approved\030\001 \002(\010\022\017\n\007stamina\030\002 \001(\003\022"
    "\016\n\006status\030\003 \001(\005\022\014\n\004hint\030\004 \001(\t\022\024\n\014sampleP"
    "eriod\030\005 \001(\005\"\300\001\n\"ResponseTournamentRaceSt"
    "artCommand\022\021\n\ttrackName\030\001 \002(\t\0224\n\006reward\030"
    "\002 \003(\0132$.com.ea.eamobile.nfsmw.protoc.Rew"
    "ard\022Q\n\014detailReward\030\003 \003(\0132;.com.ea.eamob"
    "ile.nfsmw.protoc.TournamentDetailRewardM"
    "essage\"M\n\013AccountInfo\022\014\n\004type\030\001 \002(\005\022\014\n\004n"
    "ame\030\002 \002(\t\022\017\n\007headUrl\030\003 \001(\t\022\021\n\tisExpired\030"
    "\004 \001(\010\"+\n\032RequestBindingStartCommand\022\r\n\005t"
    "oken\030\001 \002(\t\"@\n\033ResponseBindingStartComman"
    "d\022\017\n\007authUrl\030\001 \002(\t\022\020\n\010closeUrl\030\002 \001(\t\"t\n\032"
    "RequestBindingTokenCommand\022\022\n\nisOverride"
    "\030\001 \002(\010\022\r\n\005token\030\002 \002(\t\022\024\n\014access_token\030\003 "
    "\002(\t\022\013\n\003uid\030\004 \002(\t\022\020\n\010nickname\030\005 \001(\t\",\n\033Re"
    "sponseBindingTokenCommand\022\r\n\005token\030\001 \002(\t"
    "\">\n\031RequestBindingInfoCommand\022\024\n\014access_"
    "token\030\001 \002(\t\022\013\n\003uid\030\002 \002(\t\"\305\001\n\032ResponseBin"
    "dingInfoCommand\022\021\n\tisBinding\030\001 \002(\010\022Z\n\025bi"
    "ndingConfirmCommand\030\003 \001(\0132;.com.ea.eamob"
    "ile.nfsmw.protoc.ResponseBindingConfirmC"
    "ommand\0228\n\010userInfo\030\004 \001(\0132&.com.ea.eamobi"
    "le.nfsmw.protoc.UserInfo\",\n\033RequestBindi"
    "ngResultCommand\022\r\n\005token\030\001 \002(\t\"\307\001\n\034Respo"
    "nseBindingResultCommand\022\021\n\tisBinding\030\001 \002"
    "(\010\022Z\n\025bindingConfirmCommand\030\003 \001(\0132;.com."
    "ea.eamobile.nfsmw.protoc.ResponseBinding"
    "ConfirmCommand\0228\n\010userInfo\030\004 \001(\0132&.com.e"
    "a.eamobile.nfsmw.protoc.UserInfo\"A\n\034Requ"
    "estBindingConfirmCommand\022\022\n\nisOverride\030\001"
    " \002(\010\022\r\n\005token\030\002 \002(\t\".\n\035ResponseBindingCo"
    "nfirmCommand\022\r\n\005token\030\001 \002(\t\".\n\033ResponseB"
    "indingPopupCommand\022\017\n\007isPopup\030\001 \002(\010\"-\n\014E"
    "rrorCommand\022\014\n\004code\030\001 \002(\t\022\017\n\007message\030\002 \002"
    "(\t\"\300\004\n\007CarData\022\r\n\005carId\030\001 \002(\t\022\014\n\004type\030\002 "
    "\002(\005\022\014\n\004tier\030\003 \002(\005\022\r\n\005score\030\004 \002(\005\022\016\n\006stat"
    "us\030\005 \002(\005\0228\n\005slots\030\006 \003(\0132).com.ea.eamobil"
    "e.nfsmw.protoc.CarSlotInfo\022\021\n\tpriceType\030"
    "\007 \002(\005\022\r\n\005price\030\010 \002(\005\022\025\n\runlockMWLevel\030\t "
    "\002(\005\022\022\n\nchartletId\030\n \002(\005\022\016\n\006isLock\030\013 \001(\010\022"
    "\022\n\nremainTime\030\r \001(\003\022A\n\rchartletInfos\030\016 \003"
    "(\0132*.com.ea.eamobile.nfsmw.protoc.Chartl"
    "etInfo\022\020\n\010sellFlag\030\017 \001(\005\022\024\n\014isSpecialCar"
    "\030\020 \001(\010\022\026\n\016fragmentNumber\030\021 \001(\005\022B\n\rgotcha"
    "Expense\030\022 \003(\0132+.com.ea.eamobile.nfsmw.pr"
    "otoc.GotchaExpense\022\033\n\023totalFragmentNumbe"
    "r\030\023 \001(\005\022\027\n\017remainPriceType\030\024 \001(\005\022\023\n\013rema"
    "inPrice\030\025 \001(\005\022\020\n\010maxlimit\030\026 \001(\005\022\r\n\005limit"
    "\030\027 \001(\005\022\r\n\005state\030\030 \001(\005\"W\n\rGotchaExpense\022\r"
    "\n\005level\030\001 \002(\005\022\r\n\005price\030\002 \002(\005\022\021\n\tpriceTyp"
    "e\030\003 \002(\005\022\025\n\rleftFreeTimes\030\004 \002(\005\"\375\002\n\014Chart"
    "letInfo\022\014\n\004name\030\001 \002(\t\022\032\n\022diffuseTextureP"
    "ath\030\002 \002(\t\022\027\n\017diffuseMaskPath\030\003 \002(\t\022\020\n\010BR"
    "DFPath\030\004 \002(\t\022\030\n\020BRDFSpecularPath\030\005 \002(\t\022\027"
    "\n\017numberPlatePath\030\006 \002(\t\022\023\n\013swatchColor\030\007"
    " \002(\003\022\024\n\014swatchColor2\030\010 \002(\003\022\021\n\tpaintType\030"
    "\t \002(\005\022\023\n\013useVinylMap\030\n \002(\010\022\021\n\tpriceType\030"
    "\013 \002(\005\022\r\n\005price\030\014 \002(\005\022\017\n\007tenancy\030\r \002(\003\022\r\n"
    "\005owned\030\016 \002(\010\022\022\n\nremainTime\030\017 \002(\003\022\n\n\002id\030\020"
    " \002(\005\022\020\n\010sellFlag\030\021 \001(\005\022\017\n\007orderId\030\022 \001(\005\022"
    "\r\n\005score\030\023 \001(\005\"\204\002\n\013CarSlotInfo\022\016\n\006slotId"
    "\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\025\n\rreachMaxLevel\030\003"
    " \002(\010\022\016\n\006status\030\004 \002(\005\022\022\n\nremainTime\030\005 \001(\005"
    "\022\r\n\005score\030\006 \002(\005\022\021\n\tpriceType\030\007 \002(\005\022\r\n\005pr"
    "ice\030\010 \002(\005\022\023\n\013description\030\t \002(\t\022\?\n\tconsum"
    "ble\030\n \003(\0132,.com.ea.eamobile.nfsmw.protoc"
    ".ConsumableData\022\024\n\014nextAddScore\030\013 \001(\005\"O\n"
    "\016ConsumableData\022\014\n\004type\030\001 \002(\005\022\r\n\005ratio\030\002"
    " \002(\002\022\021\n\tpriceType\030\003 \002(\005\022\r\n\005price\030\004 \002(\005\"\026"
    "\n\024RequestGarageCommand\"P\n\025ResponseGarage"
    "Command\0227\n\010carDatas\030\001 \003(\0132%.com.ea.eamob"
    "ile.nfsmw.protoc.CarData\"%\n\024RequestBuyCa"
    "rCommand\022\r\n\005carId\030\001 \002(\t\"9\n\025ResponseBuyCa"
    "rCommand\022\017\n\007success\030\001 \002(\010\022\017\n\007message\030\002 \002"
    "(\t\"&\n\025RequestCarDataCommand\022\r\n\005carId\030\001 \002"
    "(\t\"P\n\026ResponseCarDataCommand\0226\n\007carData\030"
    "\001 \002(\0132%.com.ea.eamobile.nfsmw.protoc.Car"
    "Data\">\n\031RequestUpgradeSlotCommand\022\016\n\006slo"
    "tId\030\001 \002(\005\022\021\n\tuserCarId\030\002 \002(\t\"R\n\032Response"
    "UpgradeSlotCommand\022\017\n\007success\030\001 \002(\010\022\017\n\007m"
    "essage\030\002 \002(\t\022\022\n\nremainTime\030\003 \001(\005\">\n\031Requ"
    "estUseChartletCommand\022\022\n\nchartletId\030\001 \002("
    "\005\022\r\n\005carId\030\002 \002(\t\">\n\032ResponseUseChartletC"
    "ommand\022\017\n\007success\030\001 \002(\010\022\017\n\007message\030\002 \002(\t"
    "\"2\n\037RequestChallengeMathInfoCommand\022\017\n\007r"
    "equest\030\001 \002(\010\"\377\001\n!ResponseChallengeMatchI"
    "nfoCommand\022\016\n\006modeId\030\001 \002(\005\022\025\n\rchallengeD"
    "ays\030\002 \002(\005\0224\n\006reward\030\003 \002(\0132$.com.ea.eamob"
    "ile.nfsmw.protoc.Reward\022\r\n\005carId\030\004 \002(\t\022\023"
    "\n\013remainTimes\030\005 \002(\005\022\020\n\010passTime\030\006 \002(\002\022\021\n"
    "\teventName\030\007 \002(\t\022\035\n\025carLimitDisplayStrin"
    "g\030\010 \002(\t\022\025\n\rexpireSeconds\030\t \001(\005\"*\n\023Respon"
    "seFeedCommand\022\023\n\013feedContent\030\001 \003(\t\"\327\001\n\013I"
    "temMessage\022\014\n\004name\030\001 \002(\t\022\021\n\tpriceType\030\002 "
    "\002(\005\022\r\n\005price\030\003 \002(\002\022\020\n\010discount\030\004 \002(\010\022\023\n\013"
    "discountNum\030\005 \002(\t\022\025\n\rdiscountPrice\030\006 \002(\002"
    "\022\020\n\010buyCount\030\007 \002(\005\022\024\n\014buyTimeLimit\030\010 \002(\003"
    "\022\020\n\010itemType\030\t \002(\005\022\016\n\006itemId\030\n \002(\005\022\020\n\010se"
    "llFlag\030\013 \001(\005\"\033\n\031RequestStoreDetailComman"
    "d\"V\n\032ResponseStoreDetailCommand\0228\n\005items"
    "\030\001 \003(\0132).com.ea.eamobile.nfsmw.protoc.It"
    "emMessage\"\'\n\025RequestBuyItemCommand\022\016\n\006it"
    "emId\030\001 \002(\005\":\n\026ResponseBuyItemCommand\022\017\n\007"
    "success\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\"\260\001\n\024Reque"
    "stSystemCommand\022Q\n\004type\030\001 \002(\0162C.com.ea.e"
    "amobile.nfsmw.protoc.RequestSystemComman"
    "d.SystemConfigType\022\017\n\007content\030\002 \002(\t\"4\n\020S"
    "ystemConfigType\022\020\n\014UserLanguage\020\000\022\016\n\nSyn"
    "ergyUID\020\001\"\310\003\n\025ResponseSystemCommand\022E\n\013E"
    "ventOption\030\001 \003(\01320.com.ea.eamobile.nfsmw"
    ".protoc.EventOptionMessage\022\020\n\010CtaParam\030\002"
    " \003(\005\022\022\n\nmessageUrl\030\003 \001(\t\022\023\n\013speedFactor\030"
    "\004 \003(\002\022\034\n\024IPSPFailedMessageUrl\030\005 \001(\t\022\025\n\rr"
    "entJaguarUrl\030\006 \001(\t\022\024\n\014getJaguarUrl\030\007 \001(\t"
    "\022\025\n\rjaguarInfoUrl\030\010 \001(\t\022\017\n\007servers\030\t \003(\t"
    "\022\016\n\006popMOD\030\n \001(\010\022!\n\031energyRecoveringStar"
    "tTime\030\013 \001(\005\022\036\n\026energyRecoveringPeriod\030\014 "
    "\001(\005\022\033\n\023energyRecoveringNum\030\r \001(\005\022$\n\034ipsp"
    "PurchaseItemCallBackType\030\016 \001(\005\022\024\n\014energy"
    "MaxNum\030\017 \001(\005\022\016\n\006newMOD\030\020 \001(\005\"\304\005\n\022EventOp"
    "tionMessage\022C\n\ncashReward\030\001 \001(\0132/.com.ea"
    ".eamobile.nfsmw.protoc.CashRewardMessage"
    "\022S\n\022opponentCollection\030\002 \001(\01327.com.ea.ea"
    "mobile.nfsmw.protoc.OpponentCollectionMe"
    "ssage\022A\n\traceEvent\030\003 \001(\0132..com.ea.eamobi"
    "le.nfsmw.protoc.RaceEventMessage\022E\n\013traf"
    "ficFlow\030\004 \001(\01320.com.ea.eamobile.nfsmw.pr"
    "otoc.TrafficFlowMessage\022\016\n\006modeId\030\005 \002(\005\022"
    "I\n\rMedalPosition\030\006 \001(\01322.com.ea.eamobile"
    ".nfsmw.protoc.MedalPositionMessage\022\020\n\010Fi"
    "leName\030\007 \002(\t\022C\n\nMedalScore\030\010 \001(\0132/.com.e"
    "a.eamobile.nfsmw.protoc.MedalScoreMessag"
    "e\022A\n\tMedalTime\030\t \001(\0132..com.ea.eamobile.n"
    "fsmw.protoc.MedalTimeMessage\022N\n\013InitialT"
    "ime\030\n \001(\01329.com.ea.eamobile.nfsmw.protoc"
    ".CountdownInitialTimeMessage\022E\n\013PenaltyT"
    "ime\030\013 \001(\01320.com.ea.eamobile.nfsmw.protoc"
    ".PenaltyTimeMessage\"A\n\021CashRewardMessage"
    "\022\016\n\006bronze\030\001 \001(\005\022\016\n\006silver\030\002 \001(\005\022\014\n\004gold"
    "\030\003 \001(\005\"\\\n\024MedalPositionMessage\022\026\n\016Positi"
    "onBronze\030\001 \001(\005\022\026\n\016PositionSilver\030\002 \001(\005\022\024"
    "\n\014PositionGold\030\003 \001(\005\"P\n\021MedalScoreMessag"
    "e\022\023\n\013ScoreBronze\030\001 \001(\005\022\023\n\013ScoreSilver\030\002 "
    "\001(\005\022\021\n\tScoreGold\030\003 \001(\005\"L\n\020MedalTimeMessa"
    "ge\022\022\n\nTimeBronze\030\001 \001(\002\022\022\n\nTimeSilver\030\002 \001"
    "(\002\022\020\n\010TimeGold\030\003 \001(\002\"2\n\033CountdownInitial"
    "TimeMessage\022\023\n\013InitialTime\030\001 \001(\002\")\n\022Pena"
    "ltyTimeMessage\022\023\n\013MaximumTime\030\001 \001(\002\"\\\n\031O"
    "pponentCollectionMessage\022\?\n\010opponent\030\001 \003"
    "(\0132-.com.ea.eamobile.nfsmw.protoc.Oppone"
    "ntMessage\"\257\001\n\017OpponentMessage\022\022\n\ndriverN"
    "ame\030\001 \001(\t\022\032\n\022carDescriptionName\030\002 \001(\t\022\023\n"
    "\013colourIndex\030\003 \001(\005\022\022\n\nstationary\030\004 \001(\010\022C"
    "\n\naiSettings\030\005 \001(\0132/.com.ea.eamobile.nfs"
    "mw.protoc.AiSettingsMessage\"\205\002\n\021AiSettin"
    "gsMessage\022\023\n\013speedFactor\030\001 \001(\002\022\027\n\017corner"
    "ingFactor\030\002 \001(\002\022\027\n\017racingLineScale\030\003 \001(\002"
    "\022 \n\030rubberBandingTweaksToUse\030\004 \001(\005\022\037\n\027ru"
    "bberBandingDifficulty\030\005 \001(\002\022%\n\035rubberBan"
    "dingTargetDifficulty\030\006 \001(\002\022\030\n\020pathfindin"
    "gSkill\030\007 \001(\002\022\022\n\nnitroSkill\030\010 \001(\002\022\021\n\tmaxH"
    "ealth\030\t \001(\002\"\341\003\n\020RaceEventMessage\022\020\n\010race"
    "Type\030\001 \001(\t\022\035\n\025raceFSMPrefabOverride\030\002 \001("
    "\t\022\026\n\016carRestriction\030\003 \001(\t\022\021\n\ttrackName\030\004"
    " \001(\t\022\014\n\004name\030\005 \001(\t\022\020\n\010location\030\006 \001(\t\022\026\n\016"
    "blacklistEvent\030\007 \001(\010\022\030\n\020classRestriction"
    "\030\010 \001(\005\022\031\n\021environmentPrefab\030\t \001(\t\022\027\n\017tra"
    "fficCarCount\030\n \001(\005\022\026\n\016openWorldTrack\030\013 \001"
    "(\010\022\021\n\tautoLogId\030\014 \001(\005\022\023\n\013pursuitType\030\r \001"
    "(\t\022\034\n\024startLineNoSpawnZone\030\016 \001(\002\022\035\n\025fini"
    "shLineNoSpawnZone\030\017 \001(\002\022\025\n\rspawnDistance"
    "\030\020 \001(\002\022\021\n\tstartLine\030\021 \001(\t\022\022\n\nfinishLine\030"
    "\022 \001(\t\022\022\n\nendOfTrack\030\023 \001(\t\022\034\n\024checkpointC"
    "ollection\030\024 \001(\t\"\273\004\n\022TrafficFlowMessage\022\037"
    "\n\027maxIncomingCarsOverride\030\001 \001(\005\022 \n\030maxOu"
    "tcomingCarsOverride\030\002 \001(\005\022 \n\030outgoingLig"
    "htMinDistance\030\003 \001(\002\022 \n\030outgoingLightMaxD"
    "istance\030\004 \001(\002\022 \n\030outgoingHeavyMinDistanc"
    "e\030\005 \001(\002\022 \n\030outgoingHeavyMaxDistance\030\006 \001("
    "\002\022 \n\030incomingLightMinDistance\030\007 \001(\002\022 \n\030i"
    "ncomingLightMaxDistance\030\010 \001(\002\022 \n\030incomin"
    "gHeavyMinDistance\030\t \001(\002\022 \n\030incomingHeavy"
    "MaxDistance\030\n \001(\002\022\037\n\027intialNoTrafficDist"
    "ance\030\013 \001(\002\022Y\n\025raceTrafficCongestion\030\014 \003("
    "\0132:.com.ea.eamobile.nfsmw.protoc.RaceTra"
    "fficCongestionMessage\022V\n\023trfficCarSpawnD"
    "escs\030\r \001(\01329.com.ea.eamobile.nfsmw.proto"
    "c.TrafficCarSpawnDescsMessage\"\220\001\n\034RaceTr"
    "afficCongestionMessage\022\036\n\026raceCompleteti"
    "onFactor\030\001 \001(\002\022\'\n\037outgoingTrafficCongest"
    "ionFactor\030\002 \001(\002\022\'\n\037oncomingTrafficConges"
    "tionFactor\030\003 \001(\002\"/\n\033TrafficCarSpawnDescs"
    "Message\022\020\n\010prefabld\030\001 \003(\t\"0\n\032RequestRegi"
    "stJaguarCommand\022\022\n\njaguarType\030\001 \002(\005\"6\n\033R"
    "esponseRegistJaguarCommand\022\027\n\017levelRaceC"
    "anUse\030\001 \002(\010\"A\n\033RequestRpLeaderboardComma"
    "nd\022\014\n\004type\030\001 \002(\005\022\024\n\014hasProfileUI\030\002 \001(\010\"\357"
    "\001\n\034ResponseRpLeaderboardCommand\022\014\n\004type\030"
    "\001 \002(\005\022I\n\rrpLeaderboard\030\002 \003(\01322.com.ea.ea"
    "mobile.nfsmw.protoc.RpLeaderboardMessage"
    "\022\020\n\010selfRank\030\003 \002(\005\022\025\n\rselfHeadIndex\030\004 \002("
    "\005\022\023\n\013selfHeadUrl\030\005 \001(\t\022\020\n\010selfName\030\006 \002(\t"
    "\022\023\n\013selfRpLevel\030\007 \002(\005\022\021\n\tselfRpNum\030\010 \002(\005"
    "\"\206\001\n\024RpLeaderboardMessage\022\014\n\004rank\030\001 \002(\005\022"
    "\021\n\theadIndex\030\002 \002(\005\022\017\n\007headUrl\030\003 \001(\t\022\014\n\004n"
    "ame\030\004 \002(\t\022\017\n\007rpLevel\030\005 \002(\005\022\r\n\005rpNum\030\006 \002("
    "\005\022\016\n\006userId\030\007 \001(\003\"\223\001\n\016ProfileCarInfo\022\021\n\t"
    "userCarId\030\001 \002(\003\022\r\n\005carId\030\002 \002(\t\022\021\n\tslotLe"
    "vel\030\003 \003(\005\022\030\n\020carPaintJobIndex\030\004 \002(\005\022\020\n\010c"
    "arScore\030\005 \002(\005\022\017\n\007likeNum\030\006 \002(\003\022\017\n\007canLik"
    "e\030\007 \002(\010\"\177\n\035RequestProfileUserDataCommand"
    "\022\021\n\tprofileId\030\001 \002(\003\022\024\n\014sourceTypeId\030\002 \002("
    "\005\022\032\n\022tournamentOnlineId\030\003 \002(\005\022\031\n\021tournam"
    "entGroupId\030\004 \002(\005\"\260\002\n\036ResponseProfileUser"
    "DataCommand\022\020\n\010nickname\030\001 \002(\t\022\017\n\007headUrl"
    "\030\002 \002(\t\022\021\n\theadIndex\030\003 \002(\005\022\017\n\007rpLevel\030\004 \002"
    "(\005\022\r\n\005rpExp\030\005 \002(\005\022\025\n\rmostwantedNum\030\006 \002(\005"
    "\022\016\n\006carNum\030\007 \002(\005\022\023\n\013garageScore\030\010 \002(\005\022\021\n"
    "\tcanReport\030\t \002(\010\022=\n\007carInfo\030\n \001(\0132,.com."
    "ea.eamobile.nfsmw.protoc.ProfileCarInfo\022"
    "\022\n\nownedCarId\030\013 \003(\t\022\026\n\016ownedUserCarId\030\014 "
    "\003(\003\"1\n\034RequestProfileNextCarCommand\022\021\n\tu"
    "serCarId\030\001 \002(\003\"^\n\035ResponseProfileNextCar"
    "Command\022=\n\007carInfo\030\001 \002(\0132,.com.ea.eamobi"
    "le.nfsmw.protoc.ProfileCarInfo\".\n\031Reques"
    "tProfileLikeCommand\022\021\n\tuserCarId\030\001 \002(\003\"-"
    "\n\032ResponseProfileLikeCommand\022\017\n\007likeNum\030"
    "\001 \002(\003\"0\n\033RequestProfileReportCommand\022\021\n\t"
    "profileId\030\001 \002(\003\"\036\n\034ResponseProfileReport"
    "Command\"\234\001\n\rUserVSProfile\022\020\n\010titleStr\030\001 "
    "\002(\t\022\023\n\013playerValue\030\002 \002(\005\022\022\n\nghostValue\030\003"
    " \002(\005\022\026\n\016hasProgressBar\030\004 \002(\010\022\023\n\013subTitle"
    "Str\030\005 \002(\t\022\020\n\010unitsStr\030\006 \002(\t\022\021\n\tvalueType"
    "\030\007 \002(\005\",\n\027RequestProfileVSCommand\022\021\n\tpro"
    "fileId\030\001 \002(\003\"W\n\030ResponseProfileVSCommand"
    "\022;\n\006vsData\030\001 \003(\0132+.com.ea.eamobile.nfsmw"
    ".protoc.UserVSProfile\"z\n\"RequestRecordUs"
    "erRaceActionCommand\022\020\n\010copsKill\030\001 \002(\005\022\022\n"
    "\nconsumable\030\002 \002(\005\022\r\n\005drift\030\003 \002(\005\022\014\n\004jump"
    "\030\004 \002(\005\022\021\n\tbillBoard\030\005 \002(\005\"\031\n\027RequestQuic"
    "kRaceCommand\"\274\001\n\030ResponseQuickRaceComman"
    "d\0226\n\005track\030\001 \002(\0132\'.com.ea.eamobile.nfsmw"
    ".protoc.TrackInfo\022\022\n\ntrackIndex\030\002 \002(\005\022\016\n"
    "\006modeId\030\003 \002(\005\022D\n\016checkPointInfo\030\004 \001(\0132,."
    "com.ea.eamobile.nfsmw.protoc.CheckPointI"
    "nfo\"P\n\033ResponseNotificationCommand\022\016\n\006ic"
    "onId\030\001 \002(\005\022\020\n\010duration\030\002 \002(\002\022\017\n\007content\030"
    "\003 \002(\t\"\306\001\n\031RequestGhostRecordCommand\022\016\n\006m"
    "odeId\030\001 \002(\005\022\020\n\010raceTime\030\002 \002(\002\022\r\n\005carId\030\003"
    " \002(\t\022\022\n\ncarModType\030\004 \003(\005\022\023\n\013carModValue\030"
    "\005 \003(\002\022\023\n\013carModLevel\030\006 \003(\005\022\020\n\010carModId\030\007"
    " \003(\005\022\024\n\014samplePeriod\030\010 \002(\005\022\022\n\nsampleData"
    "\030\t \003(\002\">\n\032ResponseGhostRecordCommand\022\017\n\007"
    "success\030\001 \002(\010\022\017\n\007message\030\002 \001(\t\"S\n\026Reques"
    "tIapCheckCommand\022\023\n\013receiptData\030\001 \002(\t\022$\n"
    "\034ipspPurchaseItemCallBackType\030\002 \001(\005\";\n\027R"
    "esponseIapCheckCommand\022\017\n\007success\030\001 \002(\010\022"
    "\017\n\007message\030\002 \001(\t\"8\n%ResponseTournamentNo"
    "tificationCommand\022\017\n\007message\030\001 \003(\t\";\n\034Re"
    "questTutorialRewardCommand\022\033\n\023finishedAl"
    "lTutorial\030\001 \002(\010\"f\n\035ResponseTutorialRewar"
    "dCommand\022\017\n\007success\030\001 \002(\010\0224\n\006reward\030\002 \001("
    "\0132$.com.ea.eamobile.nfsmw.protoc.Reward\""
    "\201\001\n\024ResponsePopupCommand\022\021\n\tpopScreen\030\001 "
    "\002(\005\022\016\n\006flowID\030\002 \001(\t\022\014\n\004text\030\003 \002(\t\022\017\n\007hea"
    "ding\030\004 \001(\t\022\023\n\013yesButtonID\030\005 \001(\t\022\022\n\nnoBut"
    "tonID\030\006 \001(\t\"^\n\030ResponsePopupListCommand\022"
    "B\n\006popups\030\001 \003(\01322.com.ea.eamobile.nfsmw."
    "protoc.ResponsePopupCommand\"H\n\"ResponseT"
    "ournamentRewardNumCommand\022\021\n\trewardNum\030\001"
    " \002(\005\022\017\n\007endTime\030\002 \003(\005\"4\n\024RequestGotchaCo"
    "mmand\022\r\n\005level\030\001 \002(\005\022\r\n\005carId\030\002 \002(\t\"q\n\025R"
    "esponseGotchaCommand\022A\n\013gotchaItems\030\001 \003("
    "\0132,.com.ea.eamobile.nfsmw.protoc.GotchaI"
    "temInfo\022\025\n\rglobalMessage\030\002 \001(\t\"<\n\016Gotcha"
    "ItemInfo\022\014\n\004type\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n\006"
    "number\030\003 \002(\005\"\230\001\n\027RequestCheatInfoCommand"
    "\022\021\n\tCheatType\030\001 \002(\005\022\025\n\rCarConfigName\030\002 \001"
    "(\t\022\022\n\nMidGearSpd\030\003 \001(\005\022\022\n\nTopGearSpd\030\004 \001"
    "(\005\022\022\n\nExeFileMD5\030\005 \001(\t\022\027\n\017UserSelectCarI"
    "D\030\006 \001(\t\":\n\020LeaderboardClass\022\n\n\002id\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\014\n\004type\030\003 \002(\005\"\241\001\n\017Leaderbo"
    "ardItem\022\014\n\004rank\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\016\n\006u"
    "serId\030\003 \002(\003\022\021\n\theadIndex\030\004 \002(\005\022\017\n\007headUr"
    "l\030\005 \001(\t\022\014\n\004text\030\006 \001(\t\022\017\n\007rpLevel\030\007 \001(\005\022\r"
    "\n\005rpNum\030\010 \001(\005\022\020\n\010isMyself\030\t \001(\010\"\031\n\027Reque"
    "stLeaderboardClass\"Z\n\030ResponseLeaderboar"
    "dClass\022>\n\006clases\030\001 \003(\0132..com.ea.eamobile"
    ".nfsmw.protoc.LeaderboardClass\"C\n\023Leader"
    "boardHeadInfo\022\017\n\007classId\030\001 \002(\005\022\014\n\004tier\030\002"
    " \002(\005\022\r\n\005range\030\003 \002(\005\"U\n\022RequestLeaderboar"
    "d\022\?\n\004info\030\001 \002(\01321.com.ea.eamobile.nfsmw."
    "protoc.LeaderboardHeadInfo\"\224\001\n\023ResponseL"
    "eaderboard\022\?\n\004info\030\001 \002(\01321.com.ea.eamobi"
    "le.nfsmw.protoc.LeaderboardHeadInfo\022<\n\005i"
    "tems\030\002 \003(\0132-.com.ea.eamobile.nfsmw.proto"
    "c.LeaderboardItem\"\026\n\024RequestTournamentNu"
    "m\"*\n\025ResponseTournamentNum\022\021\n\trewardNum\030"
    "\001 \002(\005\"\035\n\033RequestCollectEnergyCommand\"\032\n\030"
    "RequestEnergyTimeCommand\"O\n\031ResponseEner"
    "gyTimeCommand\022\021\n\tstarttime\030\001 \002(\005\022\017\n\007endt"
    "ime\030\002 \002(\005\022\016\n\006energy\030\003 \002(\005\"&\n\030RequestFans"
    "RewardCommand\022\n\n\002id\030\001 \002(\005\">\n\035ResponseFan"
    "sRewardTimeCommand\022\n\n\002id\030\001 \001(\005\022\021\n\tstartt"
    "ime\030\002 \001(\005\"7\n\032RequestPropPurchaseCommand\022"
    "\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \001(\005\"\035\n\033RequestMis"
    "sionRewardCommand\")\n\033RequestMissionFinis"
    "hCommand\022\n\n\002id\030\001 \002(\005\"Y\n\032ResponseMissionL"
    "istCommand\022;\n\010missions\030\001 \003(\0132).com.ea.ea"
    "mobile.nfsmw.protoc.MissionInfo\",\n\025Reque"
    "stLotteryCommand\022\023\n\013lotteryType\030\001 \002(\005\"S\n"
    "\026ResponseLotteryCommand\0229\n\007rewards\030\001 \003(\013"
    "2(.com.ea.eamobile.nfsmw.protoc.RewardLi"
    "st\"\031\n\027RequestFleetRaceCommand\"\257\001\n\030Respon"
    "seFleetRaceCommand\0226\n\005races\030\001 \003(\0132\'.com."
    "ea.eamobile.nfsmw.protoc.FleetRace\022I\n\rrp"
    "Leaderboard\030\002 \003(\01322.com.ea.eamobile.nfsm"
    "w.protoc.RpLeaderboardMessage\022\020\n\010selfRan"
    "k\030\003 \002(\005\"4\n\030RequestFleetStartCommand\022\n\n\002i"
    "d\030\001 \002(\005\022\014\n\004cars\030\002 \003(\t\"L\n\031ResponseFleetSt"
    "artCommand\022\n\n\002id\030\001 \002(\005\022\016\n\006result\030\002 \002(\005\022\023"
    "\n\013displayName\030\003 \002(\t\"6\n\026RequestFleetEndCo"
    "mmand\022\n\n\002id\030\001 \002(\005\022\020\n\010advanced\030\002 \001(\010\"\223\001\n\027"
    "ResponseFleetEndCommand\022\n\n\002id\030\001 \002(\005\022\016\n\006r"
    "esult\030\002 \002(\005\022\023\n\013displayName\030\003 \002(\t\022\014\n\004rank"
    "\030\004 \002(\005\0229\n\007rewards\030\005 \003(\0132(.com.ea.eamobil"
    "e.nfsmw.protoc.RewardList\"\'\n\031RequestFlee"
    "tDoubleCommand\022\n\n\002id\030\001 \002(\005\"M\n\032ResponseFl"
    "eetDoubleCommand\022\n\n\002id\030\001 \002(\005\022\016\n\006result\030\002"
    " \002(\005\022\023\n\013displayName\030\003 \002(\t\"*\n\031RequestFixC"
    "arLimitCommand\022\r\n\005carId\030\001 \002(\t\"P\n\032Respons"
    "eFixCarLimitCommand\022\r\n\005carId\030\001 \002(\t\022\016\n\006re"
    "sult\030\002 \002(\005\022\023\n\013displayName\030\003 \002(\t\"\351$\n\016Requ"
    "estCommand\0224\n\004head\030\001 \002(\0132&.com.ea.eamobi"
    "le.nfsmw.protoc.HeadInfo\022G\n\014trackCommand"
    "\030\002 \001(\01321.com.ea.eamobile.nfsmw.protoc.Re"
    "questTrackCommand\022J\n\014loginCommand\030\003 \001(\0132"
    "4.com.ea.eamobile.nfsmw.protoc.RequestUs"
    "erInfoCommand\022J\n\014ghostCommand\030\004 \001(\01324.co"
    "m.ea.eamobile.nfsmw.protoc.RequestModeIn"
    "foCommand\022Q\n\021raceResultCommand\030\005 \001(\01326.c"
    "om.ea.eamobile.nfsmw.protoc.RequestRaceR"
    "esultCommand\022]\n\027tournamentDetailCommand\030"
    "\006 \001(\0132<.com.ea.eamobile.nfsmw.protoc.Req"
    "uestTournamentDetailCommand\022i\n\035tournamen"
    "tRewardDetailCommand\030\007 \001(\0132B.com.ea.eamo"
    "bile.nfsmw.protoc.RequestTournamentRewar"
    "dDetailCommand\022Q\n\021tournamentCommand\030\t \001("
    "\01326.com.ea.eamobile.nfsmw.protoc.Request"
    "TournamentCommand\022M\n\017resourceCommand\030\n \001"
    "(\01324.com.ea.eamobile.nfsmw.protoc.Reques"
    "tResourceCommand\022]\n\027tournamentSignUpComm"
    "and\030\020 \001(\0132<.com.ea.eamobile.nfsmw.protoc"
    ".RequestTournamentSignUpCommand\022O\n\020raceS"
    "tartCommand\030\022 \001(\01325.com.ea.eamobile.nfsm"
    "w.protoc.RequestRaceStartCommand\022U\n\023bind"
    "ingStartCommand\030\023 \001(\01328.com.ea.eamobile."
    "nfsmw.protoc.RequestBindingStartCommand\022"
    "W\n\024bindingResultCommand\030\024 \001(\01329.com.ea.e"
    "amobile.nfsmw.protoc.RequestBindingResul"
    "tCommand\022Y\n\025bindingConfirmCommand\030\025 \001(\0132"
    ":.com.ea.eamobile.nfsmw.protoc.RequestBi"
    "ndingConfirmCommand\022G\n\010getRward\030\026 \001(\01325."
    "com.ea.eamobile.nfsmw.protoc.RequestGetR"
    "ewardCommand\022I\n\rgarageCommand\030\027 \001(\01322.co"
    "m.ea.eamobile.nfsmw.protoc.RequestGarage"
    "Command\022I\n\rbuyCarCommand\030\030 \001(\01322.com.ea."
    "eamobile.nfsmw.protoc.RequestBuyCarComma"
    "nd\022K\n\016carDataCommand\030\031 \001(\01323.com.ea.eamo"
    "bile.nfsmw.protoc.RequestCarDataCommand\022"
    "S\n\022upgradeSlotCommand\030\032 \001(\01327.com.ea.eam"
    "obile.nfsmw.protoc.RequestUpgradeSlotCom"
    "mand\022S\n\022useChartletCommand\030\033 \001(\01327.com.e"
    "a.eamobile.nfsmw.protoc.RequestUseChartl"
    "etCommand\022Y\n\025modifyUserInfoCommand\030\034 \001(\013"
    "2:.com.ea.eamobile.nfsmw.protoc.RequestM"
    "odifyUserInfoCommand\022S\n\022storeDetailComma"
    "nd\030\035 \001(\01327.com.ea.eamobile.nfsmw.protoc."
    "RequestStoreDetailCommand\022K\n\016buyItemComm"
    "and\030\036 \001(\01323.com.ea.eamobile.nfsmw.protoc"
    ".RequestBuyItemCommand\022N\n\014registJaguar\030\037"
    " \001(\01328.com.ea.eamobile.nfsmw.protoc.Requ"
    "estRegistJaguarCommand\022M\n\017IapCheckComman"
    "d\030  \001(\01324.com.ea.eamobile.nfsmw.protoc.R"
    "equestIapCheckCommand\022Y\n\025tutorialRewardC"
    "ommand\030! \001(\0132:.com.ea.eamobile.nfsmw.pro"
    "toc.RequestTutorialRewardCommand\022W\n\024rpLe"
    "aderboardCommand\030\" \001(\01329.com.ea.eamobile"
    ".nfsmw.protoc.RequestRpLeaderboardComman"
    "d\022S\n\022ghostRecordCommand\030# \001(\01327.com.ea.e"
    "amobile.nfsmw.protoc.RequestGhostRecordC"
    "ommand\022_\n\030challengeMathInfoCommand\030$ \001(\013"
    "2=.com.ea.eamobile.nfsmw.protoc.RequestC"
    "hallengeMathInfoCommand\022[\n\026profileUserDa"
    "taCommand\030% \001(\0132;.com.ea.eamobile.nfsmw."
    "protoc.RequestProfileUserDataCommand\022Y\n\025"
    "profileNextCarCommand\030& \001(\0132:.com.ea.eam"
    "obile.nfsmw.protoc.RequestProfileNextCar"
    "Command\022S\n\022profileLikeCommand\030\' \001(\01327.co"
    "m.ea.eamobile.nfsmw.protoc.RequestProfil"
    "eLikeCommand\022W\n\024profileReportCommand\030( \001"
    "(\01329.com.ea.eamobile.nfsmw.protoc.Reques"
    "tProfileReportCommand\022O\n\020profileVSComman"
    "d\030) \001(\01325.com.ea.eamobile.nfsmw.protoc.R"
    "equestProfileVSCommand\022I\n\rgotchaCommand\030"
    "* \001(\01322.com.ea.eamobile.nfsmw.protoc.Req"
    "uestGotchaCommand\022O\n\020cheatInfoCommand\030+ "
    "\001(\01325.com.ea.eamobile.nfsmw.protoc.Reque"
    "stCheatInfoCommand\022e\n\033recordUserRaceActi"
    "onCommand\030, \001(\0132@.com.ea.eamobile.nfsmw."
    "protoc.RequestRecordUserRaceActionComman"
    "d\022I\n\rsystemCommand\030- \001(\01322.com.ea.eamobi"
    "le.nfsmw.protoc.RequestSystemCommand\022V\n\027"
    "leaderboardClassCommand\030. \001(\01325.com.ea.e"
    "amobile.nfsmw.protoc.RequestLeaderboardC"
    "lass\022L\n\022leaderboardCommand\030/ \001(\01320.com.e"
    "a.eamobile.nfsmw.protoc.RequestLeaderboa"
    "rd\022P\n\024requestTournamentNum\0300 \001(\01322.com.e"
    "a.eamobile.nfsmw.protoc.RequestTournamen"
    "tNum\022O\n\020requestQuickRace\0301 \001(\01325.com.ea."
    "eamobile.nfsmw.protoc.RequestQuickRaceCo"
    "mmand\022U\n\023bindingTokenCommand\0302 \001(\01328.com"
    ".ea.eamobile.nfsmw.protoc.RequestBinding"
    "TokenCommand\022S\n\022bindingInfoCommand\0303 \001(\013"
    "27.com.ea.eamobile.nfsmw.protoc.RequestB"
    "indingInfoCommand\022W\n\024collectEnergyComman"
    "d\0304 \001(\01329.com.ea.eamobile.nfsmw.protoc.R"
    "equestCollectEnergyCommand\022Q\n\021energyTime"
    "Command\0305 \001(\01326.com.ea.eamobile.nfsmw.pr"
    "otoc.RequestEnergyTimeCommand\022Q\n\021fansRew"
    "ardCommand\0306 \001(\01326.com.ea.eamobile.nfsmw"
    ".protoc.RequestFansRewardCommand\022U\n\023prop"
    "PurchaseCommand\0307 \001(\01328.com.ea.eamobile."
    "nfsmw.protoc.RequestPropPurchaseCommand\022"
    "W\n\024missionRewardCommand\0308 \001(\01329.com.ea.e"
    "amobile.nfsmw.protoc.RequestMissionRewar"
    "dCommand\022W\n\024missionFinishCommand\0309 \001(\01329"
    ".com.ea.eamobile.nfsmw.protoc.RequestMis"
    "sionFinishCommand\022K\n\016lotteryCommand\030: \001("
    "\01323.com.ea.eamobile.nfsmw.protoc.Request"
    "LotteryCommand\022O\n\020fleetRaceCommand\030; \001(\013"
    "25.com.ea.eamobile.nfsmw.protoc.RequestF"
    "leetRaceCommand\022Q\n\021fleetStartCommand\030< \001"
    "(\01326.com.ea.eamobile.nfsmw.protoc.Reques"
    "tFleetStartCommand\022M\n\017fleetEndCommand\030= "
    "\001(\01324.com.ea.eamobile.nfsmw.protoc.Reque"
    "stFleetEndCommand\022S\n\022fleetDoubleCommand\030"
    "> \001(\01327.com.ea.eamobile.nfsmw.protoc.Req"
    "uestFleetDoubleCommand\022S\n\022fixCarLimitCom"
    "mand\030\? \001(\01327.com.ea.eamobile.nfsmw.proto"
    "c.RequestFixCarLimitCommand\"\323*\n\017Response"
    "Command\0224\n\004head\030\001 \002(\0132&.com.ea.eamobile."
    "nfsmw.protoc.HeadInfo\022H\n\014trackCommand\030\002 "
    "\001(\01322.com.ea.eamobile.nfsmw.protoc.Respo"
    "nseTrackCommand\022N\n\017userInfoCommand\030\003 \001(\013"
    "25.com.ea.eamobile.nfsmw.protoc.Response"
    "UserInfoCommand\022P\n\014ghostCommand\030\004 \001(\0132:."
    "com.ea.eamobile.nfsmw.protoc.ResponseRac"
    "erForGhostCommand\022R\n\021raceResultCommand\030\005"
    " \001(\01327.com.ea.eamobile.nfsmw.protoc.Resp"
    "onseRaceResultCommand\022^\n\027tournamentDetai"
    "lCommand\030\006 \001(\0132=.com.ea.eamobile.nfsmw.p"
    "rotoc.ResponseTournamentDetailCommand\022j\n"
    "\035tournamentRewardDetailCommand\030\007 \001(\0132C.c"
    "om.ea.eamobile.nfsmw.protoc.ResponseTour"
    "namentRewardDetailCommand\022R\n\021tournamentC"
    "ommand\030\t \001(\01327.com.ea.eamobile.nfsmw.pro"
    "toc.ResponseTournamentCommand\022N\n\017resourc"
    "eCommand\030\n \001(\01325.com.ea.eamobile.nfsmw.p"
    "rotoc.ResponseResourceCommand\022^\n\027tournam"
    "entSignUpCommand\030\021 \001(\0132=.com.ea.eamobile"
    ".nfsmw.protoc.ResponseTournamentSignUpCo"
    "mmand\022P\n\020raceStartCommand\030\023 \001(\01326.com.ea"
    ".eamobile.nfsmw.protoc.ResponseRaceStart"
    "Command\022V\n\023bindingStartCommand\030\024 \001(\01329.c"
    "om.ea.eamobile.nfsmw.protoc.ResponseBind"
    "ingStartCommand\022X\n\024bindingResultCommand\030"
    "\025 \001(\0132:.com.ea.eamobile.nfsmw.protoc.Res"
    "ponseBindingResultCommand\022Z\n\025bindingConf"
    "irmCommand\030\026 \001(\0132;.com.ea.eamobile.nfsmw"
    ".protoc.ResponseBindingConfirmCommand\022V\n"
    "\023bindingPopupCommand\030\027 \001(\01329.com.ea.eamo"
    "bile.nfsmw.protoc.ResponseBindingPopupCo"
    "mmand\022@\n\014errorCommand\030\030 \001(\0132*.com.ea.eam"
    "obile.nfsmw.protoc.ErrorCommand\022N\n\017modeI"
    "nfoCommand\030\031 \001(\01325.com.ea.eamobile.nfsmw"
    ".protoc.ResponseModeInfoCommand\022T\n\rrewar"
    "dCommand\030\032 \001(\0132=.com.ea.eamobile.nfsmw.p"
    "rotoc.responseTournamentRewardCommand\022I\n"
    "\tgetReward\030\033 \001(\01326.com.ea.eamobile.nfsmw"
    ".protoc.ResponseGetRewardCommand\022]\n\023tour"
    "namentRaceStart\030\034 \001(\0132@.com.ea.eamobile."
    "nfsmw.protoc.ResponseTournamentRaceStart"
    "Command\022_\n\024tournamentRaceReault\030\035 \001(\0132A."
    "com.ea.eamobile.nfsmw.protoc.ResponseTou"
    "rnamentRaceResultCommand\022J\n\rgarageComman"
    "d\030\036 \001(\01323.com.ea.eamobile.nfsmw.protoc.R"
    "esponseGarageCommand\022J\n\rbuyCarCommand\030\037 "
    "\001(\01323.com.ea.eamobile.nfsmw.protoc.Respo"
    "nseBuyCarCommand\022L\n\016carDataCommand\030  \001(\013"
    "24.com.ea.eamobile.nfsmw.protoc.Response"
    "CarDataCommand\022T\n\022upgradeSlotCommand\030! \001"
    "(\01328.com.ea.eamobile.nfsmw.protoc.Respon"
    "seUpgradeSlotCommand\022T\n\022useChartletComma"
    "nd\030\" \001(\01328.com.ea.eamobile.nfsmw.protoc."
    "ResponseUseChartletCommand\022Z\n\025modifyUser"
    "InfoCommand\030# \001(\0132;.com.ea.eamobile.nfsm"
    "w.protoc.ResponseModifyUserInfoCommand\022b"
    "\n\031challengeMatchInfoCommand\030$ \001(\0132\?.com."
    "ea.eamobile.nfsmw.protoc.ResponseChallen"
    "geMatchInfoCommand\022T\n\022storeDetailCommand"
    "\030% \001(\01328.com.ea.eamobile.nfsmw.protoc.Re"
    "sponseStoreDetailCommand\022L\n\016buyItemComma"
    "nd\030& \001(\01324.com.ea.eamobile.nfsmw.protoc."
    "ResponseBuyItemCommand\022J\n\rsystemCommand\030"
    "\' \001(\01323.com.ea.eamobile.nfsmw.protoc.Res"
    "ponseSystemCommand\022W\n\021weiboShareCommand\030"
    "( \001(\0132<.com.ea.eamobile.nfsmw.protoc.Res"
    "ponseWeiboShareLocksCommand\022O\n\014registJag"
    "uar\030) \001(\01329.com.ea.eamobile.nfsmw.protoc"
    ".ResponseRegistJaguarCommand\022F\n\013feedComm"
    "and\030* \001(\01321.com.ea.eamobile.nfsmw.protoc"
    ".ResponseFeedCommand\022N\n\017IapCheckCommand\030"
    "+ \001(\01325.com.ea.eamobile.nfsmw.protoc.Res"
    "ponseIapCheckCommand\022j\n\035tournamentNotifi"
    "cationCommand\030, \001(\0132C.com.ea.eamobile.nf"
    "smw.protoc.ResponseTournamentNotificatio"
    "nCommand\022Z\n\025tutorialRewardCommand\030- \001(\0132"
    ";.com.ea.eamobile.nfsmw.protoc.ResponseT"
    "utorialRewardCommand\022H\n\014popupCommand\030. \001"
    "(\01322.com.ea.eamobile.nfsmw.protoc.Respon"
    "sePopupCommand\022X\n\024rpLeaderboardCommand\030/"
    " \001(\0132:.com.ea.eamobile.nfsmw.protoc.Resp"
    "onseRpLeaderboardCommand\022V\n\023notification"
    "Command\0300 \001(\01329.com.ea.eamobile.nfsmw.pr"
    "otoc.ResponseNotificationCommand\022T\n\022ghos"
    "tRecordCommand\0301 \001(\01328.com.ea.eamobile.n"
    "fsmw.protoc.ResponseGhostRecordCommand\022d"
    "\n\032tournamentRewardNumCommand\0302 \001(\0132@.com"
    ".ea.eamobile.nfsmw.protoc.ResponseTourna"
    "mentRewardNumCommand\022\\\n\026profileUserDataC"
    "ommand\0303 \001(\0132<.com.ea.eamobile.nfsmw.pro"
    "toc.ResponseProfileUserDataCommand\022Z\n\025pr"
    "ofileNextCarCommand\0304 \001(\0132;.com.ea.eamob"
    "ile.nfsmw.protoc.ResponseProfileNextCarC"
    "ommand\022T\n\022profileLikeCommand\0305 \001(\01328.com"
    ".ea.eamobile.nfsmw.protoc.ResponseProfil"
    "eLikeCommand\022X\n\024profileReportCommand\0306 \001"
    "(\0132:.com.ea.eamobile.nfsmw.protoc.Respon"
    "seProfileReportCommand\022P\n\020profileVSComma"
    "nd\0307 \001(\01326.com.ea.eamobile.nfsmw.protoc."
    "ResponseProfileVSCommand\022J\n\rgotchaComman"
    "d\0308 \001(\01323.com.ea.eamobile.nfsmw.protoc.R"
    "esponseGotchaCommand\022W\n\027leaderboardClass"
    "Command\0309 \001(\01326.com.ea.eamobile.nfsmw.pr"
    "otoc.ResponseLeaderboardClass\022M\n\022leaderb"
    "oardCommand\030: \001(\01321.com.ea.eamobile.nfsm"
    "w.protoc.ResponseLeaderboard\022R\n\025response"
    "TournamentNum\030; \001(\01323.com.ea.eamobile.nf"
    "smw.protoc.ResponseTournamentNum\022Q\n\021resp"
    "onseQuickRace\030< \001(\01326.com.ea.eamobile.nf"
    "smw.protoc.ResponseQuickRaceCommand\022V\n\023b"
    "indingTokenCommand\030= \001(\01329.com.ea.eamobi"
    "le.nfsmw.protoc.ResponseBindingTokenComm"
    "and\022T\n\022bindingInfoCommand\030> \001(\01328.com.ea"
    ".eamobile.nfsmw.protoc.ResponseBindingIn"
    "foCommand\022R\n\021energyTimeCommand\030\? \001(\01327.c"
    "om.ea.eamobile.nfsmw.protoc.ResponseEner"
    "gyTimeCommand\022Z\n\025fansRewardTimeCommand\030@"
    " \001(\0132;.com.ea.eamobile.nfsmw.protoc.Resp"
    "onseFansRewardTimeCommand\022T\n\022missionList"
    "Command\030A \001(\01328.com.ea.eamobile.nfsmw.pr"
    "otoc.ResponseMissionListCommand\022L\n\016lotte"
    "ryCommand\030B \001(\01324.com.ea.eamobile.nfsmw."
    "protoc.ResponseLotteryCommand\022P\n\020popupli"
    "stCommand\030C \001(\01326.com.ea.eamobile.nfsmw."
    "protoc.ResponsePopupListCommand\022P\n\020fleet"
    "RaceCommand\030D \001(\01326.com.ea.eamobile.nfsm"
    "w.protoc.ResponseFleetRaceCommand\022R\n\021fle"
    "etStartCommand\030E \001(\01327.com.ea.eamobile.n"
    "fsmw.protoc.ResponseFleetStartCommand\022N\n"
    "\017fleetEndCommand\030F \001(\01325.com.ea.eamobile"
    ".nfsmw.protoc.ResponseFleetEndCommand\022T\n"
    "\022fleetDoubleCommand\030G \001(\01328.com.ea.eamob"
    "ile.nfsmw.protoc.ResponseFleetDoubleComm"
    "and\022T\n\022fixCarLimitCommand\030H \001(\01328.com.ea"
    ".eamobile.nfsmw.protoc.ResponseFixCarLim"
    "itCommand\"v\n\rLocalUserinfo\022\017\n\007snsFlag\030\001 "
    "\002(\005\022\017\n\007session\030\002 \001(\t\022\r\n\005token\030\003 \002(\t\022\021\n\ts"
    "erverUrl\030\004 \003(\t\022\024\n\014access_token\030\005 \001(\t\022\013\n\003"
    "uid\030\006 \001(\t", 34209);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Commands.proto", &protobuf_RegisterTypes);
  UserViewInfo::default_instance_ = new UserViewInfo();
  MissionInfo::default_instance_ = new MissionInfo();
  Reward::default_instance_ = new Reward();
  RewardN::default_instance_ = new RewardN();
  RewardList::default_instance_ = new RewardList();
  Prop::default_instance_ = new Prop();
  FleetRace::default_instance_ = new FleetRace();
  Leaderboard::default_instance_ = new Leaderboard();
  LeaderboardProfile::default_instance_ = new LeaderboardProfile();
  ModeInfo::default_instance_ = new ModeInfo();
  TrackInfo::default_instance_ = new TrackInfo();
  CheckPointInfo::default_instance_ = new CheckPointInfo();
  NewbieTierCheckList::default_instance_ = new NewbieTierCheckList();
  TierInfo::default_instance_ = new TierInfo();
  GPSInfo::default_instance_ = new GPSInfo();
  RequestResourceCommand::default_instance_ = new RequestResourceCommand();
  ResourceItemInfo::default_instance_ = new ResourceItemInfo();
  ResponseResourceCommand::default_instance_ = new ResponseResourceCommand();
  RequestTrackCommand::default_instance_ = new RequestTrackCommand();
  ResponseTrackCommand::default_instance_ = new ResponseTrackCommand();
  RequestUserInfoCommand::default_instance_ = new RequestUserInfoCommand();
  ResponseWeiboShareLocksCommand::default_instance_ = new ResponseWeiboShareLocksCommand();
  UserWeiboInfo::default_instance_ = new UserWeiboInfo();
  UserInfo::default_instance_ = new UserInfo();
  RequestModifyUserInfoCommand::default_instance_ = new RequestModifyUserInfoCommand();
  ResponseModifyUserInfoCommand::default_instance_ = new ResponseModifyUserInfoCommand();
  ResponseUserInfoCommand::default_instance_ = new ResponseUserInfoCommand();
  GhostInfo::default_instance_ = new GhostInfo();
  RacerInfo::default_instance_ = new RacerInfo();
  RequestModeInfoCommand::default_instance_ = new RequestModeInfoCommand();
  ResponseRacerForGhostCommand::default_instance_ = new ResponseRacerForGhostCommand();
  ResponseModeInfoCommand::default_instance_ = new ResponseModeInfoCommand();
  RequestRaceResultCommand::default_instance_ = new RequestRaceResultCommand();
  RPMessage::default_instance_ = new RPMessage();
  UnlockInfoMessage::default_instance_ = new UnlockInfoMessage();
  ResponseRaceResultCommand::default_instance_ = new ResponseRaceResultCommand();
  ResponseTournamentRaceResultCommand::default_instance_ = new ResponseTournamentRaceResultCommand();
  TournamentMessage::default_instance_ = new TournamentMessage();
  TournamentRankingListMessage::default_instance_ = new TournamentRankingListMessage();
  TournamentRewardListMessage::default_instance_ = new TournamentRewardListMessage();
  TournamentRewardDetailMessage::default_instance_ = new TournamentRewardDetailMessage();
  TournamentDetailMessage::default_instance_ = new TournamentDetailMessage();
  TournamentDetailRewardMessage::default_instance_ = new TournamentDetailRewardMessage();
  RequestTournamentCommand::default_instance_ = new RequestTournamentCommand();
  ResponseTournamentCommand::default_instance_ = new ResponseTournamentCommand();
  RequestTournamentRewardDetailCommand::default_instance_ = new RequestTournamentRewardDetailCommand();
  ResponseTournamentRewardDetailCommand::default_instance_ = new ResponseTournamentRewardDetailCommand();
  responseTournamentRewardCommand::default_instance_ = new responseTournamentRewardCommand();
  RequestTournamentSignUpCommand::default_instance_ = new RequestTournamentSignUpCommand();
  ResponseTournamentSignUpCommand::default_instance_ = new ResponseTournamentSignUpCommand();
  RequestTournamentDetailCommand::default_instance_ = new RequestTournamentDetailCommand();
  ResponseTournamentDetailCommand::default_instance_ = new ResponseTournamentDetailCommand();
  RequestGetRewardCommand::default_instance_ = new RequestGetRewardCommand();
  ResponseGetRewardCommand::default_instance_ = new ResponseGetRewardCommand();
  HeadInfo::default_instance_ = new HeadInfo();
  RequestRaceStartCommand::default_instance_ = new RequestRaceStartCommand();
  ResponseRaceStartCommand::default_instance_ = new ResponseRaceStartCommand();
  ResponseTournamentRaceStartCommand::default_instance_ = new ResponseTournamentRaceStartCommand();
  AccountInfo::default_instance_ = new AccountInfo();
  RequestBindingStartCommand::default_instance_ = new RequestBindingStartCommand();
  ResponseBindingStartCommand::default_instance_ = new ResponseBindingStartCommand();
  RequestBindingTokenCommand::default_instance_ = new RequestBindingTokenCommand();
  ResponseBindingTokenCommand::default_instance_ = new ResponseBindingTokenCommand();
  RequestBindingInfoCommand::default_instance_ = new RequestBindingInfoCommand();
  ResponseBindingInfoCommand::default_instance_ = new ResponseBindingInfoCommand();
  RequestBindingResultCommand::default_instance_ = new RequestBindingResultCommand();
  ResponseBindingResultCommand::default_instance_ = new ResponseBindingResultCommand();
  RequestBindingConfirmCommand::default_instance_ = new RequestBindingConfirmCommand();
  ResponseBindingConfirmCommand::default_instance_ = new ResponseBindingConfirmCommand();
  ResponseBindingPopupCommand::default_instance_ = new ResponseBindingPopupCommand();
  ErrorCommand::default_instance_ = new ErrorCommand();
  CarData::default_instance_ = new CarData();
  GotchaExpense::default_instance_ = new GotchaExpense();
  ChartletInfo::default_instance_ = new ChartletInfo();
  CarSlotInfo::default_instance_ = new CarSlotInfo();
  ConsumableData::default_instance_ = new ConsumableData();
  RequestGarageCommand::default_instance_ = new RequestGarageCommand();
  ResponseGarageCommand::default_instance_ = new ResponseGarageCommand();
  RequestBuyCarCommand::default_instance_ = new RequestBuyCarCommand();
  ResponseBuyCarCommand::default_instance_ = new ResponseBuyCarCommand();
  RequestCarDataCommand::default_instance_ = new RequestCarDataCommand();
  ResponseCarDataCommand::default_instance_ = new ResponseCarDataCommand();
  RequestUpgradeSlotCommand::default_instance_ = new RequestUpgradeSlotCommand();
  ResponseUpgradeSlotCommand::default_instance_ = new ResponseUpgradeSlotCommand();
  RequestUseChartletCommand::default_instance_ = new RequestUseChartletCommand();
  ResponseUseChartletCommand::default_instance_ = new ResponseUseChartletCommand();
  RequestChallengeMathInfoCommand::default_instance_ = new RequestChallengeMathInfoCommand();
  ResponseChallengeMatchInfoCommand::default_instance_ = new ResponseChallengeMatchInfoCommand();
  ResponseFeedCommand::default_instance_ = new ResponseFeedCommand();
  ItemMessage::default_instance_ = new ItemMessage();
  RequestStoreDetailCommand::default_instance_ = new RequestStoreDetailCommand();
  ResponseStoreDetailCommand::default_instance_ = new ResponseStoreDetailCommand();
  RequestBuyItemCommand::default_instance_ = new RequestBuyItemCommand();
  ResponseBuyItemCommand::default_instance_ = new ResponseBuyItemCommand();
  RequestSystemCommand::default_instance_ = new RequestSystemCommand();
  ResponseSystemCommand::default_instance_ = new ResponseSystemCommand();
  EventOptionMessage::default_instance_ = new EventOptionMessage();
  CashRewardMessage::default_instance_ = new CashRewardMessage();
  MedalPositionMessage::default_instance_ = new MedalPositionMessage();
  MedalScoreMessage::default_instance_ = new MedalScoreMessage();
  MedalTimeMessage::default_instance_ = new MedalTimeMessage();
  CountdownInitialTimeMessage::default_instance_ = new CountdownInitialTimeMessage();
  PenaltyTimeMessage::default_instance_ = new PenaltyTimeMessage();
  OpponentCollectionMessage::default_instance_ = new OpponentCollectionMessage();
  OpponentMessage::default_instance_ = new OpponentMessage();
  AiSettingsMessage::default_instance_ = new AiSettingsMessage();
  RaceEventMessage::default_instance_ = new RaceEventMessage();
  TrafficFlowMessage::default_instance_ = new TrafficFlowMessage();
  RaceTrafficCongestionMessage::default_instance_ = new RaceTrafficCongestionMessage();
  TrafficCarSpawnDescsMessage::default_instance_ = new TrafficCarSpawnDescsMessage();
  RequestRegistJaguarCommand::default_instance_ = new RequestRegistJaguarCommand();
  ResponseRegistJaguarCommand::default_instance_ = new ResponseRegistJaguarCommand();
  RequestRpLeaderboardCommand::default_instance_ = new RequestRpLeaderboardCommand();
  ResponseRpLeaderboardCommand::default_instance_ = new ResponseRpLeaderboardCommand();
  RpLeaderboardMessage::default_instance_ = new RpLeaderboardMessage();
  ProfileCarInfo::default_instance_ = new ProfileCarInfo();
  RequestProfileUserDataCommand::default_instance_ = new RequestProfileUserDataCommand();
  ResponseProfileUserDataCommand::default_instance_ = new ResponseProfileUserDataCommand();
  RequestProfileNextCarCommand::default_instance_ = new RequestProfileNextCarCommand();
  ResponseProfileNextCarCommand::default_instance_ = new ResponseProfileNextCarCommand();
  RequestProfileLikeCommand::default_instance_ = new RequestProfileLikeCommand();
  ResponseProfileLikeCommand::default_instance_ = new ResponseProfileLikeCommand();
  RequestProfileReportCommand::default_instance_ = new RequestProfileReportCommand();
  ResponseProfileReportCommand::default_instance_ = new ResponseProfileReportCommand();
  UserVSProfile::default_instance_ = new UserVSProfile();
  RequestProfileVSCommand::default_instance_ = new RequestProfileVSCommand();
  ResponseProfileVSCommand::default_instance_ = new ResponseProfileVSCommand();
  RequestRecordUserRaceActionCommand::default_instance_ = new RequestRecordUserRaceActionCommand();
  RequestQuickRaceCommand::default_instance_ = new RequestQuickRaceCommand();
  ResponseQuickRaceCommand::default_instance_ = new ResponseQuickRaceCommand();
  ResponseNotificationCommand::default_instance_ = new ResponseNotificationCommand();
  RequestGhostRecordCommand::default_instance_ = new RequestGhostRecordCommand();
  ResponseGhostRecordCommand::default_instance_ = new ResponseGhostRecordCommand();
  RequestIapCheckCommand::default_instance_ = new RequestIapCheckCommand();
  ResponseIapCheckCommand::default_instance_ = new ResponseIapCheckCommand();
  ResponseTournamentNotificationCommand::default_instance_ = new ResponseTournamentNotificationCommand();
  RequestTutorialRewardCommand::default_instance_ = new RequestTutorialRewardCommand();
  ResponseTutorialRewardCommand::default_instance_ = new ResponseTutorialRewardCommand();
  ResponsePopupCommand::default_instance_ = new ResponsePopupCommand();
  ResponsePopupListCommand::default_instance_ = new ResponsePopupListCommand();
  ResponseTournamentRewardNumCommand::default_instance_ = new ResponseTournamentRewardNumCommand();
  RequestGotchaCommand::default_instance_ = new RequestGotchaCommand();
  ResponseGotchaCommand::default_instance_ = new ResponseGotchaCommand();
  GotchaItemInfo::default_instance_ = new GotchaItemInfo();
  RequestCheatInfoCommand::default_instance_ = new RequestCheatInfoCommand();
  LeaderboardClass::default_instance_ = new LeaderboardClass();
  LeaderboardItem::default_instance_ = new LeaderboardItem();
  RequestLeaderboardClass::default_instance_ = new RequestLeaderboardClass();
  ResponseLeaderboardClass::default_instance_ = new ResponseLeaderboardClass();
  LeaderboardHeadInfo::default_instance_ = new LeaderboardHeadInfo();
  RequestLeaderboard::default_instance_ = new RequestLeaderboard();
  ResponseLeaderboard::default_instance_ = new ResponseLeaderboard();
  RequestTournamentNum::default_instance_ = new RequestTournamentNum();
  ResponseTournamentNum::default_instance_ = new ResponseTournamentNum();
  RequestCollectEnergyCommand::default_instance_ = new RequestCollectEnergyCommand();
  RequestEnergyTimeCommand::default_instance_ = new RequestEnergyTimeCommand();
  ResponseEnergyTimeCommand::default_instance_ = new ResponseEnergyTimeCommand();
  RequestFansRewardCommand::default_instance_ = new RequestFansRewardCommand();
  ResponseFansRewardTimeCommand::default_instance_ = new ResponseFansRewardTimeCommand();
  RequestPropPurchaseCommand::default_instance_ = new RequestPropPurchaseCommand();
  RequestMissionRewardCommand::default_instance_ = new RequestMissionRewardCommand();
  RequestMissionFinishCommand::default_instance_ = new RequestMissionFinishCommand();
  ResponseMissionListCommand::default_instance_ = new ResponseMissionListCommand();
  RequestLotteryCommand::default_instance_ = new RequestLotteryCommand();
  ResponseLotteryCommand::default_instance_ = new ResponseLotteryCommand();
  RequestFleetRaceCommand::default_instance_ = new RequestFleetRaceCommand();
  ResponseFleetRaceCommand::default_instance_ = new ResponseFleetRaceCommand();
  RequestFleetStartCommand::default_instance_ = new RequestFleetStartCommand();
  ResponseFleetStartCommand::default_instance_ = new ResponseFleetStartCommand();
  RequestFleetEndCommand::default_instance_ = new RequestFleetEndCommand();
  ResponseFleetEndCommand::default_instance_ = new ResponseFleetEndCommand();
  RequestFleetDoubleCommand::default_instance_ = new RequestFleetDoubleCommand();
  ResponseFleetDoubleCommand::default_instance_ = new ResponseFleetDoubleCommand();
  RequestFixCarLimitCommand::default_instance_ = new RequestFixCarLimitCommand();
  ResponseFixCarLimitCommand::default_instance_ = new ResponseFixCarLimitCommand();
  RequestCommand::default_instance_ = new RequestCommand();
  ResponseCommand::default_instance_ = new ResponseCommand();
  LocalUserinfo::default_instance_ = new LocalUserinfo();
  UserViewInfo::default_instance_->InitAsDefaultInstance();
  MissionInfo::default_instance_->InitAsDefaultInstance();
  Reward::default_instance_->InitAsDefaultInstance();
  RewardN::default_instance_->InitAsDefaultInstance();
  RewardList::default_instance_->InitAsDefaultInstance();
  Prop::default_instance_->InitAsDefaultInstance();
  FleetRace::default_instance_->InitAsDefaultInstance();
  Leaderboard::default_instance_->InitAsDefaultInstance();
  LeaderboardProfile::default_instance_->InitAsDefaultInstance();
  ModeInfo::default_instance_->InitAsDefaultInstance();
  TrackInfo::default_instance_->InitAsDefaultInstance();
  CheckPointInfo::default_instance_->InitAsDefaultInstance();
  NewbieTierCheckList::default_instance_->InitAsDefaultInstance();
  TierInfo::default_instance_->InitAsDefaultInstance();
  GPSInfo::default_instance_->InitAsDefaultInstance();
  RequestResourceCommand::default_instance_->InitAsDefaultInstance();
  ResourceItemInfo::default_instance_->InitAsDefaultInstance();
  ResponseResourceCommand::default_instance_->InitAsDefaultInstance();
  RequestTrackCommand::default_instance_->InitAsDefaultInstance();
  ResponseTrackCommand::default_instance_->InitAsDefaultInstance();
  RequestUserInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseWeiboShareLocksCommand::default_instance_->InitAsDefaultInstance();
  UserWeiboInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  RequestModifyUserInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseModifyUserInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseUserInfoCommand::default_instance_->InitAsDefaultInstance();
  GhostInfo::default_instance_->InitAsDefaultInstance();
  RacerInfo::default_instance_->InitAsDefaultInstance();
  RequestModeInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseRacerForGhostCommand::default_instance_->InitAsDefaultInstance();
  ResponseModeInfoCommand::default_instance_->InitAsDefaultInstance();
  RequestRaceResultCommand::default_instance_->InitAsDefaultInstance();
  RPMessage::default_instance_->InitAsDefaultInstance();
  UnlockInfoMessage::default_instance_->InitAsDefaultInstance();
  ResponseRaceResultCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentRaceResultCommand::default_instance_->InitAsDefaultInstance();
  TournamentMessage::default_instance_->InitAsDefaultInstance();
  TournamentRankingListMessage::default_instance_->InitAsDefaultInstance();
  TournamentRewardListMessage::default_instance_->InitAsDefaultInstance();
  TournamentRewardDetailMessage::default_instance_->InitAsDefaultInstance();
  TournamentDetailMessage::default_instance_->InitAsDefaultInstance();
  TournamentDetailRewardMessage::default_instance_->InitAsDefaultInstance();
  RequestTournamentCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentCommand::default_instance_->InitAsDefaultInstance();
  RequestTournamentRewardDetailCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentRewardDetailCommand::default_instance_->InitAsDefaultInstance();
  responseTournamentRewardCommand::default_instance_->InitAsDefaultInstance();
  RequestTournamentSignUpCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentSignUpCommand::default_instance_->InitAsDefaultInstance();
  RequestTournamentDetailCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentDetailCommand::default_instance_->InitAsDefaultInstance();
  RequestGetRewardCommand::default_instance_->InitAsDefaultInstance();
  ResponseGetRewardCommand::default_instance_->InitAsDefaultInstance();
  HeadInfo::default_instance_->InitAsDefaultInstance();
  RequestRaceStartCommand::default_instance_->InitAsDefaultInstance();
  ResponseRaceStartCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentRaceStartCommand::default_instance_->InitAsDefaultInstance();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  RequestBindingStartCommand::default_instance_->InitAsDefaultInstance();
  ResponseBindingStartCommand::default_instance_->InitAsDefaultInstance();
  RequestBindingTokenCommand::default_instance_->InitAsDefaultInstance();
  ResponseBindingTokenCommand::default_instance_->InitAsDefaultInstance();
  RequestBindingInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseBindingInfoCommand::default_instance_->InitAsDefaultInstance();
  RequestBindingResultCommand::default_instance_->InitAsDefaultInstance();
  ResponseBindingResultCommand::default_instance_->InitAsDefaultInstance();
  RequestBindingConfirmCommand::default_instance_->InitAsDefaultInstance();
  ResponseBindingConfirmCommand::default_instance_->InitAsDefaultInstance();
  ResponseBindingPopupCommand::default_instance_->InitAsDefaultInstance();
  ErrorCommand::default_instance_->InitAsDefaultInstance();
  CarData::default_instance_->InitAsDefaultInstance();
  GotchaExpense::default_instance_->InitAsDefaultInstance();
  ChartletInfo::default_instance_->InitAsDefaultInstance();
  CarSlotInfo::default_instance_->InitAsDefaultInstance();
  ConsumableData::default_instance_->InitAsDefaultInstance();
  RequestGarageCommand::default_instance_->InitAsDefaultInstance();
  ResponseGarageCommand::default_instance_->InitAsDefaultInstance();
  RequestBuyCarCommand::default_instance_->InitAsDefaultInstance();
  ResponseBuyCarCommand::default_instance_->InitAsDefaultInstance();
  RequestCarDataCommand::default_instance_->InitAsDefaultInstance();
  ResponseCarDataCommand::default_instance_->InitAsDefaultInstance();
  RequestUpgradeSlotCommand::default_instance_->InitAsDefaultInstance();
  ResponseUpgradeSlotCommand::default_instance_->InitAsDefaultInstance();
  RequestUseChartletCommand::default_instance_->InitAsDefaultInstance();
  ResponseUseChartletCommand::default_instance_->InitAsDefaultInstance();
  RequestChallengeMathInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseChallengeMatchInfoCommand::default_instance_->InitAsDefaultInstance();
  ResponseFeedCommand::default_instance_->InitAsDefaultInstance();
  ItemMessage::default_instance_->InitAsDefaultInstance();
  RequestStoreDetailCommand::default_instance_->InitAsDefaultInstance();
  ResponseStoreDetailCommand::default_instance_->InitAsDefaultInstance();
  RequestBuyItemCommand::default_instance_->InitAsDefaultInstance();
  ResponseBuyItemCommand::default_instance_->InitAsDefaultInstance();
  RequestSystemCommand::default_instance_->InitAsDefaultInstance();
  ResponseSystemCommand::default_instance_->InitAsDefaultInstance();
  EventOptionMessage::default_instance_->InitAsDefaultInstance();
  CashRewardMessage::default_instance_->InitAsDefaultInstance();
  MedalPositionMessage::default_instance_->InitAsDefaultInstance();
  MedalScoreMessage::default_instance_->InitAsDefaultInstance();
  MedalTimeMessage::default_instance_->InitAsDefaultInstance();
  CountdownInitialTimeMessage::default_instance_->InitAsDefaultInstance();
  PenaltyTimeMessage::default_instance_->InitAsDefaultInstance();
  OpponentCollectionMessage::default_instance_->InitAsDefaultInstance();
  OpponentMessage::default_instance_->InitAsDefaultInstance();
  AiSettingsMessage::default_instance_->InitAsDefaultInstance();
  RaceEventMessage::default_instance_->InitAsDefaultInstance();
  TrafficFlowMessage::default_instance_->InitAsDefaultInstance();
  RaceTrafficCongestionMessage::default_instance_->InitAsDefaultInstance();
  TrafficCarSpawnDescsMessage::default_instance_->InitAsDefaultInstance();
  RequestRegistJaguarCommand::default_instance_->InitAsDefaultInstance();
  ResponseRegistJaguarCommand::default_instance_->InitAsDefaultInstance();
  RequestRpLeaderboardCommand::default_instance_->InitAsDefaultInstance();
  ResponseRpLeaderboardCommand::default_instance_->InitAsDefaultInstance();
  RpLeaderboardMessage::default_instance_->InitAsDefaultInstance();
  ProfileCarInfo::default_instance_->InitAsDefaultInstance();
  RequestProfileUserDataCommand::default_instance_->InitAsDefaultInstance();
  ResponseProfileUserDataCommand::default_instance_->InitAsDefaultInstance();
  RequestProfileNextCarCommand::default_instance_->InitAsDefaultInstance();
  ResponseProfileNextCarCommand::default_instance_->InitAsDefaultInstance();
  RequestProfileLikeCommand::default_instance_->InitAsDefaultInstance();
  ResponseProfileLikeCommand::default_instance_->InitAsDefaultInstance();
  RequestProfileReportCommand::default_instance_->InitAsDefaultInstance();
  ResponseProfileReportCommand::default_instance_->InitAsDefaultInstance();
  UserVSProfile::default_instance_->InitAsDefaultInstance();
  RequestProfileVSCommand::default_instance_->InitAsDefaultInstance();
  ResponseProfileVSCommand::default_instance_->InitAsDefaultInstance();
  RequestRecordUserRaceActionCommand::default_instance_->InitAsDefaultInstance();
  RequestQuickRaceCommand::default_instance_->InitAsDefaultInstance();
  ResponseQuickRaceCommand::default_instance_->InitAsDefaultInstance();
  ResponseNotificationCommand::default_instance_->InitAsDefaultInstance();
  RequestGhostRecordCommand::default_instance_->InitAsDefaultInstance();
  ResponseGhostRecordCommand::default_instance_->InitAsDefaultInstance();
  RequestIapCheckCommand::default_instance_->InitAsDefaultInstance();
  ResponseIapCheckCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentNotificationCommand::default_instance_->InitAsDefaultInstance();
  RequestTutorialRewardCommand::default_instance_->InitAsDefaultInstance();
  ResponseTutorialRewardCommand::default_instance_->InitAsDefaultInstance();
  ResponsePopupCommand::default_instance_->InitAsDefaultInstance();
  ResponsePopupListCommand::default_instance_->InitAsDefaultInstance();
  ResponseTournamentRewardNumCommand::default_instance_->InitAsDefaultInstance();
  RequestGotchaCommand::default_instance_->InitAsDefaultInstance();
  ResponseGotchaCommand::default_instance_->InitAsDefaultInstance();
  GotchaItemInfo::default_instance_->InitAsDefaultInstance();
  RequestCheatInfoCommand::default_instance_->InitAsDefaultInstance();
  LeaderboardClass::default_instance_->InitAsDefaultInstance();
  LeaderboardItem::default_instance_->InitAsDefaultInstance();
  RequestLeaderboardClass::default_instance_->InitAsDefaultInstance();
  ResponseLeaderboardClass::default_instance_->InitAsDefaultInstance();
  LeaderboardHeadInfo::default_instance_->InitAsDefaultInstance();
  RequestLeaderboard::default_instance_->InitAsDefaultInstance();
  ResponseLeaderboard::default_instance_->InitAsDefaultInstance();
  RequestTournamentNum::default_instance_->InitAsDefaultInstance();
  ResponseTournamentNum::default_instance_->InitAsDefaultInstance();
  RequestCollectEnergyCommand::default_instance_->InitAsDefaultInstance();
  RequestEnergyTimeCommand::default_instance_->InitAsDefaultInstance();
  ResponseEnergyTimeCommand::default_instance_->InitAsDefaultInstance();
  RequestFansRewardCommand::default_instance_->InitAsDefaultInstance();
  ResponseFansRewardTimeCommand::default_instance_->InitAsDefaultInstance();
  RequestPropPurchaseCommand::default_instance_->InitAsDefaultInstance();
  RequestMissionRewardCommand::default_instance_->InitAsDefaultInstance();
  RequestMissionFinishCommand::default_instance_->InitAsDefaultInstance();
  ResponseMissionListCommand::default_instance_->InitAsDefaultInstance();
  RequestLotteryCommand::default_instance_->InitAsDefaultInstance();
  ResponseLotteryCommand::default_instance_->InitAsDefaultInstance();
  RequestFleetRaceCommand::default_instance_->InitAsDefaultInstance();
  ResponseFleetRaceCommand::default_instance_->InitAsDefaultInstance();
  RequestFleetStartCommand::default_instance_->InitAsDefaultInstance();
  ResponseFleetStartCommand::default_instance_->InitAsDefaultInstance();
  RequestFleetEndCommand::default_instance_->InitAsDefaultInstance();
  ResponseFleetEndCommand::default_instance_->InitAsDefaultInstance();
  RequestFleetDoubleCommand::default_instance_->InitAsDefaultInstance();
  ResponseFleetDoubleCommand::default_instance_->InitAsDefaultInstance();
  RequestFixCarLimitCommand::default_instance_->InitAsDefaultInstance();
  ResponseFixCarLimitCommand::default_instance_->InitAsDefaultInstance();
  RequestCommand::default_instance_->InitAsDefaultInstance();
  ResponseCommand::default_instance_->InitAsDefaultInstance();
  LocalUserinfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Commands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Commands_2eproto {
  StaticDescriptorInitializer_Commands_2eproto() {
    protobuf_AddDesc_Commands_2eproto();
  }
} static_descriptor_initializer_Commands_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UserViewInfo::kUserIdFieldNumber;
const int UserViewInfo::kHeadUrlFieldNumber;
const int UserViewInfo::kNameFieldNumber;
const int UserViewInfo::kEmailFieldNumber;
const int UserViewInfo::kMobileFieldNumber;
const int UserViewInfo::kStatusFieldNumber;
const int UserViewInfo::kMoneyFieldNumber;
const int UserViewInfo::kCreateTimeFieldNumber;
const int UserViewInfo::kLoginTimeFieldNumber;
const int UserViewInfo::kIsNameChangedFieldNumber;
#endif  // !_MSC_VER

UserViewInfo::UserViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserViewInfo::InitAsDefaultInstance() {
}

UserViewInfo::UserViewInfo(const UserViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserViewInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  money_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  logintime_ = GOOGLE_LONGLONG(0);
  isnamechanged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserViewInfo::~UserViewInfo() {
  SharedDtor();
}

void UserViewInfo::SharedDtor() {
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (this != default_instance_) {
  }
}

void UserViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserViewInfo_descriptor_;
}

const UserViewInfo& UserViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

UserViewInfo* UserViewInfo::default_instance_ = NULL;

UserViewInfo* UserViewInfo::New() const {
  return new UserViewInfo;
}

void UserViewInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
    status_ = 0;
    money_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logintime_ = GOOGLE_LONGLONG(0);
    isnamechanged_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headUrl;
        break;
      }
      
      // required string headUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }
      
      // required string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mobile;
        break;
      }
      
      // required string mobile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile().data(), this->mobile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // required int32 status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }
      
      // required int32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_createTime;
        break;
      }
      
      // required int64 createTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_loginTime;
        break;
      }
      
      // required int64 loginTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isNameChanged;
        break;
      }
      
      // optional bool isNameChanged = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNameChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnamechanged_)));
          set_has_isnamechanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }
  
  // required string headUrl = 2;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->headurl(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }
  
  // required string mobile = 5;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->mobile(), output);
  }
  
  // required int32 status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }
  
  // required int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }
  
  // required int64 createTime = 8;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->createtime(), output);
  }
  
  // required int64 loginTime = 9;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->logintime(), output);
  }
  
  // optional bool isNameChanged = 10;
  if (has_isnamechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isnamechanged(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }
  
  // required string headUrl = 2;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headurl(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }
  
  // required string mobile = 5;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile().data(), this->mobile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mobile(), target);
  }
  
  // required int32 status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }
  
  // required int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }
  
  // required int64 createTime = 8;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->createtime(), target);
  }
  
  // required int64 loginTime = 9;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->logintime(), target);
  }
  
  // optional bool isNameChanged = 10;
  if (has_isnamechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isnamechanged(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserViewInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // required string headUrl = 2;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // required string mobile = 5;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }
    
    // required int32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // required int64 createTime = 8;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 loginTime = 9;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }
    
    // optional bool isNameChanged = 10;
    if (has_isnamechanged()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserViewInfo::MergeFrom(const UserViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_isnamechanged()) {
      set_isnamechanged(from.isnamechanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserViewInfo::CopyFrom(const UserViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserViewInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void UserViewInfo::Swap(UserViewInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(headurl_, other->headurl_);
    std::swap(name_, other->name_);
    std::swap(email_, other->email_);
    std::swap(mobile_, other->mobile_);
    std::swap(status_, other->status_);
    std::swap(money_, other->money_);
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(isnamechanged_, other->isnamechanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserViewInfo_descriptor_;
  metadata.reflection = UserViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionInfo::kIdFieldNumber;
const int MissionInfo::kNameFieldNumber;
const int MissionInfo::kDesFieldNumber;
const int MissionInfo::kRewardCountFieldNumber;
#endif  // !_MSC_VER

MissionInfo::MissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionInfo::InitAsDefaultInstance() {
}

MissionInfo::MissionInfo(const MissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionInfo::~MissionInfo() {
  SharedDtor();
}

void MissionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void MissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionInfo_descriptor_;
}

const MissionInfo& MissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

MissionInfo* MissionInfo::default_instance_ = NULL;

MissionInfo* MissionInfo::New() const {
  return new MissionInfo;
}

void MissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  rewardcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_des;
        break;
      }
      
      // optional string des = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardCount;
        break;
      }
      
      // repeated int32 rewardCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_rewardcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->des(), output);
  }
  
  // repeated int32 rewardCount = 4;
  for (int i = 0; i < this->rewardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->rewardcount(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->des(), target);
  }
  
  // repeated int32 rewardCount = 4;
  for (int i = 0; i < this->rewardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->rewardcount(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string des = 3;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }
    
  }
  // repeated int32 rewardCount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardcount(i));
    }
    total_size += 1 * this->rewardcount_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardcount_.MergeFrom(from.rewardcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MissionInfo::Swap(MissionInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(des_, other->des_);
    rewardcount_.Swap(&other->rewardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionInfo_descriptor_;
  metadata.reflection = MissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reward::kRmbFieldNumber;
const int Reward::kMoneyFieldNumber;
const int Reward::kRpNumFieldNumber;
const int Reward::kMostwantedNumFieldNumber;
const int Reward::kFinishRatioFieldNumber;
const int Reward::kDisplayStringsFieldNumber;
#endif  // !_MSC_VER

Reward::Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reward::InitAsDefaultInstance() {
}

Reward::Reward(const Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reward::SharedCtor() {
  _cached_size_ = 0;
  rmb_ = 0;
  money_ = 0;
  rpnum_ = 0;
  mostwantednum_ = 0;
  finishratio_ = 0;
  displaystrings_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reward::~Reward() {
  SharedDtor();
}

void Reward::SharedDtor() {
  if (displaystrings_ != &::google::protobuf::internal::kEmptyString) {
    delete displaystrings_;
  }
  if (this != default_instance_) {
  }
}

void Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reward_descriptor_;
}

const Reward& Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

Reward* Reward::default_instance_ = NULL;

Reward* Reward::New() const {
  return new Reward;
}

void Reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rmb_ = 0;
    money_ = 0;
    rpnum_ = 0;
    mostwantednum_ = 0;
    finishratio_ = 0;
    if (has_displaystrings()) {
      if (displaystrings_ != &::google::protobuf::internal::kEmptyString) {
        displaystrings_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rmb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }
      
      // optional int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rpNum;
        break;
      }
      
      // optional int32 rpNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpnum_)));
          set_has_rpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mostwantedNum;
        break;
      }
      
      // optional int32 mostwantedNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mostwantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mostwantednum_)));
          set_has_mostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finishRatio;
        break;
      }
      
      // optional int32 finishRatio = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finishratio_)));
          set_has_finishratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_displayStrings;
        break;
      }
      
      // optional string displayStrings = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayStrings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displaystrings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displaystrings().data(), this->displaystrings().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rmb = 1;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rmb(), output);
  }
  
  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }
  
  // optional int32 rpNum = 3;
  if (has_rpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rpnum(), output);
  }
  
  // optional int32 mostwantedNum = 4;
  if (has_mostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mostwantednum(), output);
  }
  
  // optional int32 finishRatio = 5;
  if (has_finishratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->finishratio(), output);
  }
  
  // optional string displayStrings = 6;
  if (has_displaystrings()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displaystrings().data(), this->displaystrings().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->displaystrings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rmb = 1;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rmb(), target);
  }
  
  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }
  
  // optional int32 rpNum = 3;
  if (has_rpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rpnum(), target);
  }
  
  // optional int32 mostwantedNum = 4;
  if (has_mostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mostwantednum(), target);
  }
  
  // optional int32 finishRatio = 5;
  if (has_finishratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->finishratio(), target);
  }
  
  // optional string displayStrings = 6;
  if (has_displaystrings()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displaystrings().data(), this->displaystrings().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->displaystrings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reward::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rmb = 1;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }
    
    // optional int32 rpNum = 3;
    if (has_rpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpnum());
    }
    
    // optional int32 mostwantedNum = 4;
    if (has_mostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mostwantednum());
    }
    
    // optional int32 finishRatio = 5;
    if (has_finishratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishratio());
    }
    
    // optional string displayStrings = 6;
    if (has_displaystrings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displaystrings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rpnum()) {
      set_rpnum(from.rpnum());
    }
    if (from.has_mostwantednum()) {
      set_mostwantednum(from.mostwantednum());
    }
    if (from.has_finishratio()) {
      set_finishratio(from.finishratio());
    }
    if (from.has_displaystrings()) {
      set_displaystrings(from.displaystrings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  
  return true;
}

void Reward::Swap(Reward* other) {
  if (other != this) {
    std::swap(rmb_, other->rmb_);
    std::swap(money_, other->money_);
    std::swap(rpnum_, other->rpnum_);
    std::swap(mostwantednum_, other->mostwantednum_);
    std::swap(finishratio_, other->finishratio_);
    std::swap(displaystrings_, other->displaystrings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reward_descriptor_;
  metadata.reflection = Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardN::kIdFieldNumber;
const int RewardN::kCountFieldNumber;
#endif  // !_MSC_VER

RewardN::RewardN()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardN::InitAsDefaultInstance() {
}

RewardN::RewardN(const RewardN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardN::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardN::~RewardN() {
  SharedDtor();
}

void RewardN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardN_descriptor_;
}

const RewardN& RewardN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RewardN* RewardN::default_instance_ = NULL;

RewardN* RewardN::New() const {
  return new RewardN;
}

void RewardN::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardN::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardN::MergeFrom(const RewardN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardN::CopyFrom(const RewardN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardN::IsInitialized() const {
  
  return true;
}

void RewardN::Swap(RewardN* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardN_descriptor_;
  metadata.reflection = RewardN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardList::kRewardsFieldNumber;
#endif  // !_MSC_VER

RewardList::RewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardList::InitAsDefaultInstance() {
}

RewardList::RewardList(const RewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardList::~RewardList() {
  SharedDtor();
}

void RewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardList_descriptor_;
}

const RewardList& RewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RewardList* RewardList::default_instance_ = NULL;

RewardList* RewardList::New() const {
  return new RewardList;
}

void RewardList::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.RewardN rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardN rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardN rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardList::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardN rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardList::MergeFrom(const RewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardList::CopyFrom(const RewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardList::IsInitialized() const {
  
  return true;
}

void RewardList::Swap(RewardList* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardList_descriptor_;
  metadata.reflection = RewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Prop::kIdFieldNumber;
const int Prop::kCountFieldNumber;
#endif  // !_MSC_VER

Prop::Prop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Prop::InitAsDefaultInstance() {
}

Prop::Prop(const Prop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Prop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Prop::~Prop() {
  SharedDtor();
}

void Prop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Prop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Prop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Prop_descriptor_;
}

const Prop& Prop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

Prop* Prop::default_instance_ = NULL;

Prop* Prop::New() const {
  return new Prop;
}

void Prop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Prop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Prop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Prop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Prop::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Prop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Prop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Prop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Prop::MergeFrom(const Prop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Prop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prop::CopyFrom(const Prop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prop::IsInitialized() const {
  
  return true;
}

void Prop::Swap(Prop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Prop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Prop_descriptor_;
  metadata.reflection = Prop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FleetRace::kIdFieldNumber;
const int FleetRace::kTypeFieldNumber;
const int FleetRace::kNameFieldNumber;
const int FleetRace::kCaridFieldNumber;
const int FleetRace::kTimeFieldNumber;
const int FleetRace::kPointsFieldNumber;
const int FleetRace::kLimitCostFieldNumber;
const int FleetRace::kEnergyCostFieldNumber;
const int FleetRace::kRewardsFieldNumber;
const int FleetRace::kCountFieldNumber;
const int FleetRace::kStateFieldNumber;
const int FleetRace::kTierFieldNumber;
const int FleetRace::kCartypeFieldNumber;
const int FleetRace::kRamainTimeFieldNumber;
#endif  // !_MSC_VER

FleetRace::FleetRace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FleetRace::InitAsDefaultInstance() {
}

FleetRace::FleetRace(const FleetRace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FleetRace::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  name_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  points_ = 0;
  limitcost_ = 0;
  energycost_ = 0;
  count_ = 0;
  state_ = 0;
  tier_ = 0;
  cartype_ = 0;
  ramaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FleetRace::~FleetRace() {
  SharedDtor();
}

void FleetRace::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void FleetRace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FleetRace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FleetRace_descriptor_;
}

const FleetRace& FleetRace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

FleetRace* FleetRace::default_instance_ = NULL;

FleetRace* FleetRace::New() const {
  return new FleetRace;
}

void FleetRace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    name_ = 0;
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    time_ = 0;
    points_ = 0;
    limitcost_ = 0;
    energycost_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    count_ = 0;
    state_ = 0;
    tier_ = 0;
    cartype_ = 0;
    ramaintime_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FleetRace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_name;
        break;
      }
      
      // required int32 name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_carid;
        break;
      }
      
      // required string carid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }
      
      // required int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_points;
        break;
      }
      
      // required int32 points = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_limitCost;
        break;
      }
      
      // required int32 limitCost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitcost_)));
          set_has_limitcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_energyCost;
        break;
      }
      
      // required int32 energyCost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energycost_)));
          set_has_energycost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rewards;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rewards;
        if (input->ExpectTag(80)) goto parse_count;
        break;
      }
      
      // required int32 count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_state;
        break;
      }
      
      // required int32 state = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tier;
        break;
      }
      
      // required int32 tier = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cartype;
        break;
      }
      
      // required int32 cartype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cartype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cartype_)));
          set_has_cartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ramainTime;
        break;
      }
      
      // required int32 ramainTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ramainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ramaintime_)));
          set_has_ramaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FleetRace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int32 name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->name(), output);
  }
  
  // required string carid = 4;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->carid(), output);
  }
  
  // required int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }
  
  // required int32 points = 6;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->points(), output);
  }
  
  // required int32 limitCost = 7;
  if (has_limitcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limitcost(), output);
  }
  
  // required int32 energyCost = 8;
  if (has_energycost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->energycost(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 9;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rewards(i), output);
  }
  
  // required int32 count = 10;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->count(), output);
  }
  
  // required int32 state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->state(), output);
  }
  
  // required int32 tier = 12;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tier(), output);
  }
  
  // required int32 cartype = 13;
  if (has_cartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cartype(), output);
  }
  
  // required int32 ramainTime = 14;
  if (has_ramaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ramaintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FleetRace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int32 name = 3;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->name(), target);
  }
  
  // required string carid = 4;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->carid(), target);
  }
  
  // required int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }
  
  // required int32 points = 6;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->points(), target);
  }
  
  // required int32 limitCost = 7;
  if (has_limitcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limitcost(), target);
  }
  
  // required int32 energyCost = 8;
  if (has_energycost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->energycost(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 9;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rewards(i), target);
  }
  
  // required int32 count = 10;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->count(), target);
  }
  
  // required int32 state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->state(), target);
  }
  
  // required int32 tier = 12;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tier(), target);
  }
  
  // required int32 cartype = 13;
  if (has_cartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cartype(), target);
  }
  
  // required int32 ramainTime = 14;
  if (has_ramaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ramaintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FleetRace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
    // required string carid = 4;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 points = 6;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->points());
    }
    
    // required int32 limitCost = 7;
    if (has_limitcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitcost());
    }
    
    // required int32 energyCost = 8;
    if (has_energycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energycost());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 count = 10;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // required int32 state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // required int32 tier = 12;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }
    
    // required int32 cartype = 13;
    if (has_cartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cartype());
    }
    
    // required int32 ramainTime = 14;
    if (has_ramaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ramaintime());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 9;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FleetRace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FleetRace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FleetRace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FleetRace::MergeFrom(const FleetRace& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_limitcost()) {
      set_limitcost(from.limitcost());
    }
    if (from.has_energycost()) {
      set_energycost(from.energycost());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_cartype()) {
      set_cartype(from.cartype());
    }
    if (from.has_ramaintime()) {
      set_ramaintime(from.ramaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FleetRace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FleetRace::CopyFrom(const FleetRace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FleetRace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003eff) != 0x00003eff) return false;
  
  return true;
}

void FleetRace::Swap(FleetRace* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(carid_, other->carid_);
    std::swap(time_, other->time_);
    std::swap(points_, other->points_);
    std::swap(limitcost_, other->limitcost_);
    std::swap(energycost_, other->energycost_);
    rewards_.Swap(&other->rewards_);
    std::swap(count_, other->count_);
    std::swap(state_, other->state_);
    std::swap(tier_, other->tier_);
    std::swap(cartype_, other->cartype_);
    std::swap(ramaintime_, other->ramaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FleetRace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FleetRace_descriptor_;
  metadata.reflection = FleetRace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Leaderboard::kNameFieldNumber;
const int Leaderboard::kRaceResultFieldNumber;
const int Leaderboard::kHeadIndexFieldNumber;
const int Leaderboard::kHeadUrlFieldNumber;
const int Leaderboard::kRankFieldNumber;
const int Leaderboard::kIsMyselfFieldNumber;
const int Leaderboard::kUserIdFieldNumber;
#endif  // !_MSC_VER

Leaderboard::Leaderboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Leaderboard::InitAsDefaultInstance() {
}

Leaderboard::Leaderboard(const Leaderboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Leaderboard::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raceresult_ = 0;
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  ismyself_ = false;
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Leaderboard::~Leaderboard() {
  SharedDtor();
}

void Leaderboard::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
  }
}

void Leaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Leaderboard_descriptor_;
}

const Leaderboard& Leaderboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

Leaderboard* Leaderboard::default_instance_ = NULL;

Leaderboard* Leaderboard::New() const {
  return new Leaderboard;
}

void Leaderboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    raceresult_ = 0;
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    rank_ = 0;
    ismyself_ = false;
    userid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Leaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_raceResult;
        break;
      }
      
      // required float raceResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_raceResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raceresult_)));
          set_has_raceresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headIndex;
        break;
      }
      
      // optional int32 headIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isMyself;
        break;
      }
      
      // optional bool isMyself = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMyself:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismyself_)));
          set_has_ismyself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_userId;
        break;
      }
      
      // optional int64 userId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Leaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required float raceResult = 2;
  if (has_raceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->raceresult(), output);
  }
  
  // optional int32 headIndex = 3;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headindex(), output);
  }
  
  // optional string headUrl = 4;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->headurl(), output);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }
  
  // optional bool isMyself = 6;
  if (has_ismyself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ismyself(), output);
  }
  
  // optional int64 userId = 7;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Leaderboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required float raceResult = 2;
  if (has_raceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->raceresult(), target);
  }
  
  // optional int32 headIndex = 3;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headindex(), target);
  }
  
  // optional string headUrl = 4;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->headurl(), target);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }
  
  // optional bool isMyself = 6;
  if (has_ismyself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ismyself(), target);
  }
  
  // optional int64 userId = 7;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Leaderboard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float raceResult = 2;
    if (has_raceresult()) {
      total_size += 1 + 4;
    }
    
    // optional int32 headIndex = 3;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 4;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional bool isMyself = 6;
    if (has_ismyself()) {
      total_size += 1 + 1;
    }
    
    // optional int64 userId = 7;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaderboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Leaderboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Leaderboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Leaderboard::MergeFrom(const Leaderboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_raceresult()) {
      set_raceresult(from.raceresult());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_ismyself()) {
      set_ismyself(from.ismyself());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Leaderboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaderboard::CopyFrom(const Leaderboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaderboard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Leaderboard::Swap(Leaderboard* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(raceresult_, other->raceresult_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(rank_, other->rank_);
    std::swap(ismyself_, other->ismyself_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Leaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Leaderboard_descriptor_;
  metadata.reflection = Leaderboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderboardProfile::kNameFieldNumber;
const int LeaderboardProfile::kRaceResultFieldNumber;
const int LeaderboardProfile::kHeadIndexFieldNumber;
const int LeaderboardProfile::kHeadUrlFieldNumber;
const int LeaderboardProfile::kRankFieldNumber;
const int LeaderboardProfile::kIsMyselfFieldNumber;
const int LeaderboardProfile::kCarIDFieldNumber;
const int LeaderboardProfile::kCarColorIndexFieldNumber;
const int LeaderboardProfile::kCarModTypeFieldNumber;
const int LeaderboardProfile::kCarModValueFieldNumber;
const int LeaderboardProfile::kCarScoreFieldNumber;
const int LeaderboardProfile::kCarModIdFieldNumber;
const int LeaderboardProfile::kCarModLevelFieldNumber;
const int LeaderboardProfile::kUseridFieldNumber;
#endif  // !_MSC_VER

LeaderboardProfile::LeaderboardProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderboardProfile::InitAsDefaultInstance() {
}

LeaderboardProfile::LeaderboardProfile(const LeaderboardProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderboardProfile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raceresult_ = 0;
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  ismyself_ = false;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carcolorindex_ = 0;
  carscore_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderboardProfile::~LeaderboardProfile() {
  SharedDtor();
}

void LeaderboardProfile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void LeaderboardProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderboardProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardProfile_descriptor_;
}

const LeaderboardProfile& LeaderboardProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

LeaderboardProfile* LeaderboardProfile::default_instance_ = NULL;

LeaderboardProfile* LeaderboardProfile::New() const {
  return new LeaderboardProfile;
}

void LeaderboardProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    raceresult_ = 0;
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    rank_ = 0;
    ismyself_ = false;
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    carcolorindex_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    carscore_ = 0;
    userid_ = GOOGLE_LONGLONG(0);
  }
  carmodtype_.Clear();
  carmodvalue_.Clear();
  carmodid_.Clear();
  carmodlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderboardProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_raceResult;
        break;
      }
      
      // required float raceResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_raceResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &raceresult_)));
          set_has_raceresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headIndex;
        break;
      }
      
      // optional int32 headIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }
      
      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isMyself;
        break;
      }
      
      // optional bool isMyself = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMyself:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismyself_)));
          set_has_ismyself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_carID;
        break;
      }
      
      // optional string carID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_carColorIndex;
        break;
      }
      
      // optional int32 carColorIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carColorIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carcolorindex_)));
          set_has_carcolorindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carModType;
        break;
      }
      
      // repeated int32 carModType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_carmodtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carModType;
        if (input->ExpectTag(85)) goto parse_carModValue;
        break;
      }
      
      // repeated float carModValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carModValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85, input, this->mutable_carmodvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_carmodvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_carModValue;
        if (input->ExpectTag(88)) goto parse_carScore;
        break;
      }
      
      // optional int32 carScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carscore_)));
          set_has_carscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_carModId;
        break;
      }
      
      // repeated int32 carModId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_carmodid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_carModId;
        if (input->ExpectTag(104)) goto parse_carModLevel;
        break;
      }
      
      // repeated int32 carModLevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_carmodlevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodlevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_carModLevel;
        if (input->ExpectTag(112)) goto parse_userid;
        break;
      }
      
      // optional int64 userid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderboardProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required float raceResult = 2;
  if (has_raceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->raceresult(), output);
  }
  
  // optional int32 headIndex = 3;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headindex(), output);
  }
  
  // optional string headUrl = 4;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->headurl(), output);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }
  
  // optional bool isMyself = 6;
  if (has_ismyself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ismyself(), output);
  }
  
  // optional string carID = 7;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->carid(), output);
  }
  
  // optional int32 carColorIndex = 8;
  if (has_carcolorindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->carcolorindex(), output);
  }
  
  // repeated int32 carModType = 9;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->carmodtype(i), output);
  }
  
  // repeated float carModValue = 10;
  for (int i = 0; i < this->carmodvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->carmodvalue(i), output);
  }
  
  // optional int32 carScore = 11;
  if (has_carscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->carscore(), output);
  }
  
  // repeated int32 carModId = 12;
  for (int i = 0; i < this->carmodid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->carmodid(i), output);
  }
  
  // repeated int32 carModLevel = 13;
  for (int i = 0; i < this->carmodlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->carmodlevel(i), output);
  }
  
  // optional int64 userid = 14;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderboardProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required float raceResult = 2;
  if (has_raceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->raceresult(), target);
  }
  
  // optional int32 headIndex = 3;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headindex(), target);
  }
  
  // optional string headUrl = 4;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->headurl(), target);
  }
  
  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }
  
  // optional bool isMyself = 6;
  if (has_ismyself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ismyself(), target);
  }
  
  // optional string carID = 7;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->carid(), target);
  }
  
  // optional int32 carColorIndex = 8;
  if (has_carcolorindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->carcolorindex(), target);
  }
  
  // repeated int32 carModType = 9;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->carmodtype(i), target);
  }
  
  // repeated float carModValue = 10;
  for (int i = 0; i < this->carmodvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(10, this->carmodvalue(i), target);
  }
  
  // optional int32 carScore = 11;
  if (has_carscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->carscore(), target);
  }
  
  // repeated int32 carModId = 12;
  for (int i = 0; i < this->carmodid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->carmodid(i), target);
  }
  
  // repeated int32 carModLevel = 13;
  for (int i = 0; i < this->carmodlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->carmodlevel(i), target);
  }
  
  // optional int64 userid = 14;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderboardProfile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float raceResult = 2;
    if (has_raceresult()) {
      total_size += 1 + 4;
    }
    
    // optional int32 headIndex = 3;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 4;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional bool isMyself = 6;
    if (has_ismyself()) {
      total_size += 1 + 1;
    }
    
    // optional string carID = 7;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // optional int32 carColorIndex = 8;
    if (has_carcolorindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carcolorindex());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 carScore = 11;
    if (has_carscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carscore());
    }
    
    // optional int64 userid = 14;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
  }
  // repeated int32 carModType = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodtype(i));
    }
    total_size += 1 * this->carmodtype_size() + data_size;
  }
  
  // repeated float carModValue = 10;
  {
    int data_size = 0;
    data_size = 4 * this->carmodvalue_size();
    total_size += 1 * this->carmodvalue_size() + data_size;
  }
  
  // repeated int32 carModId = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodid(i));
    }
    total_size += 1 * this->carmodid_size() + data_size;
  }
  
  // repeated int32 carModLevel = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodlevel(i));
    }
    total_size += 1 * this->carmodlevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderboardProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderboardProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderboardProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderboardProfile::MergeFrom(const LeaderboardProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  carmodtype_.MergeFrom(from.carmodtype_);
  carmodvalue_.MergeFrom(from.carmodvalue_);
  carmodid_.MergeFrom(from.carmodid_);
  carmodlevel_.MergeFrom(from.carmodlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_raceresult()) {
      set_raceresult(from.raceresult());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_ismyself()) {
      set_ismyself(from.ismyself());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_carcolorindex()) {
      set_carcolorindex(from.carcolorindex());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_carscore()) {
      set_carscore(from.carscore());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderboardProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardProfile::CopyFrom(const LeaderboardProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LeaderboardProfile::Swap(LeaderboardProfile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(raceresult_, other->raceresult_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(rank_, other->rank_);
    std::swap(ismyself_, other->ismyself_);
    std::swap(carid_, other->carid_);
    std::swap(carcolorindex_, other->carcolorindex_);
    carmodtype_.Swap(&other->carmodtype_);
    carmodvalue_.Swap(&other->carmodvalue_);
    std::swap(carscore_, other->carscore_);
    carmodid_.Swap(&other->carmodid_);
    carmodlevel_.Swap(&other->carmodlevel_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderboardProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderboardProfile_descriptor_;
  metadata.reflection = LeaderboardProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModeInfo::kModeIdFieldNumber;
const int ModeInfo::kModeNameFieldNumber;
const int ModeInfo::kModeTypeFieldNumber;
const int ModeInfo::kFinishRatioFieldNumber;
const int ModeInfo::kMostwantedNumFieldNumber;
const int ModeInfo::kIsNewFieldNumber;
const int ModeInfo::kLeaderboardFieldNumber;
const int ModeInfo::kRealTrackIndexFieldNumber;
const int ModeInfo::kEnergyCostFieldNumber;
const int ModeInfo::kCarLimitDisplayStringFieldNumber;
const int ModeInfo::kLeaderboard2FieldNumber;
#endif  // !_MSC_VER

ModeInfo::ModeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModeInfo::InitAsDefaultInstance() {
}

ModeInfo::ModeInfo(const ModeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModeInfo::SharedCtor() {
  _cached_size_ = 0;
  modeid_ = 0;
  modename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modetype_ = 0;
  finishratio_ = 0;
  mostwantednum_ = 0;
  isnew_ = false;
  realtrackindex_ = 0;
  energycost_ = 0;
  carlimitdisplaystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModeInfo::~ModeInfo() {
  SharedDtor();
}

void ModeInfo::SharedDtor() {
  if (modename_ != &::google::protobuf::internal::kEmptyString) {
    delete modename_;
  }
  if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
    delete carlimitdisplaystring_;
  }
  if (this != default_instance_) {
  }
}

void ModeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeInfo_descriptor_;
}

const ModeInfo& ModeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ModeInfo* ModeInfo::default_instance_ = NULL;

ModeInfo* ModeInfo::New() const {
  return new ModeInfo;
}

void ModeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modeid_ = 0;
    if (has_modename()) {
      if (modename_ != &::google::protobuf::internal::kEmptyString) {
        modename_->clear();
      }
    }
    modetype_ = 0;
    finishratio_ = 0;
    mostwantednum_ = 0;
    isnew_ = false;
    realtrackindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    energycost_ = 0;
    if (has_carlimitdisplaystring()) {
      if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
        carlimitdisplaystring_->clear();
      }
    }
  }
  leaderboard_.Clear();
  leaderboard2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_modeName;
        break;
      }
      
      // required string modeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modename().data(), this->modename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modeType;
        break;
      }
      
      // required int32 modeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modetype_)));
          set_has_modetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finishRatio;
        break;
      }
      
      // required int32 finishRatio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finishratio_)));
          set_has_finishratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mostwantedNum;
        break;
      }
      
      // required int32 mostwantedNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mostwantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mostwantednum_)));
          set_has_mostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isNew;
        break;
      }
      
      // required bool isNew = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_leaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderboard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_leaderboard;
        if (input->ExpectTag(64)) goto parse_realTrackIndex;
        break;
      }
      
      // optional int32 realTrackIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realTrackIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realtrackindex_)));
          set_has_realtrackindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_energyCost;
        break;
      }
      
      // optional int32 energyCost = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energycost_)));
          set_has_energycost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_carLimitDisplayString;
        break;
      }
      
      // optional string carLimitDisplayString = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carLimitDisplayString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carlimitdisplaystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_leaderboard2;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile leaderboard2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboard2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaderboard2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_leaderboard2;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modeid(), output);
  }
  
  // required string modeName = 2;
  if (has_modename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modename().data(), this->modename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->modename(), output);
  }
  
  // required int32 modeType = 3;
  if (has_modetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modetype(), output);
  }
  
  // required int32 finishRatio = 4;
  if (has_finishratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->finishratio(), output);
  }
  
  // required int32 mostwantedNum = 5;
  if (has_mostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mostwantednum(), output);
  }
  
  // required bool isNew = 6;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnew(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderboard = 7;
  for (int i = 0; i < this->leaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->leaderboard(i), output);
  }
  
  // optional int32 realTrackIndex = 8;
  if (has_realtrackindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->realtrackindex(), output);
  }
  
  // optional int32 energyCost = 9;
  if (has_energycost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->energycost(), output);
  }
  
  // optional string carLimitDisplayString = 10;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->carlimitdisplaystring(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile leaderboard2 = 11;
  for (int i = 0; i < this->leaderboard2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->leaderboard2(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modeid(), target);
  }
  
  // required string modeName = 2;
  if (has_modename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modename().data(), this->modename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modename(), target);
  }
  
  // required int32 modeType = 3;
  if (has_modetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modetype(), target);
  }
  
  // required int32 finishRatio = 4;
  if (has_finishratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->finishratio(), target);
  }
  
  // required int32 mostwantedNum = 5;
  if (has_mostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mostwantednum(), target);
  }
  
  // required bool isNew = 6;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnew(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderboard = 7;
  for (int i = 0; i < this->leaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->leaderboard(i), target);
  }
  
  // optional int32 realTrackIndex = 8;
  if (has_realtrackindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->realtrackindex(), target);
  }
  
  // optional int32 energyCost = 9;
  if (has_energycost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->energycost(), target);
  }
  
  // optional string carLimitDisplayString = 10;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->carlimitdisplaystring(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile leaderboard2 = 11;
  for (int i = 0; i < this->leaderboard2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->leaderboard2(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modeId = 1;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required string modeName = 2;
    if (has_modename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modename());
    }
    
    // required int32 modeType = 3;
    if (has_modetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modetype());
    }
    
    // required int32 finishRatio = 4;
    if (has_finishratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishratio());
    }
    
    // required int32 mostwantedNum = 5;
    if (has_mostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mostwantednum());
    }
    
    // required bool isNew = 6;
    if (has_isnew()) {
      total_size += 1 + 1;
    }
    
    // optional int32 realTrackIndex = 8;
    if (has_realtrackindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realtrackindex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 energyCost = 9;
    if (has_energycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energycost());
    }
    
    // optional string carLimitDisplayString = 10;
    if (has_carlimitdisplaystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carlimitdisplaystring());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderboard = 7;
  total_size += 1 * this->leaderboard_size();
  for (int i = 0; i < this->leaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaderboard(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile leaderboard2 = 11;
  total_size += 1 * this->leaderboard2_size();
  for (int i = 0; i < this->leaderboard2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaderboard2(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModeInfo::MergeFrom(const ModeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  leaderboard_.MergeFrom(from.leaderboard_);
  leaderboard2_.MergeFrom(from.leaderboard2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_modename()) {
      set_modename(from.modename());
    }
    if (from.has_modetype()) {
      set_modetype(from.modetype());
    }
    if (from.has_finishratio()) {
      set_finishratio(from.finishratio());
    }
    if (from.has_mostwantednum()) {
      set_mostwantednum(from.mostwantednum());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_realtrackindex()) {
      set_realtrackindex(from.realtrackindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_energycost()) {
      set_energycost(from.energycost());
    }
    if (from.has_carlimitdisplaystring()) {
      set_carlimitdisplaystring(from.carlimitdisplaystring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModeInfo::CopyFrom(const ModeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < leaderboard_size(); i++) {
    if (!this->leaderboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < leaderboard2_size(); i++) {
    if (!this->leaderboard2(i).IsInitialized()) return false;
  }
  return true;
}

void ModeInfo::Swap(ModeInfo* other) {
  if (other != this) {
    std::swap(modeid_, other->modeid_);
    std::swap(modename_, other->modename_);
    std::swap(modetype_, other->modetype_);
    std::swap(finishratio_, other->finishratio_);
    std::swap(mostwantednum_, other->mostwantednum_);
    std::swap(isnew_, other->isnew_);
    leaderboard_.Swap(&other->leaderboard_);
    std::swap(realtrackindex_, other->realtrackindex_);
    std::swap(energycost_, other->energycost_);
    std::swap(carlimitdisplaystring_, other->carlimitdisplaystring_);
    leaderboard2_.Swap(&other->leaderboard2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModeInfo_descriptor_;
  metadata.reflection = ModeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackInfo::kTrackIdFieldNumber;
const int TrackInfo::kFinishRatioFieldNumber;
const int TrackInfo::kCarTypesFieldNumber;
const int TrackInfo::kDifficultyFieldNumber;
const int TrackInfo::kUnlockFieldNumber;
const int TrackInfo::kUserMostwantedNumFieldNumber;
const int TrackInfo::kIsNewFieldNumber;
const int TrackInfo::kModesFieldNumber;
const int TrackInfo::kTrackNameFieldNumber;
const int TrackInfo::kCarTypeForDisplayFieldNumber;
const int TrackInfo::kTrackStatusUpdatedFieldNumber;
const int TrackInfo::kRewardFieldNumber;
const int TrackInfo::kIsHasNewModeFieldNumber;
#endif  // !_MSC_VER

TrackInfo::TrackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackInfo::InitAsDefaultInstance() {
  reward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
}

TrackInfo::TrackInfo(const TrackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackInfo::SharedCtor() {
  _cached_size_ = 0;
  trackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finishratio_ = 0;
  difficulty_ = 0;
  unlock_ = false;
  usermostwantednum_ = 0;
  isnew_ = false;
  trackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cartypefordisplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trackstatusupdated_ = false;
  reward_ = NULL;
  ishasnewmode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackInfo::~TrackInfo() {
  SharedDtor();
}

void TrackInfo::SharedDtor() {
  if (trackid_ != &::google::protobuf::internal::kEmptyString) {
    delete trackid_;
  }
  if (trackname_ != &::google::protobuf::internal::kEmptyString) {
    delete trackname_;
  }
  if (cartypefordisplay_ != &::google::protobuf::internal::kEmptyString) {
    delete cartypefordisplay_;
  }
  if (this != default_instance_) {
    delete reward_;
  }
}

void TrackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackInfo_descriptor_;
}

const TrackInfo& TrackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TrackInfo* TrackInfo::default_instance_ = NULL;

TrackInfo* TrackInfo::New() const {
  return new TrackInfo;
}

void TrackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trackid()) {
      if (trackid_ != &::google::protobuf::internal::kEmptyString) {
        trackid_->clear();
      }
    }
    finishratio_ = 0;
    difficulty_ = 0;
    unlock_ = false;
    usermostwantednum_ = 0;
    isnew_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_trackname()) {
      if (trackname_ != &::google::protobuf::internal::kEmptyString) {
        trackname_->clear();
      }
    }
    if (has_cartypefordisplay()) {
      if (cartypefordisplay_ != &::google::protobuf::internal::kEmptyString) {
        cartypefordisplay_->clear();
      }
    }
    trackstatusupdated_ = false;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
    ishasnewmode_ = false;
  }
  cartypes_.Clear();
  modes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trackId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackid().data(), this->trackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finishRatio;
        break;
      }
      
      // required int32 finishRatio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finishratio_)));
          set_has_finishratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_carTypes;
        break;
      }
      
      // repeated int32 carTypes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carTypes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cartypes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cartypes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_carTypes;
        if (input->ExpectTag(32)) goto parse_difficulty;
        break;
      }
      
      // required int32 difficulty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unlock;
        break;
      }
      
      // required bool unlock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userMostwantedNum;
        break;
      }
      
      // optional int32 userMostwantedNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userMostwantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usermostwantednum_)));
          set_has_usermostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isNew;
        break;
      }
      
      // optional bool isNew = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_modes;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.ModeInfo modes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_modes;
        if (input->ExpectTag(74)) goto parse_trackName;
        break;
      }
      
      // required string trackName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackname().data(), this->trackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_carTypeForDisplay;
        break;
      }
      
      // optional string carTypeForDisplay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carTypeForDisplay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cartypefordisplay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cartypefordisplay().data(), this->cartypefordisplay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_trackStatusUpdated;
        break;
      }
      
      // optional bool trackStatusUpdated = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackStatusUpdated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trackstatusupdated_)));
          set_has_trackstatusupdated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_reward;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isHasNewMode;
        break;
      }
      
      // optional bool isHasNewMode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHasNewMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishasnewmode_)));
          set_has_ishasnewmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string trackId = 1;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackid().data(), this->trackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trackid(), output);
  }
  
  // required int32 finishRatio = 2;
  if (has_finishratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finishratio(), output);
  }
  
  // repeated int32 carTypes = 3;
  for (int i = 0; i < this->cartypes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cartypes(i), output);
  }
  
  // required int32 difficulty = 4;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difficulty(), output);
  }
  
  // required bool unlock = 5;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->unlock(), output);
  }
  
  // optional int32 userMostwantedNum = 6;
  if (has_usermostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->usermostwantednum(), output);
  }
  
  // optional bool isNew = 7;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isnew(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ModeInfo modes = 8;
  for (int i = 0; i < this->modes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->modes(i), output);
  }
  
  // required string trackName = 9;
  if (has_trackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackname().data(), this->trackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->trackname(), output);
  }
  
  // optional string carTypeForDisplay = 10;
  if (has_cartypefordisplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cartypefordisplay().data(), this->cartypefordisplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cartypefordisplay(), output);
  }
  
  // optional bool trackStatusUpdated = 11;
  if (has_trackstatusupdated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->trackstatusupdated(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 12;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reward(), output);
  }
  
  // optional bool isHasNewMode = 13;
  if (has_ishasnewmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->ishasnewmode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string trackId = 1;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackid().data(), this->trackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trackid(), target);
  }
  
  // required int32 finishRatio = 2;
  if (has_finishratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finishratio(), target);
  }
  
  // repeated int32 carTypes = 3;
  for (int i = 0; i < this->cartypes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cartypes(i), target);
  }
  
  // required int32 difficulty = 4;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difficulty(), target);
  }
  
  // required bool unlock = 5;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->unlock(), target);
  }
  
  // optional int32 userMostwantedNum = 6;
  if (has_usermostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->usermostwantednum(), target);
  }
  
  // optional bool isNew = 7;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isnew(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ModeInfo modes = 8;
  for (int i = 0; i < this->modes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->modes(i), target);
  }
  
  // required string trackName = 9;
  if (has_trackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackname().data(), this->trackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->trackname(), target);
  }
  
  // optional string carTypeForDisplay = 10;
  if (has_cartypefordisplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cartypefordisplay().data(), this->cartypefordisplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cartypefordisplay(), target);
  }
  
  // optional bool trackStatusUpdated = 11;
  if (has_trackstatusupdated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->trackstatusupdated(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 12;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reward(), target);
  }
  
  // optional bool isHasNewMode = 13;
  if (has_ishasnewmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->ishasnewmode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string trackId = 1;
    if (has_trackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackid());
    }
    
    // required int32 finishRatio = 2;
    if (has_finishratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finishratio());
    }
    
    // required int32 difficulty = 4;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty());
    }
    
    // required bool unlock = 5;
    if (has_unlock()) {
      total_size += 1 + 1;
    }
    
    // optional int32 userMostwantedNum = 6;
    if (has_usermostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usermostwantednum());
    }
    
    // optional bool isNew = 7;
    if (has_isnew()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string trackName = 9;
    if (has_trackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackname());
    }
    
    // optional string carTypeForDisplay = 10;
    if (has_cartypefordisplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cartypefordisplay());
    }
    
    // optional bool trackStatusUpdated = 11;
    if (has_trackstatusupdated()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 12;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
    // optional bool isHasNewMode = 13;
    if (has_ishasnewmode()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 carTypes = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cartypes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cartypes(i));
    }
    total_size += 1 * this->cartypes_size() + data_size;
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ModeInfo modes = 8;
  total_size += 1 * this->modes_size();
  for (int i = 0; i < this->modes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->modes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackInfo::MergeFrom(const TrackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cartypes_.MergeFrom(from.cartypes_);
  modes_.MergeFrom(from.modes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trackid()) {
      set_trackid(from.trackid());
    }
    if (from.has_finishratio()) {
      set_finishratio(from.finishratio());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_usermostwantednum()) {
      set_usermostwantednum(from.usermostwantednum());
    }
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trackname()) {
      set_trackname(from.trackname());
    }
    if (from.has_cartypefordisplay()) {
      set_cartypefordisplay(from.cartypefordisplay());
    }
    if (from.has_trackstatusupdated()) {
      set_trackstatusupdated(from.trackstatusupdated());
    }
    if (from.has_reward()) {
      mutable_reward()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.reward());
    }
    if (from.has_ishasnewmode()) {
      set_ishasnewmode(from.ishasnewmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackInfo::CopyFrom(const TrackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000011b) != 0x0000011b) return false;
  
  for (int i = 0; i < modes_size(); i++) {
    if (!this->modes(i).IsInitialized()) return false;
  }
  return true;
}

void TrackInfo::Swap(TrackInfo* other) {
  if (other != this) {
    std::swap(trackid_, other->trackid_);
    std::swap(finishratio_, other->finishratio_);
    cartypes_.Swap(&other->cartypes_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(unlock_, other->unlock_);
    std::swap(usermostwantednum_, other->usermostwantednum_);
    std::swap(isnew_, other->isnew_);
    modes_.Swap(&other->modes_);
    std::swap(trackname_, other->trackname_);
    std::swap(cartypefordisplay_, other->cartypefordisplay_);
    std::swap(trackstatusupdated_, other->trackstatusupdated_);
    std::swap(reward_, other->reward_);
    std::swap(ishasnewmode_, other->ishasnewmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackInfo_descriptor_;
  metadata.reflection = TrackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckPointInfo::kModeIdFieldNumber;
const int CheckPointInfo::kStatusFieldNumber;
const int CheckPointInfo::kUnlockMostwantedNumFieldNumber;
const int CheckPointInfo::kEventNameFieldNumber;
const int CheckPointInfo::kAcceptableCarIDsFieldNumber;
const int CheckPointInfo::kCarLimitDisplayStringFieldNumber;
const int CheckPointInfo::kStaminaCostFieldNumber;
const int CheckPointInfo::kRewardFieldNumber;
#endif  // !_MSC_VER

CheckPointInfo::CheckPointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckPointInfo::InitAsDefaultInstance() {
  reward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
}

CheckPointInfo::CheckPointInfo(const CheckPointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckPointInfo::SharedCtor() {
  _cached_size_ = 0;
  modeid_ = 0;
  status_ = 0;
  unlockmostwantednum_ = 0;
  eventname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carlimitdisplaystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  staminacost_ = 0;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckPointInfo::~CheckPointInfo() {
  SharedDtor();
}

void CheckPointInfo::SharedDtor() {
  if (eventname_ != &::google::protobuf::internal::kEmptyString) {
    delete eventname_;
  }
  if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
    delete carlimitdisplaystring_;
  }
  if (this != default_instance_) {
    delete reward_;
  }
}

void CheckPointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckPointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckPointInfo_descriptor_;
}

const CheckPointInfo& CheckPointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

CheckPointInfo* CheckPointInfo::default_instance_ = NULL;

CheckPointInfo* CheckPointInfo::New() const {
  return new CheckPointInfo;
}

void CheckPointInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modeid_ = 0;
    status_ = 0;
    unlockmostwantednum_ = 0;
    if (has_eventname()) {
      if (eventname_ != &::google::protobuf::internal::kEmptyString) {
        eventname_->clear();
      }
    }
    if (has_carlimitdisplaystring()) {
      if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
        carlimitdisplaystring_->clear();
      }
    }
    staminacost_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
  }
  acceptablecarids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckPointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlockMostwantedNum;
        break;
      }
      
      // required int32 unlockMostwantedNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockMostwantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlockmostwantednum_)));
          set_has_unlockmostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eventName;
        break;
      }
      
      // required string eventName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventname().data(), this->eventname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_acceptableCarIDs;
        break;
      }
      
      // repeated string acceptableCarIDs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptableCarIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_acceptablecarids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptablecarids(0).data(), this->acceptablecarids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_acceptableCarIDs;
        if (input->ExpectTag(50)) goto parse_carLimitDisplayString;
        break;
      }
      
      // required string carLimitDisplayString = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carLimitDisplayString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carlimitdisplaystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_staminaCost;
        break;
      }
      
      // required int32 staminaCost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staminaCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &staminacost_)));
          set_has_staminacost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reward;
        break;
      }
      
      // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckPointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modeid(), output);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }
  
  // required int32 unlockMostwantedNum = 3;
  if (has_unlockmostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlockmostwantednum(), output);
  }
  
  // required string eventName = 4;
  if (has_eventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventname().data(), this->eventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->eventname(), output);
  }
  
  // repeated string acceptableCarIDs = 5;
  for (int i = 0; i < this->acceptablecarids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->acceptablecarids(i).data(), this->acceptablecarids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->acceptablecarids(i), output);
  }
  
  // required string carLimitDisplayString = 6;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->carlimitdisplaystring(), output);
  }
  
  // required int32 staminaCost = 7;
  if (has_staminacost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->staminacost(), output);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 8;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckPointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modeid(), target);
  }
  
  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }
  
  // required int32 unlockMostwantedNum = 3;
  if (has_unlockmostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlockmostwantednum(), target);
  }
  
  // required string eventName = 4;
  if (has_eventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventname().data(), this->eventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->eventname(), target);
  }
  
  // repeated string acceptableCarIDs = 5;
  for (int i = 0; i < this->acceptablecarids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptablecarids(i).data(), this->acceptablecarids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->acceptablecarids(i), target);
  }
  
  // required string carLimitDisplayString = 6;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->carlimitdisplaystring(), target);
  }
  
  // required int32 staminaCost = 7;
  if (has_staminacost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->staminacost(), target);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 8;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckPointInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modeId = 1;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 unlockMostwantedNum = 3;
    if (has_unlockmostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockmostwantednum());
    }
    
    // required string eventName = 4;
    if (has_eventname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventname());
    }
    
    // required string carLimitDisplayString = 6;
    if (has_carlimitdisplaystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carlimitdisplaystring());
    }
    
    // required int32 staminaCost = 7;
    if (has_staminacost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->staminacost());
    }
    
    // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 8;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  // repeated string acceptableCarIDs = 5;
  total_size += 1 * this->acceptablecarids_size();
  for (int i = 0; i < this->acceptablecarids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->acceptablecarids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckPointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckPointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckPointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckPointInfo::MergeFrom(const CheckPointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptablecarids_.MergeFrom(from.acceptablecarids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_unlockmostwantednum()) {
      set_unlockmostwantednum(from.unlockmostwantednum());
    }
    if (from.has_eventname()) {
      set_eventname(from.eventname());
    }
    if (from.has_carlimitdisplaystring()) {
      set_carlimitdisplaystring(from.carlimitdisplaystring());
    }
    if (from.has_staminacost()) {
      set_staminacost(from.staminacost());
    }
    if (from.has_reward()) {
      mutable_reward()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckPointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPointInfo::CopyFrom(const CheckPointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ef) != 0x000000ef) return false;
  
  return true;
}

void CheckPointInfo::Swap(CheckPointInfo* other) {
  if (other != this) {
    std::swap(modeid_, other->modeid_);
    std::swap(status_, other->status_);
    std::swap(unlockmostwantednum_, other->unlockmostwantednum_);
    std::swap(eventname_, other->eventname_);
    acceptablecarids_.Swap(&other->acceptablecarids_);
    std::swap(carlimitdisplaystring_, other->carlimitdisplaystring_);
    std::swap(staminacost_, other->staminacost_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckPointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckPointInfo_descriptor_;
  metadata.reflection = CheckPointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewbieTierCheckList::kTextFieldNumber;
const int NewbieTierCheckList::kIsFinishedFieldNumber;
#endif  // !_MSC_VER

NewbieTierCheckList::NewbieTierCheckList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewbieTierCheckList::InitAsDefaultInstance() {
}

NewbieTierCheckList::NewbieTierCheckList(const NewbieTierCheckList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewbieTierCheckList::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isfinished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewbieTierCheckList::~NewbieTierCheckList() {
  SharedDtor();
}

void NewbieTierCheckList::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void NewbieTierCheckList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewbieTierCheckList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewbieTierCheckList_descriptor_;
}

const NewbieTierCheckList& NewbieTierCheckList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

NewbieTierCheckList* NewbieTierCheckList::default_instance_ = NULL;

NewbieTierCheckList* NewbieTierCheckList::New() const {
  return new NewbieTierCheckList;
}

void NewbieTierCheckList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    isfinished_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewbieTierCheckList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFinished;
        break;
      }
      
      // required bool isFinished = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewbieTierCheckList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // required bool isFinished = 2;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfinished(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewbieTierCheckList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // required bool isFinished = 2;
  if (has_isfinished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfinished(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewbieTierCheckList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // required bool isFinished = 2;
    if (has_isfinished()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewbieTierCheckList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewbieTierCheckList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewbieTierCheckList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewbieTierCheckList::MergeFrom(const NewbieTierCheckList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewbieTierCheckList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewbieTierCheckList::CopyFrom(const NewbieTierCheckList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewbieTierCheckList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void NewbieTierCheckList::Swap(NewbieTierCheckList* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(isfinished_, other->isfinished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewbieTierCheckList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewbieTierCheckList_descriptor_;
  metadata.reflection = NewbieTierCheckList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TierInfo::kTierIndexFieldNumber;
const int TierInfo::kTierAmountFieldNumber;
const int TierInfo::kNewbieTierCheckListFieldNumber;
#endif  // !_MSC_VER

TierInfo::TierInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TierInfo::InitAsDefaultInstance() {
}

TierInfo::TierInfo(const TierInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TierInfo::SharedCtor() {
  _cached_size_ = 0;
  tierindex_ = 0;
  tieramount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TierInfo::~TierInfo() {
  SharedDtor();
}

void TierInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TierInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TierInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TierInfo_descriptor_;
}

const TierInfo& TierInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TierInfo* TierInfo::default_instance_ = NULL;

TierInfo* TierInfo::New() const {
  return new TierInfo;
}

void TierInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tierindex_ = 0;
    tieramount_ = 0;
  }
  newbietierchecklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TierInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tierIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tierindex_)));
          set_has_tierindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tierAmount;
        break;
      }
      
      // required int32 tierAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tierAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tieramount_)));
          set_has_tieramount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newbieTierCheckList;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.NewbieTierCheckList newbieTierCheckList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newbieTierCheckList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newbietierchecklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newbieTierCheckList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TierInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tierIndex = 1;
  if (has_tierindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tierindex(), output);
  }
  
  // required int32 tierAmount = 2;
  if (has_tieramount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tieramount(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.NewbieTierCheckList newbieTierCheckList = 3;
  for (int i = 0; i < this->newbietierchecklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newbietierchecklist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TierInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tierIndex = 1;
  if (has_tierindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tierindex(), target);
  }
  
  // required int32 tierAmount = 2;
  if (has_tieramount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tieramount(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.NewbieTierCheckList newbieTierCheckList = 3;
  for (int i = 0; i < this->newbietierchecklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newbietierchecklist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TierInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tierIndex = 1;
    if (has_tierindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tierindex());
    }
    
    // required int32 tierAmount = 2;
    if (has_tieramount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tieramount());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.NewbieTierCheckList newbieTierCheckList = 3;
  total_size += 1 * this->newbietierchecklist_size();
  for (int i = 0; i < this->newbietierchecklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newbietierchecklist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TierInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TierInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TierInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TierInfo::MergeFrom(const TierInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newbietierchecklist_.MergeFrom(from.newbietierchecklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tierindex()) {
      set_tierindex(from.tierindex());
    }
    if (from.has_tieramount()) {
      set_tieramount(from.tieramount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TierInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TierInfo::CopyFrom(const TierInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TierInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < newbietierchecklist_size(); i++) {
    if (!this->newbietierchecklist(i).IsInitialized()) return false;
  }
  return true;
}

void TierInfo::Swap(TierInfo* other) {
  if (other != this) {
    std::swap(tierindex_, other->tierindex_);
    std::swap(tieramount_, other->tieramount_);
    newbietierchecklist_.Swap(&other->newbietierchecklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TierInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TierInfo_descriptor_;
  metadata.reflection = TierInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPSInfo::kLatitudeFieldNumber;
const int GPSInfo::kLongitudeFieldNumber;
const int GPSInfo::kCountryFieldNumber;
const int GPSInfo::kLocalityFieldNumber;
const int GPSInfo::kSubLocalityFieldNumber;
const int GPSInfo::kThoroughfareFieldNumber;
const int GPSInfo::kSubThoroughfareFieldNumber;
#endif  // !_MSC_VER

GPSInfo::GPSInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPSInfo::InitAsDefaultInstance() {
}

GPSInfo::GPSInfo(const GPSInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPSInfo::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sublocality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thoroughfare_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subthoroughfare_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPSInfo::~GPSInfo() {
  SharedDtor();
}

void GPSInfo::SharedDtor() {
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (locality_ != &::google::protobuf::internal::kEmptyString) {
    delete locality_;
  }
  if (sublocality_ != &::google::protobuf::internal::kEmptyString) {
    delete sublocality_;
  }
  if (thoroughfare_ != &::google::protobuf::internal::kEmptyString) {
    delete thoroughfare_;
  }
  if (subthoroughfare_ != &::google::protobuf::internal::kEmptyString) {
    delete subthoroughfare_;
  }
  if (this != default_instance_) {
  }
}

void GPSInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPSInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSInfo_descriptor_;
}

const GPSInfo& GPSInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

GPSInfo* GPSInfo::default_instance_ = NULL;

GPSInfo* GPSInfo::New() const {
  return new GPSInfo;
}

void GPSInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_locality()) {
      if (locality_ != &::google::protobuf::internal::kEmptyString) {
        locality_->clear();
      }
    }
    if (has_sublocality()) {
      if (sublocality_ != &::google::protobuf::internal::kEmptyString) {
        sublocality_->clear();
      }
    }
    if (has_thoroughfare()) {
      if (thoroughfare_ != &::google::protobuf::internal::kEmptyString) {
        thoroughfare_->clear();
      }
    }
    if (has_subthoroughfare()) {
      if (subthoroughfare_ != &::google::protobuf::internal::kEmptyString) {
        subthoroughfare_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }
      
      // required double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country;
        break;
      }
      
      // required string country = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_locality;
        break;
      }
      
      // required string locality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locality().data(), this->locality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subLocality;
        break;
      }
      
      // required string subLocality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subLocality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sublocality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sublocality().data(), this->sublocality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_thoroughfare;
        break;
      }
      
      // required string thoroughfare = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thoroughfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thoroughfare()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thoroughfare().data(), this->thoroughfare().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_subThoroughfare;
        break;
      }
      
      // required string subThoroughfare = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subThoroughfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subthoroughfare()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subthoroughfare().data(), this->subthoroughfare().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }
  
  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }
  
  // required string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country(), output);
  }
  
  // required string locality = 4;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->locality(), output);
  }
  
  // required string subLocality = 5;
  if (has_sublocality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sublocality().data(), this->sublocality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sublocality(), output);
  }
  
  // required string thoroughfare = 6;
  if (has_thoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thoroughfare().data(), this->thoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->thoroughfare(), output);
  }
  
  // required string subThoroughfare = 7;
  if (has_subthoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subthoroughfare().data(), this->subthoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->subthoroughfare(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPSInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }
  
  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }
  
  // required string country = 3;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country(), target);
  }
  
  // required string locality = 4;
  if (has_locality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locality().data(), this->locality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->locality(), target);
  }
  
  // required string subLocality = 5;
  if (has_sublocality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sublocality().data(), this->sublocality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sublocality(), target);
  }
  
  // required string thoroughfare = 6;
  if (has_thoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thoroughfare().data(), this->thoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->thoroughfare(), target);
  }
  
  // required string subThoroughfare = 7;
  if (has_subthoroughfare()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subthoroughfare().data(), this->subthoroughfare().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->subthoroughfare(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPSInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // required string country = 3;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // required string locality = 4;
    if (has_locality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locality());
    }
    
    // required string subLocality = 5;
    if (has_sublocality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sublocality());
    }
    
    // required string thoroughfare = 6;
    if (has_thoroughfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thoroughfare());
    }
    
    // required string subThoroughfare = 7;
    if (has_subthoroughfare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subthoroughfare());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPSInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPSInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPSInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPSInfo::MergeFrom(const GPSInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_locality()) {
      set_locality(from.locality());
    }
    if (from.has_sublocality()) {
      set_sublocality(from.sublocality());
    }
    if (from.has_thoroughfare()) {
      set_thoroughfare(from.thoroughfare());
    }
    if (from.has_subthoroughfare()) {
      set_subthoroughfare(from.subthoroughfare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPSInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSInfo::CopyFrom(const GPSInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void GPSInfo::Swap(GPSInfo* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(country_, other->country_);
    std::swap(locality_, other->locality_);
    std::swap(sublocality_, other->sublocality_);
    std::swap(thoroughfare_, other->thoroughfare_);
    std::swap(subthoroughfare_, other->subthoroughfare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPSInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPSInfo_descriptor_;
  metadata.reflection = GPSInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestResourceCommand::kClientVersionFieldNumber;
#endif  // !_MSC_VER

RequestResourceCommand::RequestResourceCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestResourceCommand::InitAsDefaultInstance() {
}

RequestResourceCommand::RequestResourceCommand(const RequestResourceCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestResourceCommand::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestResourceCommand::~RequestResourceCommand() {
  SharedDtor();
}

void RequestResourceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestResourceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestResourceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestResourceCommand_descriptor_;
}

const RequestResourceCommand& RequestResourceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestResourceCommand* RequestResourceCommand::default_instance_ = NULL;

RequestResourceCommand* RequestResourceCommand::New() const {
  return new RequestResourceCommand;
}

void RequestResourceCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientversion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestResourceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clientVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestResourceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestResourceCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestResourceCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clientVersion = 1;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestResourceCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestResourceCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestResourceCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestResourceCommand::MergeFrom(const RequestResourceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestResourceCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResourceCommand::CopyFrom(const RequestResourceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResourceCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestResourceCommand::Swap(RequestResourceCommand* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestResourceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestResourceCommand_descriptor_;
  metadata.reflection = RequestResourceCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceItemInfo::kPathFieldNumber;
const int ResourceItemInfo::kSizeFieldNumber;
const int ResourceItemInfo::kMd5FieldNumber;
const int ResourceItemInfo::kActionFieldNumber;
const int ResourceItemInfo::kVersionFieldNumber;
#endif  // !_MSC_VER

ResourceItemInfo::ResourceItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceItemInfo::InitAsDefaultInstance() {
}

ResourceItemInfo::ResourceItemInfo(const ResourceItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceItemInfo::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceItemInfo::~ResourceItemInfo() {
  SharedDtor();
}

void ResourceItemInfo::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void ResourceItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceItemInfo_descriptor_;
}

const ResourceItemInfo& ResourceItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResourceItemInfo* ResourceItemInfo::default_instance_ = NULL;

ResourceItemInfo* ResourceItemInfo::New() const {
  return new ResourceItemInfo;
}

void ResourceItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    size_ = 0;
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
    action_ = 0;
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_md5;
        break;
      }
      
      // required string md5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }
      
      // required int32 action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }
      
      // optional int32 version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }
  
  // required string md5 = 3;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5(), output);
  }
  
  // required int32 action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->action(), output);
  }
  
  // optional int32 version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }
  
  // required string md5 = 3;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->md5(), target);
  }
  
  // required int32 action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->action(), target);
  }
  
  // optional int32 version = 5;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // required string md5 = 3;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }
    
    // required int32 action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // optional int32 version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceItemInfo::MergeFrom(const ResourceItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceItemInfo::CopyFrom(const ResourceItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ResourceItemInfo::Swap(ResourceItemInfo* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(size_, other->size_);
    std::swap(md5_, other->md5_);
    std::swap(action_, other->action_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceItemInfo_descriptor_;
  metadata.reflection = ResourceItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseResourceCommand::kRootPathFieldNumber;
const int ResponseResourceCommand::kVersionFieldNumber;
const int ResponseResourceCommand::kItemsFieldNumber;
#endif  // !_MSC_VER

ResponseResourceCommand::ResponseResourceCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseResourceCommand::InitAsDefaultInstance() {
}

ResponseResourceCommand::ResponseResourceCommand(const ResponseResourceCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseResourceCommand::SharedCtor() {
  _cached_size_ = 0;
  rootpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseResourceCommand::~ResponseResourceCommand() {
  SharedDtor();
}

void ResponseResourceCommand::SharedDtor() {
  if (rootpath_ != &::google::protobuf::internal::kEmptyString) {
    delete rootpath_;
  }
  if (this != default_instance_) {
  }
}

void ResponseResourceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseResourceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseResourceCommand_descriptor_;
}

const ResponseResourceCommand& ResponseResourceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseResourceCommand* ResponseResourceCommand::default_instance_ = NULL;

ResponseResourceCommand* ResponseResourceCommand::New() const {
  return new ResponseResourceCommand;
}

void ResponseResourceCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rootpath()) {
      if (rootpath_ != &::google::protobuf::internal::kEmptyString) {
        rootpath_->clear();
      }
    }
    version_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseResourceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rootPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rootpath().data(), this->rootpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // required int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.ResourceItemInfo items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseResourceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rootPath = 1;
  if (has_rootpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rootpath().data(), this->rootpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rootpath(), output);
  }
  
  // required int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ResourceItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseResourceCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rootPath = 1;
  if (has_rootpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rootpath().data(), this->rootpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rootpath(), target);
  }
  
  // required int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ResourceItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseResourceCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rootPath = 1;
    if (has_rootpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rootpath());
    }
    
    // required int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.ResourceItemInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseResourceCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseResourceCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseResourceCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseResourceCommand::MergeFrom(const ResponseResourceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rootpath()) {
      set_rootpath(from.rootpath());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseResourceCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseResourceCommand::CopyFrom(const ResponseResourceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseResourceCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseResourceCommand::Swap(ResponseResourceCommand* other) {
  if (other != this) {
    std::swap(rootpath_, other->rootpath_);
    std::swap(version_, other->version_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseResourceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseResourceCommand_descriptor_;
  metadata.reflection = ResponseResourceCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTrackCommand::kRequestTierFieldNumber;
#endif  // !_MSC_VER

RequestTrackCommand::RequestTrackCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTrackCommand::InitAsDefaultInstance() {
}

RequestTrackCommand::RequestTrackCommand(const RequestTrackCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTrackCommand::SharedCtor() {
  _cached_size_ = 0;
  requesttier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTrackCommand::~RequestTrackCommand() {
  SharedDtor();
}

void RequestTrackCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTrackCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTrackCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTrackCommand_descriptor_;
}

const RequestTrackCommand& RequestTrackCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTrackCommand* RequestTrackCommand::default_instance_ = NULL;

RequestTrackCommand* RequestTrackCommand::New() const {
  return new RequestTrackCommand;
}

void RequestTrackCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    requesttier_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTrackCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 requestTier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requesttier_)));
          set_has_requesttier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTrackCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 requestTier = 2;
  if (has_requesttier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requesttier(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTrackCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 requestTier = 2;
  if (has_requesttier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->requesttier(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTrackCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 requestTier = 2;
    if (has_requesttier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requesttier());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTrackCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTrackCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTrackCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTrackCommand::MergeFrom(const RequestTrackCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requesttier()) {
      set_requesttier(from.requesttier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTrackCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTrackCommand::CopyFrom(const RequestTrackCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTrackCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTrackCommand::Swap(RequestTrackCommand* other) {
  if (other != this) {
    std::swap(requesttier_, other->requesttier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTrackCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTrackCommand_descriptor_;
  metadata.reflection = RequestTrackCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTrackCommand::kTierFieldNumber;
const int ResponseTrackCommand::kTracksFieldNumber;
const int ResponseTrackCommand::kCheckPointInfoFieldNumber;
#endif  // !_MSC_VER

ResponseTrackCommand::ResponseTrackCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTrackCommand::InitAsDefaultInstance() {
  tier_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::TierInfo*>(&::com::ea::eamobile::nfsmw::protoc::TierInfo::default_instance());
  checkpointinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::CheckPointInfo*>(&::com::ea::eamobile::nfsmw::protoc::CheckPointInfo::default_instance());
}

ResponseTrackCommand::ResponseTrackCommand(const ResponseTrackCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTrackCommand::SharedCtor() {
  _cached_size_ = 0;
  tier_ = NULL;
  checkpointinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTrackCommand::~ResponseTrackCommand() {
  SharedDtor();
}

void ResponseTrackCommand::SharedDtor() {
  if (this != default_instance_) {
    delete tier_;
    delete checkpointinfo_;
  }
}

void ResponseTrackCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTrackCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTrackCommand_descriptor_;
}

const ResponseTrackCommand& ResponseTrackCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTrackCommand* ResponseTrackCommand::default_instance_ = NULL;

ResponseTrackCommand* ResponseTrackCommand::New() const {
  return new ResponseTrackCommand;
}

void ResponseTrackCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tier()) {
      if (tier_ != NULL) tier_->::com::ea::eamobile::nfsmw::protoc::TierInfo::Clear();
    }
    if (has_checkpointinfo()) {
      if (checkpointinfo_ != NULL) checkpointinfo_->::com::ea::eamobile::nfsmw::protoc::CheckPointInfo::Clear();
    }
  }
  tracks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTrackCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracks;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.TrackInfo tracks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracks;
        if (input->ExpectTag(26)) goto parse_checkPointInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkPointInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkpointinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTrackCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 1;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tier(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TrackInfo tracks = 2;
  for (int i = 0; i < this->tracks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracks(i), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 3;
  if (has_checkpointinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->checkpointinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTrackCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 1;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tier(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TrackInfo tracks = 2;
  for (int i = 0; i < this->tracks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracks(i), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 3;
  if (has_checkpointinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->checkpointinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTrackCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 1;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tier());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 3;
    if (has_checkpointinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkpointinfo());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.TrackInfo tracks = 2;
  total_size += 1 * this->tracks_size();
  for (int i = 0; i < this->tracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTrackCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTrackCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTrackCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTrackCommand::MergeFrom(const ResponseTrackCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracks_.MergeFrom(from.tracks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tier()) {
      mutable_tier()->::com::ea::eamobile::nfsmw::protoc::TierInfo::MergeFrom(from.tier());
    }
    if (from.has_checkpointinfo()) {
      mutable_checkpointinfo()->::com::ea::eamobile::nfsmw::protoc::CheckPointInfo::MergeFrom(from.checkpointinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTrackCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTrackCommand::CopyFrom(const ResponseTrackCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTrackCommand::IsInitialized() const {
  
  if (has_tier()) {
    if (!this->tier().IsInitialized()) return false;
  }
  for (int i = 0; i < tracks_size(); i++) {
    if (!this->tracks(i).IsInitialized()) return false;
  }
  if (has_checkpointinfo()) {
    if (!this->checkpointinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseTrackCommand::Swap(ResponseTrackCommand* other) {
  if (other != this) {
    std::swap(tier_, other->tier_);
    tracks_.Swap(&other->tracks_);
    std::swap(checkpointinfo_, other->checkpointinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTrackCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTrackCommand_descriptor_;
  metadata.reflection = ResponseTrackCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUserInfoCommand::kMacFieldNumber;
const int RequestUserInfoCommand::kDeviceNameFieldNumber;
const int RequestUserInfoCommand::kTokenFieldNumber;
const int RequestUserInfoCommand::kGpsInfoFieldNumber;
const int RequestUserInfoCommand::kIsOldFieldNumber;
#endif  // !_MSC_VER

RequestUserInfoCommand::RequestUserInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUserInfoCommand::InitAsDefaultInstance() {
  gpsinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::GPSInfo*>(&::com::ea::eamobile::nfsmw::protoc::GPSInfo::default_instance());
}

RequestUserInfoCommand::RequestUserInfoCommand(const RequestUserInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUserInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpsinfo_ = NULL;
  isold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUserInfoCommand::~RequestUserInfoCommand() {
  SharedDtor();
}

void RequestUserInfoCommand::SharedDtor() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete gpsinfo_;
  }
}

void RequestUserInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUserInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUserInfoCommand_descriptor_;
}

const RequestUserInfoCommand& RequestUserInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestUserInfoCommand* RequestUserInfoCommand::default_instance_ = NULL;

RequestUserInfoCommand* RequestUserInfoCommand::New() const {
  return new RequestUserInfoCommand;
}

void RequestUserInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_gpsinfo()) {
      if (gpsinfo_ != NULL) gpsinfo_->::com::ea::eamobile::nfsmw::protoc::GPSInfo::Clear();
    }
    isold_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUserInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mac = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceName;
        break;
      }
      
      // optional string deviceName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpsInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.GPSInfo gpsInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isOld;
        break;
      }
      
      // optional bool isOld = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOld:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isold_)));
          set_has_isold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUserInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mac = 1;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mac(), output);
  }
  
  // optional string deviceName = 2;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->devicename(), output);
  }
  
  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.GPSInfo gpsInfo = 4;
  if (has_gpsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpsinfo(), output);
  }
  
  // optional bool isOld = 5;
  if (has_isold()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUserInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mac = 1;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac(), target);
  }
  
  // optional string deviceName = 2;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicename(), target);
  }
  
  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.GPSInfo gpsInfo = 4;
  if (has_gpsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpsinfo(), target);
  }
  
  // optional bool isOld = 5;
  if (has_isold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUserInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mac = 1;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
    // optional string deviceName = 2;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.GPSInfo gpsInfo = 4;
    if (has_gpsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpsinfo());
    }
    
    // optional bool isOld = 5;
    if (has_isold()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUserInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUserInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUserInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUserInfoCommand::MergeFrom(const RequestUserInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_gpsinfo()) {
      mutable_gpsinfo()->::com::ea::eamobile::nfsmw::protoc::GPSInfo::MergeFrom(from.gpsinfo());
    }
    if (from.has_isold()) {
      set_isold(from.isold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUserInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUserInfoCommand::CopyFrom(const RequestUserInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUserInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_gpsinfo()) {
    if (!this->gpsinfo().IsInitialized()) return false;
  }
  return true;
}

void RequestUserInfoCommand::Swap(RequestUserInfoCommand* other) {
  if (other != this) {
    std::swap(mac_, other->mac_);
    std::swap(devicename_, other->devicename_);
    std::swap(token_, other->token_);
    std::swap(gpsinfo_, other->gpsinfo_);
    std::swap(isold_, other->isold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUserInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUserInfoCommand_descriptor_;
  metadata.reflection = RequestUserInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseWeiboShareLocksCommand::kIsRaceRewardShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsTrackUnlockInfoShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsCarUnlockInfoShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsSpeedWallShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsBindingWeiboShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsTournamentRewardShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsBuyCarShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsUpdateConsumableShareOpenFieldNumber;
const int ResponseWeiboShareLocksCommand::kIsJaguarShareOpenFieldNumber;
#endif  // !_MSC_VER

ResponseWeiboShareLocksCommand::ResponseWeiboShareLocksCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseWeiboShareLocksCommand::InitAsDefaultInstance() {
}

ResponseWeiboShareLocksCommand::ResponseWeiboShareLocksCommand(const ResponseWeiboShareLocksCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseWeiboShareLocksCommand::SharedCtor() {
  _cached_size_ = 0;
  isracerewardshareopen_ = false;
  istrackunlockinfoshareopen_ = false;
  iscarunlockinfoshareopen_ = false;
  isspeedwallshareopen_ = false;
  isbindingweiboshareopen_ = false;
  istournamentrewardshareopen_ = false;
  isbuycarshareopen_ = false;
  isupdateconsumableshareopen_ = false;
  isjaguarshareopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseWeiboShareLocksCommand::~ResponseWeiboShareLocksCommand() {
  SharedDtor();
}

void ResponseWeiboShareLocksCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseWeiboShareLocksCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseWeiboShareLocksCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseWeiboShareLocksCommand_descriptor_;
}

const ResponseWeiboShareLocksCommand& ResponseWeiboShareLocksCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseWeiboShareLocksCommand* ResponseWeiboShareLocksCommand::default_instance_ = NULL;

ResponseWeiboShareLocksCommand* ResponseWeiboShareLocksCommand::New() const {
  return new ResponseWeiboShareLocksCommand;
}

void ResponseWeiboShareLocksCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isracerewardshareopen_ = false;
    istrackunlockinfoshareopen_ = false;
    iscarunlockinfoshareopen_ = false;
    isspeedwallshareopen_ = false;
    isbindingweiboshareopen_ = false;
    istournamentrewardshareopen_ = false;
    isbuycarshareopen_ = false;
    isupdateconsumableshareopen_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isjaguarshareopen_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseWeiboShareLocksCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isRaceRewardShareOpen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isracerewardshareopen_)));
          set_has_isracerewardshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrackUnlockInfoShareOpen;
        break;
      }
      
      // required bool isTrackUnlockInfoShareOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrackUnlockInfoShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrackunlockinfoshareopen_)));
          set_has_istrackunlockinfoshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isCarUnlockInfoShareOpen;
        break;
      }
      
      // required bool isCarUnlockInfoShareOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCarUnlockInfoShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscarunlockinfoshareopen_)));
          set_has_iscarunlockinfoshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isSpeedWallShareOpen;
        break;
      }
      
      // required bool isSpeedWallShareOpen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSpeedWallShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspeedwallshareopen_)));
          set_has_isspeedwallshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isBindingWeiboShareOpen;
        break;
      }
      
      // required bool isBindingWeiboShareOpen = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBindingWeiboShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbindingweiboshareopen_)));
          set_has_isbindingweiboshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isTournamentRewardShareOpen;
        break;
      }
      
      // required bool isTournamentRewardShareOpen = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTournamentRewardShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournamentrewardshareopen_)));
          set_has_istournamentrewardshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isBuyCarShareOpen;
        break;
      }
      
      // required bool isBuyCarShareOpen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBuyCarShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuycarshareopen_)));
          set_has_isbuycarshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isUpdateConsumableShareOpen;
        break;
      }
      
      // required bool isUpdateConsumableShareOpen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUpdateConsumableShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupdateconsumableshareopen_)));
          set_has_isupdateconsumableshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isJaguarShareOpen;
        break;
      }
      
      // optional bool isJaguarShareOpen = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJaguarShareOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjaguarshareopen_)));
          set_has_isjaguarshareopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseWeiboShareLocksCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isRaceRewardShareOpen = 1;
  if (has_isracerewardshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isracerewardshareopen(), output);
  }
  
  // required bool isTrackUnlockInfoShareOpen = 2;
  if (has_istrackunlockinfoshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrackunlockinfoshareopen(), output);
  }
  
  // required bool isCarUnlockInfoShareOpen = 3;
  if (has_iscarunlockinfoshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscarunlockinfoshareopen(), output);
  }
  
  // required bool isSpeedWallShareOpen = 4;
  if (has_isspeedwallshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isspeedwallshareopen(), output);
  }
  
  // required bool isBindingWeiboShareOpen = 5;
  if (has_isbindingweiboshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isbindingweiboshareopen(), output);
  }
  
  // required bool isTournamentRewardShareOpen = 6;
  if (has_istournamentrewardshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->istournamentrewardshareopen(), output);
  }
  
  // required bool isBuyCarShareOpen = 7;
  if (has_isbuycarshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isbuycarshareopen(), output);
  }
  
  // required bool isUpdateConsumableShareOpen = 8;
  if (has_isupdateconsumableshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isupdateconsumableshareopen(), output);
  }
  
  // optional bool isJaguarShareOpen = 9;
  if (has_isjaguarshareopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isjaguarshareopen(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseWeiboShareLocksCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isRaceRewardShareOpen = 1;
  if (has_isracerewardshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isracerewardshareopen(), target);
  }
  
  // required bool isTrackUnlockInfoShareOpen = 2;
  if (has_istrackunlockinfoshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrackunlockinfoshareopen(), target);
  }
  
  // required bool isCarUnlockInfoShareOpen = 3;
  if (has_iscarunlockinfoshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscarunlockinfoshareopen(), target);
  }
  
  // required bool isSpeedWallShareOpen = 4;
  if (has_isspeedwallshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isspeedwallshareopen(), target);
  }
  
  // required bool isBindingWeiboShareOpen = 5;
  if (has_isbindingweiboshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isbindingweiboshareopen(), target);
  }
  
  // required bool isTournamentRewardShareOpen = 6;
  if (has_istournamentrewardshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->istournamentrewardshareopen(), target);
  }
  
  // required bool isBuyCarShareOpen = 7;
  if (has_isbuycarshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isbuycarshareopen(), target);
  }
  
  // required bool isUpdateConsumableShareOpen = 8;
  if (has_isupdateconsumableshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isupdateconsumableshareopen(), target);
  }
  
  // optional bool isJaguarShareOpen = 9;
  if (has_isjaguarshareopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isjaguarshareopen(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseWeiboShareLocksCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isRaceRewardShareOpen = 1;
    if (has_isracerewardshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isTrackUnlockInfoShareOpen = 2;
    if (has_istrackunlockinfoshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isCarUnlockInfoShareOpen = 3;
    if (has_iscarunlockinfoshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isSpeedWallShareOpen = 4;
    if (has_isspeedwallshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isBindingWeiboShareOpen = 5;
    if (has_isbindingweiboshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isTournamentRewardShareOpen = 6;
    if (has_istournamentrewardshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isBuyCarShareOpen = 7;
    if (has_isbuycarshareopen()) {
      total_size += 1 + 1;
    }
    
    // required bool isUpdateConsumableShareOpen = 8;
    if (has_isupdateconsumableshareopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isJaguarShareOpen = 9;
    if (has_isjaguarshareopen()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseWeiboShareLocksCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseWeiboShareLocksCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseWeiboShareLocksCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseWeiboShareLocksCommand::MergeFrom(const ResponseWeiboShareLocksCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isracerewardshareopen()) {
      set_isracerewardshareopen(from.isracerewardshareopen());
    }
    if (from.has_istrackunlockinfoshareopen()) {
      set_istrackunlockinfoshareopen(from.istrackunlockinfoshareopen());
    }
    if (from.has_iscarunlockinfoshareopen()) {
      set_iscarunlockinfoshareopen(from.iscarunlockinfoshareopen());
    }
    if (from.has_isspeedwallshareopen()) {
      set_isspeedwallshareopen(from.isspeedwallshareopen());
    }
    if (from.has_isbindingweiboshareopen()) {
      set_isbindingweiboshareopen(from.isbindingweiboshareopen());
    }
    if (from.has_istournamentrewardshareopen()) {
      set_istournamentrewardshareopen(from.istournamentrewardshareopen());
    }
    if (from.has_isbuycarshareopen()) {
      set_isbuycarshareopen(from.isbuycarshareopen());
    }
    if (from.has_isupdateconsumableshareopen()) {
      set_isupdateconsumableshareopen(from.isupdateconsumableshareopen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isjaguarshareopen()) {
      set_isjaguarshareopen(from.isjaguarshareopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseWeiboShareLocksCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseWeiboShareLocksCommand::CopyFrom(const ResponseWeiboShareLocksCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseWeiboShareLocksCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void ResponseWeiboShareLocksCommand::Swap(ResponseWeiboShareLocksCommand* other) {
  if (other != this) {
    std::swap(isracerewardshareopen_, other->isracerewardshareopen_);
    std::swap(istrackunlockinfoshareopen_, other->istrackunlockinfoshareopen_);
    std::swap(iscarunlockinfoshareopen_, other->iscarunlockinfoshareopen_);
    std::swap(isspeedwallshareopen_, other->isspeedwallshareopen_);
    std::swap(isbindingweiboshareopen_, other->isbindingweiboshareopen_);
    std::swap(istournamentrewardshareopen_, other->istournamentrewardshareopen_);
    std::swap(isbuycarshareopen_, other->isbuycarshareopen_);
    std::swap(isupdateconsumableshareopen_, other->isupdateconsumableshareopen_);
    std::swap(isjaguarshareopen_, other->isjaguarshareopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseWeiboShareLocksCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseWeiboShareLocksCommand_descriptor_;
  metadata.reflection = ResponseWeiboShareLocksCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserWeiboInfo::kAccessTokenFieldNumber;
const int UserWeiboInfo::kUidFieldNumber;
#endif  // !_MSC_VER

UserWeiboInfo::UserWeiboInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserWeiboInfo::InitAsDefaultInstance() {
}

UserWeiboInfo::UserWeiboInfo(const UserWeiboInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserWeiboInfo::SharedCtor() {
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserWeiboInfo::~UserWeiboInfo() {
  SharedDtor();
}

void UserWeiboInfo::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void UserWeiboInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserWeiboInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserWeiboInfo_descriptor_;
}

const UserWeiboInfo& UserWeiboInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

UserWeiboInfo* UserWeiboInfo::default_instance_ = NULL;

UserWeiboInfo* UserWeiboInfo::New() const {
  return new UserWeiboInfo;
}

void UserWeiboInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserWeiboInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string access_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }
      
      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserWeiboInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->access_token(), output);
  }
  
  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserWeiboInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }
  
  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserWeiboInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }
    
    // required string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserWeiboInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserWeiboInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserWeiboInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserWeiboInfo::MergeFrom(const UserWeiboInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserWeiboInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserWeiboInfo::CopyFrom(const UserWeiboInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserWeiboInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UserWeiboInfo::Swap(UserWeiboInfo* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserWeiboInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserWeiboInfo_descriptor_;
  metadata.reflection = UserWeiboInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kNicknameFieldNumber;
const int UserInfo::kHeadUrlFieldNumber;
const int UserInfo::kHeadIndexFieldNumber;
const int UserInfo::kTierFieldNumber;
const int UserInfo::kRpLevelFieldNumber;
const int UserInfo::kRpExpFieldNumber;
const int UserInfo::kMostwantedNumFieldNumber;
const int UserInfo::kCurrencyFieldNumber;
const int UserInfo::kRmbFieldNumber;
const int UserInfo::kEnergyFieldNumber;
const int UserInfo::kAccountInfosFieldNumber;
const int UserInfo::kExpMaxFieldNumber;
const int UserInfo::kExpMinFieldNumber;
const int UserInfo::kFinishedFirstRaceFieldNumber;
const int UserInfo::kWeiboInfoFieldNumber;
const int UserInfo::kTutorialRewardIsGivenFieldNumber;
const int UserInfo::kRpMessageFieldNumber;
const int UserInfo::kIsNameChangedFieldNumber;
const int UserInfo::kAccessTokenFieldNumber;
const int UserInfo::kUidFieldNumber;
const int UserInfo::kEnergytimeFieldNumber;
const int UserInfo::kPropnumFieldNumber;
const int UserInfo::kPackageStatusFieldNumber;
const int UserInfo::kIsNobleFieldNumber;
const int UserInfo::kLeftNobleTimeFieldNumber;
const int UserInfo::kLeftGoldTimeFieldNumber;
const int UserInfo::kIsGoldUnlockedFieldNumber;
const int UserInfo::kFansRewardStatusFieldNumber;
const int UserInfo::kFansRewardLastTimeFieldNumber;
const int UserInfo::kMissionRewardStatusFieldNumber;
const int UserInfo::kMissionFinishStatusFieldNumber;
const int UserInfo::kRaceTimesFieldNumber;
const int UserInfo::kIsNewUserFieldNumber;
const int UserInfo::kLotteryTimesFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
  weiboinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::UserWeiboInfo*>(&::com::ea::eamobile::nfsmw::protoc::UserWeiboInfo::default_instance());
  rpmessage_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RPMessage*>(&::com::ea::eamobile::nfsmw::protoc::RPMessage::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headindex_ = 0;
  tier_ = 0;
  rplevel_ = 0;
  rpexp_ = 0;
  mostwantednum_ = 0;
  currency_ = 0;
  rmb_ = 0;
  energy_ = 0;
  expmax_ = 0;
  expmin_ = 0;
  finishedfirstrace_ = false;
  weiboinfo_ = NULL;
  tutorialrewardisgiven_ = false;
  rpmessage_ = NULL;
  isnamechanged_ = false;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  energytime_ = 0;
  packagestatus_ = 0;
  isnoble_ = false;
  leftnobletime_ = 0;
  leftgoldtime_ = 0;
  isgoldunlocked_ = false;
  fansrewardstatus_ = 0;
  fansrewardlasttime_ = 0;
  missionrewardstatus_ = 0;
  missionfinishstatus_ = 0;
  racetimes_ = 0;
  isnewuser_ = false;
  lotterytimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete weiboinfo_;
    delete rpmessage_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    headindex_ = 0;
    tier_ = 0;
    rplevel_ = 0;
    rpexp_ = 0;
    mostwantednum_ = 0;
    currency_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rmb_ = 0;
    energy_ = 0;
    expmax_ = 0;
    expmin_ = 0;
    finishedfirstrace_ = false;
    if (has_weiboinfo()) {
      if (weiboinfo_ != NULL) weiboinfo_->::com::ea::eamobile::nfsmw::protoc::UserWeiboInfo::Clear();
    }
    tutorialrewardisgiven_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_rpmessage()) {
      if (rpmessage_ != NULL) rpmessage_->::com::ea::eamobile::nfsmw::protoc::RPMessage::Clear();
    }
    isnamechanged_ = false;
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    energytime_ = 0;
    packagestatus_ = 0;
    isnoble_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    leftnobletime_ = 0;
    leftgoldtime_ = 0;
    isgoldunlocked_ = false;
    fansrewardstatus_ = 0;
    fansrewardlasttime_ = 0;
    missionrewardstatus_ = 0;
    missionfinishstatus_ = 0;
    racetimes_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    isnewuser_ = false;
    lotterytimes_ = 0;
  }
  accountinfos_.Clear();
  propnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headUrl;
        break;
      }
      
      // required string headUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tier;
        break;
      }
      
      // required int32 tier = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpLevel;
        break;
      }
      
      // required int32 rpLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rplevel_)));
          set_has_rplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rpExp;
        break;
      }
      
      // required int32 rpExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpexp_)));
          set_has_rpexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mostwantedNum;
        break;
      }
      
      // required int32 mostwantedNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mostwantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mostwantednum_)));
          set_has_mostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_currency;
        break;
      }
      
      // required int32 currency = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rmb;
        break;
      }
      
      // required int32 rmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_energy;
        break;
      }
      
      // required int32 energy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_accountInfos;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.AccountInfo accountInfos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accountinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_accountInfos;
        if (input->ExpectTag(96)) goto parse_expMax;
        break;
      }
      
      // optional int32 expMax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expmax_)));
          set_has_expmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_expMin;
        break;
      }
      
      // optional int32 expMin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expmin_)));
          set_has_expmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_finishedFirstRace;
        break;
      }
      
      // optional bool finishedFirstRace = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishedFirstRace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finishedfirstrace_)));
          set_has_finishedfirstrace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_weiboInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.UserWeiboInfo weiboInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weiboInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weiboinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tutorialRewardIsGiven;
        break;
      }
      
      // optional bool tutorialRewardIsGiven = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tutorialRewardIsGiven:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tutorialrewardisgiven_)));
          set_has_tutorialrewardisgiven();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_rpMessage;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RPMessage rpMessage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isNameChanged;
        break;
      }
      
      // optional bool isNameChanged = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNameChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnamechanged_)));
          set_has_isnamechanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_access_token;
        break;
      }
      
      // optional string access_token = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_uid;
        break;
      }
      
      // optional string uid = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_energytime;
        break;
      }
      
      // optional int32 energytime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energytime_)));
          set_has_energytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_propnum;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_propnum;
        if (input->ExpectTag(184)) goto parse_packageStatus;
        break;
      }
      
      // optional int32 packageStatus = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packageStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packagestatus_)));
          set_has_packagestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_isNoble;
        break;
      }
      
      // optional bool isNoble = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNoble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnoble_)));
          set_has_isnoble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_leftNobleTime;
        break;
      }
      
      // optional int32 leftNobleTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftNobleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnobletime_)));
          set_has_leftnobletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_leftGoldTime;
        break;
      }
      
      // optional int32 leftGoldTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftGoldTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftgoldtime_)));
          set_has_leftgoldtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_isGoldUnlocked;
        break;
      }
      
      // optional bool isGoldUnlocked = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGoldUnlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgoldunlocked_)));
          set_has_isgoldunlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_fansRewardStatus;
        break;
      }
      
      // optional int32 fansRewardStatus = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fansRewardStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fansrewardstatus_)));
          set_has_fansrewardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_fansRewardLastTime;
        break;
      }
      
      // optional int32 fansRewardLastTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fansRewardLastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fansrewardlasttime_)));
          set_has_fansrewardlasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_missionRewardStatus;
        break;
      }
      
      // optional int32 missionRewardStatus = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionRewardStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionrewardstatus_)));
          set_has_missionrewardstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_missionFinishStatus;
        break;
      }
      
      // optional int32 missionFinishStatus = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionFinishStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missionfinishstatus_)));
          set_has_missionfinishstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_raceTimes;
        break;
      }
      
      // optional int32 raceTimes = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raceTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &racetimes_)));
          set_has_racetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_isNewUser;
        break;
      }
      
      // optional bool isNewUser = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNewUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewuser_)));
          set_has_isnewuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_lotteryTimes;
        break;
      }
      
      // optional int32 lotteryTimes = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lotteryTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotterytimes_)));
          set_has_lotterytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }
  
  // required string headUrl = 2;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->headurl(), output);
  }
  
  // required int32 headIndex = 3;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headindex(), output);
  }
  
  // required int32 tier = 4;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tier(), output);
  }
  
  // required int32 rpLevel = 5;
  if (has_rplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rplevel(), output);
  }
  
  // required int32 rpExp = 6;
  if (has_rpexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rpexp(), output);
  }
  
  // required int32 mostwantedNum = 7;
  if (has_mostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mostwantednum(), output);
  }
  
  // required int32 currency = 8;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->currency(), output);
  }
  
  // required int32 rmb = 9;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rmb(), output);
  }
  
  // required int32 energy = 10;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->energy(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.AccountInfo accountInfos = 11;
  for (int i = 0; i < this->accountinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->accountinfos(i), output);
  }
  
  // optional int32 expMax = 12;
  if (has_expmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->expmax(), output);
  }
  
  // optional int32 expMin = 13;
  if (has_expmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->expmin(), output);
  }
  
  // optional bool finishedFirstRace = 14;
  if (has_finishedfirstrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->finishedfirstrace(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserWeiboInfo weiboInfo = 15;
  if (has_weiboinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->weiboinfo(), output);
  }
  
  // optional bool tutorialRewardIsGiven = 16;
  if (has_tutorialrewardisgiven()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->tutorialrewardisgiven(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RPMessage rpMessage = 17;
  if (has_rpmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->rpmessage(), output);
  }
  
  // optional bool isNameChanged = 18;
  if (has_isnamechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isnamechanged(), output);
  }
  
  // optional string access_token = 19;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->access_token(), output);
  }
  
  // optional string uid = 20;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->uid(), output);
  }
  
  // optional int32 energytime = 21;
  if (has_energytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->energytime(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 22;
  for (int i = 0; i < this->propnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->propnum(i), output);
  }
  
  // optional int32 packageStatus = 23;
  if (has_packagestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->packagestatus(), output);
  }
  
  // optional bool isNoble = 24;
  if (has_isnoble()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->isnoble(), output);
  }
  
  // optional int32 leftNobleTime = 25;
  if (has_leftnobletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->leftnobletime(), output);
  }
  
  // optional int32 leftGoldTime = 26;
  if (has_leftgoldtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->leftgoldtime(), output);
  }
  
  // optional bool isGoldUnlocked = 27;
  if (has_isgoldunlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->isgoldunlocked(), output);
  }
  
  // optional int32 fansRewardStatus = 28;
  if (has_fansrewardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->fansrewardstatus(), output);
  }
  
  // optional int32 fansRewardLastTime = 29;
  if (has_fansrewardlasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->fansrewardlasttime(), output);
  }
  
  // optional int32 missionRewardStatus = 30;
  if (has_missionrewardstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->missionrewardstatus(), output);
  }
  
  // optional int32 missionFinishStatus = 31;
  if (has_missionfinishstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->missionfinishstatus(), output);
  }
  
  // optional int32 raceTimes = 32;
  if (has_racetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->racetimes(), output);
  }
  
  // optional bool isNewUser = 33;
  if (has_isnewuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->isnewuser(), output);
  }
  
  // optional int32 lotteryTimes = 34;
  if (has_lotterytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->lotterytimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }
  
  // required string headUrl = 2;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headurl(), target);
  }
  
  // required int32 headIndex = 3;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headindex(), target);
  }
  
  // required int32 tier = 4;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tier(), target);
  }
  
  // required int32 rpLevel = 5;
  if (has_rplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rplevel(), target);
  }
  
  // required int32 rpExp = 6;
  if (has_rpexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rpexp(), target);
  }
  
  // required int32 mostwantedNum = 7;
  if (has_mostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mostwantednum(), target);
  }
  
  // required int32 currency = 8;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->currency(), target);
  }
  
  // required int32 rmb = 9;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rmb(), target);
  }
  
  // required int32 energy = 10;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->energy(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.AccountInfo accountInfos = 11;
  for (int i = 0; i < this->accountinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->accountinfos(i), target);
  }
  
  // optional int32 expMax = 12;
  if (has_expmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->expmax(), target);
  }
  
  // optional int32 expMin = 13;
  if (has_expmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->expmin(), target);
  }
  
  // optional bool finishedFirstRace = 14;
  if (has_finishedfirstrace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->finishedfirstrace(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserWeiboInfo weiboInfo = 15;
  if (has_weiboinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->weiboinfo(), target);
  }
  
  // optional bool tutorialRewardIsGiven = 16;
  if (has_tutorialrewardisgiven()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->tutorialrewardisgiven(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RPMessage rpMessage = 17;
  if (has_rpmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->rpmessage(), target);
  }
  
  // optional bool isNameChanged = 18;
  if (has_isnamechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isnamechanged(), target);
  }
  
  // optional string access_token = 19;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->access_token(), target);
  }
  
  // optional string uid = 20;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->uid(), target);
  }
  
  // optional int32 energytime = 21;
  if (has_energytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->energytime(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 22;
  for (int i = 0; i < this->propnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->propnum(i), target);
  }
  
  // optional int32 packageStatus = 23;
  if (has_packagestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->packagestatus(), target);
  }
  
  // optional bool isNoble = 24;
  if (has_isnoble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->isnoble(), target);
  }
  
  // optional int32 leftNobleTime = 25;
  if (has_leftnobletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->leftnobletime(), target);
  }
  
  // optional int32 leftGoldTime = 26;
  if (has_leftgoldtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->leftgoldtime(), target);
  }
  
  // optional bool isGoldUnlocked = 27;
  if (has_isgoldunlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->isgoldunlocked(), target);
  }
  
  // optional int32 fansRewardStatus = 28;
  if (has_fansrewardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->fansrewardstatus(), target);
  }
  
  // optional int32 fansRewardLastTime = 29;
  if (has_fansrewardlasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->fansrewardlasttime(), target);
  }
  
  // optional int32 missionRewardStatus = 30;
  if (has_missionrewardstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->missionrewardstatus(), target);
  }
  
  // optional int32 missionFinishStatus = 31;
  if (has_missionfinishstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->missionfinishstatus(), target);
  }
  
  // optional int32 raceTimes = 32;
  if (has_racetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->racetimes(), target);
  }
  
  // optional bool isNewUser = 33;
  if (has_isnewuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->isnewuser(), target);
  }
  
  // optional int32 lotteryTimes = 34;
  if (has_lotterytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->lotterytimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // required string headUrl = 2;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // required int32 headIndex = 3;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // required int32 tier = 4;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }
    
    // required int32 rpLevel = 5;
    if (has_rplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rplevel());
    }
    
    // required int32 rpExp = 6;
    if (has_rpexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpexp());
    }
    
    // required int32 mostwantedNum = 7;
    if (has_mostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mostwantednum());
    }
    
    // required int32 currency = 8;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 rmb = 9;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rmb());
    }
    
    // required int32 energy = 10;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // optional int32 expMax = 12;
    if (has_expmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expmax());
    }
    
    // optional int32 expMin = 13;
    if (has_expmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expmin());
    }
    
    // optional bool finishedFirstRace = 14;
    if (has_finishedfirstrace()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.UserWeiboInfo weiboInfo = 15;
    if (has_weiboinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weiboinfo());
    }
    
    // optional bool tutorialRewardIsGiven = 16;
    if (has_tutorialrewardisgiven()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RPMessage rpMessage = 17;
    if (has_rpmessage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpmessage());
    }
    
    // optional bool isNameChanged = 18;
    if (has_isnamechanged()) {
      total_size += 2 + 1;
    }
    
    // optional string access_token = 19;
    if (has_access_token()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }
    
    // optional string uid = 20;
    if (has_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional int32 energytime = 21;
    if (has_energytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energytime());
    }
    
    // optional int32 packageStatus = 23;
    if (has_packagestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packagestatus());
    }
    
    // optional bool isNoble = 24;
    if (has_isnoble()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 leftNobleTime = 25;
    if (has_leftnobletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnobletime());
    }
    
    // optional int32 leftGoldTime = 26;
    if (has_leftgoldtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftgoldtime());
    }
    
    // optional bool isGoldUnlocked = 27;
    if (has_isgoldunlocked()) {
      total_size += 2 + 1;
    }
    
    // optional int32 fansRewardStatus = 28;
    if (has_fansrewardstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fansrewardstatus());
    }
    
    // optional int32 fansRewardLastTime = 29;
    if (has_fansrewardlasttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fansrewardlasttime());
    }
    
    // optional int32 missionRewardStatus = 30;
    if (has_missionrewardstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionrewardstatus());
    }
    
    // optional int32 missionFinishStatus = 31;
    if (has_missionfinishstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missionfinishstatus());
    }
    
    // optional int32 raceTimes = 32;
    if (has_racetimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->racetimes());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool isNewUser = 33;
    if (has_isnewuser()) {
      total_size += 2 + 1;
    }
    
    // optional int32 lotteryTimes = 34;
    if (has_lotterytimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotterytimes());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.AccountInfo accountInfos = 11;
  total_size += 1 * this->accountinfos_size();
  for (int i = 0; i < this->accountinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accountinfos(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 22;
  total_size += 2 * this->propnum_size();
  for (int i = 0; i < this->propnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propnum(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  accountinfos_.MergeFrom(from.accountinfos_);
  propnum_.MergeFrom(from.propnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_rplevel()) {
      set_rplevel(from.rplevel());
    }
    if (from.has_rpexp()) {
      set_rpexp(from.rpexp());
    }
    if (from.has_mostwantednum()) {
      set_mostwantednum(from.mostwantednum());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_expmax()) {
      set_expmax(from.expmax());
    }
    if (from.has_expmin()) {
      set_expmin(from.expmin());
    }
    if (from.has_finishedfirstrace()) {
      set_finishedfirstrace(from.finishedfirstrace());
    }
    if (from.has_weiboinfo()) {
      mutable_weiboinfo()->::com::ea::eamobile::nfsmw::protoc::UserWeiboInfo::MergeFrom(from.weiboinfo());
    }
    if (from.has_tutorialrewardisgiven()) {
      set_tutorialrewardisgiven(from.tutorialrewardisgiven());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rpmessage()) {
      mutable_rpmessage()->::com::ea::eamobile::nfsmw::protoc::RPMessage::MergeFrom(from.rpmessage());
    }
    if (from.has_isnamechanged()) {
      set_isnamechanged(from.isnamechanged());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_energytime()) {
      set_energytime(from.energytime());
    }
    if (from.has_packagestatus()) {
      set_packagestatus(from.packagestatus());
    }
    if (from.has_isnoble()) {
      set_isnoble(from.isnoble());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_leftnobletime()) {
      set_leftnobletime(from.leftnobletime());
    }
    if (from.has_leftgoldtime()) {
      set_leftgoldtime(from.leftgoldtime());
    }
    if (from.has_isgoldunlocked()) {
      set_isgoldunlocked(from.isgoldunlocked());
    }
    if (from.has_fansrewardstatus()) {
      set_fansrewardstatus(from.fansrewardstatus());
    }
    if (from.has_fansrewardlasttime()) {
      set_fansrewardlasttime(from.fansrewardlasttime());
    }
    if (from.has_missionrewardstatus()) {
      set_missionrewardstatus(from.missionrewardstatus());
    }
    if (from.has_missionfinishstatus()) {
      set_missionfinishstatus(from.missionfinishstatus());
    }
    if (from.has_racetimes()) {
      set_racetimes(from.racetimes());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_isnewuser()) {
      set_isnewuser(from.isnewuser());
    }
    if (from.has_lotterytimes()) {
      set_lotterytimes(from.lotterytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  for (int i = 0; i < accountinfos_size(); i++) {
    if (!this->accountinfos(i).IsInitialized()) return false;
  }
  if (has_weiboinfo()) {
    if (!this->weiboinfo().IsInitialized()) return false;
  }
  if (has_rpmessage()) {
    if (!this->rpmessage().IsInitialized()) return false;
  }
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(headurl_, other->headurl_);
    std::swap(headindex_, other->headindex_);
    std::swap(tier_, other->tier_);
    std::swap(rplevel_, other->rplevel_);
    std::swap(rpexp_, other->rpexp_);
    std::swap(mostwantednum_, other->mostwantednum_);
    std::swap(currency_, other->currency_);
    std::swap(rmb_, other->rmb_);
    std::swap(energy_, other->energy_);
    accountinfos_.Swap(&other->accountinfos_);
    std::swap(expmax_, other->expmax_);
    std::swap(expmin_, other->expmin_);
    std::swap(finishedfirstrace_, other->finishedfirstrace_);
    std::swap(weiboinfo_, other->weiboinfo_);
    std::swap(tutorialrewardisgiven_, other->tutorialrewardisgiven_);
    std::swap(rpmessage_, other->rpmessage_);
    std::swap(isnamechanged_, other->isnamechanged_);
    std::swap(access_token_, other->access_token_);
    std::swap(uid_, other->uid_);
    std::swap(energytime_, other->energytime_);
    propnum_.Swap(&other->propnum_);
    std::swap(packagestatus_, other->packagestatus_);
    std::swap(isnoble_, other->isnoble_);
    std::swap(leftnobletime_, other->leftnobletime_);
    std::swap(leftgoldtime_, other->leftgoldtime_);
    std::swap(isgoldunlocked_, other->isgoldunlocked_);
    std::swap(fansrewardstatus_, other->fansrewardstatus_);
    std::swap(fansrewardlasttime_, other->fansrewardlasttime_);
    std::swap(missionrewardstatus_, other->missionrewardstatus_);
    std::swap(missionfinishstatus_, other->missionfinishstatus_);
    std::swap(racetimes_, other->racetimes_);
    std::swap(isnewuser_, other->isnewuser_);
    std::swap(lotterytimes_, other->lotterytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestModifyUserInfoCommand::kHeadIndexFieldNumber;
const int RequestModifyUserInfoCommand::kNicknameFieldNumber;
#endif  // !_MSC_VER

RequestModifyUserInfoCommand::RequestModifyUserInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestModifyUserInfoCommand::InitAsDefaultInstance() {
}

RequestModifyUserInfoCommand::RequestModifyUserInfoCommand(const RequestModifyUserInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestModifyUserInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  headindex_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestModifyUserInfoCommand::~RequestModifyUserInfoCommand() {
  SharedDtor();
}

void RequestModifyUserInfoCommand::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RequestModifyUserInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestModifyUserInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestModifyUserInfoCommand_descriptor_;
}

const RequestModifyUserInfoCommand& RequestModifyUserInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestModifyUserInfoCommand* RequestModifyUserInfoCommand::default_instance_ = NULL;

RequestModifyUserInfoCommand* RequestModifyUserInfoCommand::New() const {
  return new RequestModifyUserInfoCommand;
}

void RequestModifyUserInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    headindex_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestModifyUserInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 headIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestModifyUserInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 headIndex = 1;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->headindex(), output);
  }
  
  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestModifyUserInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 headIndex = 1;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->headindex(), target);
  }
  
  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestModifyUserInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 headIndex = 1;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestModifyUserInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestModifyUserInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestModifyUserInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestModifyUserInfoCommand::MergeFrom(const RequestModifyUserInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestModifyUserInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestModifyUserInfoCommand::CopyFrom(const RequestModifyUserInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestModifyUserInfoCommand::IsInitialized() const {
  
  return true;
}

void RequestModifyUserInfoCommand::Swap(RequestModifyUserInfoCommand* other) {
  if (other != this) {
    std::swap(headindex_, other->headindex_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestModifyUserInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestModifyUserInfoCommand_descriptor_;
  metadata.reflection = RequestModifyUserInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseModifyUserInfoCommand::kResultFieldNumber;
const int ResponseModifyUserInfoCommand::kUserinfoFieldNumber;
#endif  // !_MSC_VER

ResponseModifyUserInfoCommand::ResponseModifyUserInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseModifyUserInfoCommand::InitAsDefaultInstance() {
  result_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ErrorCommand*>(&::com::ea::eamobile::nfsmw::protoc::ErrorCommand::default_instance());
  userinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::UserInfo*>(&::com::ea::eamobile::nfsmw::protoc::UserInfo::default_instance());
}

ResponseModifyUserInfoCommand::ResponseModifyUserInfoCommand(const ResponseModifyUserInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseModifyUserInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseModifyUserInfoCommand::~ResponseModifyUserInfoCommand() {
  SharedDtor();
}

void ResponseModifyUserInfoCommand::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete userinfo_;
  }
}

void ResponseModifyUserInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseModifyUserInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseModifyUserInfoCommand_descriptor_;
}

const ResponseModifyUserInfoCommand& ResponseModifyUserInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseModifyUserInfoCommand* ResponseModifyUserInfoCommand::default_instance_ = NULL;

ResponseModifyUserInfoCommand* ResponseModifyUserInfoCommand::New() const {
  return new ResponseModifyUserInfoCommand;
}

void ResponseModifyUserInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != NULL) result_->::com::ea::eamobile::nfsmw::protoc::ErrorCommand::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::com::ea::eamobile::nfsmw::protoc::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseModifyUserInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userinfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseModifyUserInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userinfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseModifyUserInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userinfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseModifyUserInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userinfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseModifyUserInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseModifyUserInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseModifyUserInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseModifyUserInfoCommand::MergeFrom(const ResponseModifyUserInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::com::ea::eamobile::nfsmw::protoc::ErrorCommand::MergeFrom(from.result());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::com::ea::eamobile::nfsmw::protoc::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseModifyUserInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseModifyUserInfoCommand::CopyFrom(const ResponseModifyUserInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseModifyUserInfoCommand::IsInitialized() const {
  
  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseModifyUserInfoCommand::Swap(ResponseModifyUserInfoCommand* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseModifyUserInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseModifyUserInfoCommand_descriptor_;
  metadata.reflection = ResponseModifyUserInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUserInfoCommand::kUserInfoFieldNumber;
const int ResponseUserInfoCommand::kTokenFieldNumber;
const int ResponseUserInfoCommand::kDefaultHintFieldNumber;
#endif  // !_MSC_VER

ResponseUserInfoCommand::ResponseUserInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseUserInfoCommand::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::UserInfo*>(&::com::ea::eamobile::nfsmw::protoc::UserInfo::default_instance());
}

ResponseUserInfoCommand::ResponseUserInfoCommand(const ResponseUserInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUserInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaulthint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUserInfoCommand::~ResponseUserInfoCommand() {
  SharedDtor();
}

void ResponseUserInfoCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (defaulthint_ != &::google::protobuf::internal::kEmptyString) {
    delete defaulthint_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void ResponseUserInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUserInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUserInfoCommand_descriptor_;
}

const ResponseUserInfoCommand& ResponseUserInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseUserInfoCommand* ResponseUserInfoCommand::default_instance_ = NULL;

ResponseUserInfoCommand* ResponseUserInfoCommand::New() const {
  return new ResponseUserInfoCommand;
}

void ResponseUserInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::com::ea::eamobile::nfsmw::protoc::UserInfo::Clear();
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_defaulthint()) {
      if (defaulthint_ != &::google::protobuf::internal::kEmptyString) {
        defaulthint_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseUserInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defaultHint;
        break;
      }
      
      // optional string defaultHint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultHint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaulthint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defaulthint().data(), this->defaulthint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUserInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // optional string defaultHint = 3;
  if (has_defaulthint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaulthint().data(), this->defaulthint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->defaulthint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseUserInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // optional string defaultHint = 3;
  if (has_defaulthint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaulthint().data(), this->defaulthint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->defaulthint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseUserInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional string defaultHint = 3;
    if (has_defaulthint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaulthint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUserInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseUserInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseUserInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseUserInfoCommand::MergeFrom(const ResponseUserInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::com::ea::eamobile::nfsmw::protoc::UserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_defaulthint()) {
      set_defaulthint(from.defaulthint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseUserInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUserInfoCommand::CopyFrom(const ResponseUserInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUserInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseUserInfoCommand::Swap(ResponseUserInfoCommand* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(token_, other->token_);
    std::swap(defaulthint_, other->defaulthint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseUserInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUserInfoCommand_descriptor_;
  metadata.reflection = ResponseUserInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostInfo::kSuccessFieldNumber;
const int GhostInfo::kRaceTimeFieldNumber;
const int GhostInfo::kAverageSpdFieldNumber;
const int GhostInfo::kPositionFieldNumber;
const int GhostInfo::kModeIdFieldNumber;
const int GhostInfo::kRaceEventNameFieldNumber;
const int GhostInfo::kCarIDFieldNumber;
const int GhostInfo::kCarColorIndexFieldNumber;
const int GhostInfo::kCarModTypeFieldNumber;
const int GhostInfo::kCarModValueFieldNumber;
const int GhostInfo::kCarScoreFieldNumber;
const int GhostInfo::kCarModIdFieldNumber;
const int GhostInfo::kCarModLevelFieldNumber;
const int GhostInfo::kRaceResultStateFieldNumber;
const int GhostInfo::kCarPrefabFileFieldNumber;
const int GhostInfo::kCarTopSpdFieldNumber;
const int GhostInfo::kCarMidSpdFieldNumber;
const int GhostInfo::kTrackLengthFieldNumber;
#endif  // !_MSC_VER

GhostInfo::GhostInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GhostInfo::InitAsDefaultInstance() {
}

GhostInfo::GhostInfo(const GhostInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GhostInfo::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  racetime_ = 0;
  averagespd_ = 0;
  position_ = 0;
  modeid_ = 0;
  raceeventname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carcolorindex_ = 0;
  carscore_ = 0;
  raceresultstate_ = 0;
  carprefabfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cartopspd_ = 0;
  carmidspd_ = 0;
  tracklength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostInfo::~GhostInfo() {
  SharedDtor();
}

void GhostInfo::SharedDtor() {
  if (raceeventname_ != &::google::protobuf::internal::kEmptyString) {
    delete raceeventname_;
  }
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (carprefabfile_ != &::google::protobuf::internal::kEmptyString) {
    delete carprefabfile_;
  }
  if (this != default_instance_) {
  }
}

void GhostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostInfo_descriptor_;
}

const GhostInfo& GhostInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

GhostInfo* GhostInfo::default_instance_ = NULL;

GhostInfo* GhostInfo::New() const {
  return new GhostInfo;
}

void GhostInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    racetime_ = 0;
    averagespd_ = 0;
    position_ = 0;
    modeid_ = 0;
    if (has_raceeventname()) {
      if (raceeventname_ != &::google::protobuf::internal::kEmptyString) {
        raceeventname_->clear();
      }
    }
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    carcolorindex_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    carscore_ = 0;
    raceresultstate_ = 0;
    if (has_carprefabfile()) {
      if (carprefabfile_ != &::google::protobuf::internal::kEmptyString) {
        carprefabfile_->clear();
      }
    }
    cartopspd_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    carmidspd_ = 0;
    tracklength_ = 0;
  }
  carmodtype_.Clear();
  carmodvalue_.Clear();
  carmodid_.Clear();
  carmodlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_raceTime;
        break;
      }
      
      // required float raceTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_raceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &racetime_)));
          set_has_racetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_averageSpd;
        break;
      }
      
      // required float averageSpd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagespd_)));
          set_has_averagespd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }
      
      // required int32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modeId;
        break;
      }
      
      // required int32 modeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_raceEventName;
        break;
      }
      
      // required string raceEventName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceEventName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raceeventname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raceeventname().data(), this->raceeventname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_carID;
        break;
      }
      
      // required string carID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_carColorIndex;
        break;
      }
      
      // required int32 carColorIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carColorIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carcolorindex_)));
          set_has_carcolorindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carModType;
        break;
      }
      
      // repeated int32 carModType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_carmodtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carModType;
        if (input->ExpectTag(85)) goto parse_carModValue;
        break;
      }
      
      // repeated float carModValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carModValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 85, input, this->mutable_carmodvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_carmodvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_carModValue;
        if (input->ExpectTag(88)) goto parse_carScore;
        break;
      }
      
      // optional int32 carScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carscore_)));
          set_has_carscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_carModId;
        break;
      }
      
      // repeated int32 carModId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_carmodid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_carModId;
        if (input->ExpectTag(104)) goto parse_carModLevel;
        break;
      }
      
      // repeated int32 carModLevel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_carmodlevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodlevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_carModLevel;
        if (input->ExpectTag(112)) goto parse_raceResultState;
        break;
      }
      
      // optional int32 raceResultState = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raceResultState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raceresultstate_)));
          set_has_raceresultstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_carPrefabFile;
        break;
      }
      
      // optional string carPrefabFile = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carPrefabFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carprefabfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carprefabfile().data(), this->carprefabfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_carTopSpd;
        break;
      }
      
      // optional int32 carTopSpd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carTopSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cartopspd_)));
          set_has_cartopspd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_carMidSpd;
        break;
      }
      
      // optional int32 carMidSpd = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carMidSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carmidspd_)));
          set_has_carmidspd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_trackLength;
        break;
      }
      
      // optional float trackLength = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trackLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracklength_)));
          set_has_tracklength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GhostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required float raceTime = 2;
  if (has_racetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->racetime(), output);
  }
  
  // required float averageSpd = 3;
  if (has_averagespd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->averagespd(), output);
  }
  
  // required int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }
  
  // required int32 modeId = 5;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->modeid(), output);
  }
  
  // required string raceEventName = 6;
  if (has_raceeventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raceeventname().data(), this->raceeventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->raceeventname(), output);
  }
  
  // required string carID = 7;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->carid(), output);
  }
  
  // required int32 carColorIndex = 8;
  if (has_carcolorindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->carcolorindex(), output);
  }
  
  // repeated int32 carModType = 9;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->carmodtype(i), output);
  }
  
  // repeated float carModValue = 10;
  for (int i = 0; i < this->carmodvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      10, this->carmodvalue(i), output);
  }
  
  // optional int32 carScore = 11;
  if (has_carscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->carscore(), output);
  }
  
  // repeated int32 carModId = 12;
  for (int i = 0; i < this->carmodid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->carmodid(i), output);
  }
  
  // repeated int32 carModLevel = 13;
  for (int i = 0; i < this->carmodlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->carmodlevel(i), output);
  }
  
  // optional int32 raceResultState = 14;
  if (has_raceresultstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->raceresultstate(), output);
  }
  
  // optional string carPrefabFile = 15;
  if (has_carprefabfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carprefabfile().data(), this->carprefabfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->carprefabfile(), output);
  }
  
  // optional int32 carTopSpd = 16;
  if (has_cartopspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cartopspd(), output);
  }
  
  // optional int32 carMidSpd = 17;
  if (has_carmidspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->carmidspd(), output);
  }
  
  // optional float trackLength = 18;
  if (has_tracklength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tracklength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GhostInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required float raceTime = 2;
  if (has_racetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->racetime(), target);
  }
  
  // required float averageSpd = 3;
  if (has_averagespd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->averagespd(), target);
  }
  
  // required int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }
  
  // required int32 modeId = 5;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->modeid(), target);
  }
  
  // required string raceEventName = 6;
  if (has_raceeventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raceeventname().data(), this->raceeventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->raceeventname(), target);
  }
  
  // required string carID = 7;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->carid(), target);
  }
  
  // required int32 carColorIndex = 8;
  if (has_carcolorindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->carcolorindex(), target);
  }
  
  // repeated int32 carModType = 9;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->carmodtype(i), target);
  }
  
  // repeated float carModValue = 10;
  for (int i = 0; i < this->carmodvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(10, this->carmodvalue(i), target);
  }
  
  // optional int32 carScore = 11;
  if (has_carscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->carscore(), target);
  }
  
  // repeated int32 carModId = 12;
  for (int i = 0; i < this->carmodid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->carmodid(i), target);
  }
  
  // repeated int32 carModLevel = 13;
  for (int i = 0; i < this->carmodlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->carmodlevel(i), target);
  }
  
  // optional int32 raceResultState = 14;
  if (has_raceresultstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->raceresultstate(), target);
  }
  
  // optional string carPrefabFile = 15;
  if (has_carprefabfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carprefabfile().data(), this->carprefabfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->carprefabfile(), target);
  }
  
  // optional int32 carTopSpd = 16;
  if (has_cartopspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cartopspd(), target);
  }
  
  // optional int32 carMidSpd = 17;
  if (has_carmidspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->carmidspd(), target);
  }
  
  // optional float trackLength = 18;
  if (has_tracklength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->tracklength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GhostInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required float raceTime = 2;
    if (has_racetime()) {
      total_size += 1 + 4;
    }
    
    // required float averageSpd = 3;
    if (has_averagespd()) {
      total_size += 1 + 4;
    }
    
    // required int32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
    // required int32 modeId = 5;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required string raceEventName = 6;
    if (has_raceeventname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raceeventname());
    }
    
    // required string carID = 7;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 carColorIndex = 8;
    if (has_carcolorindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carcolorindex());
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 carScore = 11;
    if (has_carscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carscore());
    }
    
    // optional int32 raceResultState = 14;
    if (has_raceresultstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raceresultstate());
    }
    
    // optional string carPrefabFile = 15;
    if (has_carprefabfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carprefabfile());
    }
    
    // optional int32 carTopSpd = 16;
    if (has_cartopspd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cartopspd());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 carMidSpd = 17;
    if (has_carmidspd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carmidspd());
    }
    
    // optional float trackLength = 18;
    if (has_tracklength()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated int32 carModType = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodtype(i));
    }
    total_size += 1 * this->carmodtype_size() + data_size;
  }
  
  // repeated float carModValue = 10;
  {
    int data_size = 0;
    data_size = 4 * this->carmodvalue_size();
    total_size += 1 * this->carmodvalue_size() + data_size;
  }
  
  // repeated int32 carModId = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodid(i));
    }
    total_size += 1 * this->carmodid_size() + data_size;
  }
  
  // repeated int32 carModLevel = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodlevel(i));
    }
    total_size += 1 * this->carmodlevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostInfo::MergeFrom(const GhostInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  carmodtype_.MergeFrom(from.carmodtype_);
  carmodvalue_.MergeFrom(from.carmodvalue_);
  carmodid_.MergeFrom(from.carmodid_);
  carmodlevel_.MergeFrom(from.carmodlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_racetime()) {
      set_racetime(from.racetime());
    }
    if (from.has_averagespd()) {
      set_averagespd(from.averagespd());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_raceeventname()) {
      set_raceeventname(from.raceeventname());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_carcolorindex()) {
      set_carcolorindex(from.carcolorindex());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_carscore()) {
      set_carscore(from.carscore());
    }
    if (from.has_raceresultstate()) {
      set_raceresultstate(from.raceresultstate());
    }
    if (from.has_carprefabfile()) {
      set_carprefabfile(from.carprefabfile());
    }
    if (from.has_cartopspd()) {
      set_cartopspd(from.cartopspd());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_carmidspd()) {
      set_carmidspd(from.carmidspd());
    }
    if (from.has_tracklength()) {
      set_tracklength(from.tracklength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostInfo::CopyFrom(const GhostInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void GhostInfo::Swap(GhostInfo* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(racetime_, other->racetime_);
    std::swap(averagespd_, other->averagespd_);
    std::swap(position_, other->position_);
    std::swap(modeid_, other->modeid_);
    std::swap(raceeventname_, other->raceeventname_);
    std::swap(carid_, other->carid_);
    std::swap(carcolorindex_, other->carcolorindex_);
    carmodtype_.Swap(&other->carmodtype_);
    carmodvalue_.Swap(&other->carmodvalue_);
    std::swap(carscore_, other->carscore_);
    carmodid_.Swap(&other->carmodid_);
    carmodlevel_.Swap(&other->carmodlevel_);
    std::swap(raceresultstate_, other->raceresultstate_);
    std::swap(carprefabfile_, other->carprefabfile_);
    std::swap(cartopspd_, other->cartopspd_);
    std::swap(carmidspd_, other->carmidspd_);
    std::swap(tracklength_, other->tracklength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostInfo_descriptor_;
  metadata.reflection = GhostInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RacerInfo::kNameFieldNumber;
const int RacerInfo::kHeadIndexFieldNumber;
const int RacerInfo::kHeadUrlFieldNumber;
const int RacerInfo::kGhostFieldNumber;
const int RacerInfo::kRpLvFieldNumber;
#endif  // !_MSC_VER

RacerInfo::RacerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RacerInfo::InitAsDefaultInstance() {
  ghost_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::GhostInfo*>(&::com::ea::eamobile::nfsmw::protoc::GhostInfo::default_instance());
}

RacerInfo::RacerInfo(const RacerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RacerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ghost_ = NULL;
  rplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RacerInfo::~RacerInfo() {
  SharedDtor();
}

void RacerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
    delete ghost_;
  }
}

void RacerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RacerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RacerInfo_descriptor_;
}

const RacerInfo& RacerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RacerInfo* RacerInfo::default_instance_ = NULL;

RacerInfo* RacerInfo::New() const {
  return new RacerInfo;
}

void RacerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    if (has_ghost()) {
      if (ghost_ != NULL) ghost_->::com::ea::eamobile::nfsmw::protoc::GhostInfo::Clear();
    }
    rplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RacerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ghost;
        break;
      }
      
      // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpLv;
        break;
      }
      
      // optional int32 rpLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rplv_)));
          set_has_rplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RacerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 headIndex = 2;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headindex(), output);
  }
  
  // optional string headUrl = 3;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headurl(), output);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghost = 4;
  if (has_ghost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ghost(), output);
  }
  
  // optional int32 rpLv = 5;
  if (has_rplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rplv(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RacerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 headIndex = 2;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headindex(), target);
  }
  
  // optional string headUrl = 3;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headurl(), target);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghost = 4;
  if (has_ghost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ghost(), target);
  }
  
  // optional int32 rpLv = 5;
  if (has_rplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rplv(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RacerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 headIndex = 2;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 3;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghost = 4;
    if (has_ghost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghost());
    }
    
    // optional int32 rpLv = 5;
    if (has_rplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rplv());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RacerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RacerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RacerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RacerInfo::MergeFrom(const RacerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_ghost()) {
      mutable_ghost()->::com::ea::eamobile::nfsmw::protoc::GhostInfo::MergeFrom(from.ghost());
    }
    if (from.has_rplv()) {
      set_rplv(from.rplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RacerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacerInfo::CopyFrom(const RacerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_ghost()) {
    if (!this->ghost().IsInitialized()) return false;
  }
  return true;
}

void RacerInfo::Swap(RacerInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(ghost_, other->ghost_);
    std::swap(rplv_, other->rplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RacerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RacerInfo_descriptor_;
  metadata.reflection = RacerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestModeInfoCommand::kGameModeFieldNumber;
const int RequestModeInfoCommand::kModeIdFieldNumber;
const int RequestModeInfoCommand::kRaceTypeFieldNumber;
#endif  // !_MSC_VER

RequestModeInfoCommand::RequestModeInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestModeInfoCommand::InitAsDefaultInstance() {
}

RequestModeInfoCommand::RequestModeInfoCommand(const RequestModeInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestModeInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  gamemode_ = 0;
  modeid_ = 0;
  racetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestModeInfoCommand::~RequestModeInfoCommand() {
  SharedDtor();
}

void RequestModeInfoCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestModeInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestModeInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestModeInfoCommand_descriptor_;
}

const RequestModeInfoCommand& RequestModeInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestModeInfoCommand* RequestModeInfoCommand::default_instance_ = NULL;

RequestModeInfoCommand* RequestModeInfoCommand::New() const {
  return new RequestModeInfoCommand;
}

void RequestModeInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamemode_ = 0;
    modeid_ = 0;
    racetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestModeInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
          set_has_gamemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modeId;
        break;
      }
      
      // required int32 modeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raceType;
        break;
      }
      
      // required int32 raceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &racetype_)));
          set_has_racetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestModeInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameMode = 1;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamemode(), output);
  }
  
  // required int32 modeId = 2;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modeid(), output);
  }
  
  // required int32 raceType = 3;
  if (has_racetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->racetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestModeInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameMode = 1;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamemode(), target);
  }
  
  // required int32 modeId = 2;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modeid(), target);
  }
  
  // required int32 raceType = 3;
  if (has_racetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->racetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestModeInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameMode = 1;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemode());
    }
    
    // required int32 modeId = 2;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required int32 raceType = 3;
    if (has_racetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->racetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestModeInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestModeInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestModeInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestModeInfoCommand::MergeFrom(const RequestModeInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_racetype()) {
      set_racetype(from.racetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestModeInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestModeInfoCommand::CopyFrom(const RequestModeInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestModeInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RequestModeInfoCommand::Swap(RequestModeInfoCommand* other) {
  if (other != this) {
    std::swap(gamemode_, other->gamemode_);
    std::swap(modeid_, other->modeid_);
    std::swap(racetype_, other->racetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestModeInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestModeInfoCommand_descriptor_;
  metadata.reflection = RequestModeInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRacerForGhostCommand::kRacersFieldNumber;
const int ResponseRacerForGhostCommand::kGhostAvergeEolFieldNumber;
#endif  // !_MSC_VER

ResponseRacerForGhostCommand::ResponseRacerForGhostCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRacerForGhostCommand::InitAsDefaultInstance() {
}

ResponseRacerForGhostCommand::ResponseRacerForGhostCommand(const ResponseRacerForGhostCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRacerForGhostCommand::SharedCtor() {
  _cached_size_ = 0;
  ghostavergeeol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRacerForGhostCommand::~ResponseRacerForGhostCommand() {
  SharedDtor();
}

void ResponseRacerForGhostCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseRacerForGhostCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRacerForGhostCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRacerForGhostCommand_descriptor_;
}

const ResponseRacerForGhostCommand& ResponseRacerForGhostCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseRacerForGhostCommand* ResponseRacerForGhostCommand::default_instance_ = NULL;

ResponseRacerForGhostCommand* ResponseRacerForGhostCommand::New() const {
  return new ResponseRacerForGhostCommand;
}

void ResponseRacerForGhostCommand::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ghostavergeeol_ = 0;
  }
  racers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRacerForGhostCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.RacerInfo racers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_racers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_racers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_racers;
        if (input->ExpectTag(16)) goto parse_ghostAvergeEol;
        break;
      }
      
      // optional int32 ghostAvergeEol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ghostAvergeEol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ghostavergeeol_)));
          set_has_ghostavergeeol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRacerForGhostCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.RacerInfo racers = 1;
  for (int i = 0; i < this->racers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->racers(i), output);
  }
  
  // optional int32 ghostAvergeEol = 2;
  if (has_ghostavergeeol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ghostavergeeol(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRacerForGhostCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.RacerInfo racers = 1;
  for (int i = 0; i < this->racers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->racers(i), target);
  }
  
  // optional int32 ghostAvergeEol = 2;
  if (has_ghostavergeeol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ghostavergeeol(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRacerForGhostCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ghostAvergeEol = 2;
    if (has_ghostavergeeol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ghostavergeeol());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.RacerInfo racers = 1;
  total_size += 1 * this->racers_size();
  for (int i = 0; i < this->racers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->racers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRacerForGhostCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRacerForGhostCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRacerForGhostCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRacerForGhostCommand::MergeFrom(const ResponseRacerForGhostCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  racers_.MergeFrom(from.racers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ghostavergeeol()) {
      set_ghostavergeeol(from.ghostavergeeol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRacerForGhostCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRacerForGhostCommand::CopyFrom(const ResponseRacerForGhostCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRacerForGhostCommand::IsInitialized() const {
  
  for (int i = 0; i < racers_size(); i++) {
    if (!this->racers(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseRacerForGhostCommand::Swap(ResponseRacerForGhostCommand* other) {
  if (other != this) {
    racers_.Swap(&other->racers_);
    std::swap(ghostavergeeol_, other->ghostavergeeol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRacerForGhostCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRacerForGhostCommand_descriptor_;
  metadata.reflection = ResponseRacerForGhostCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseModeInfoCommand::kEnergyCostFieldNumber;
const int ResponseModeInfoCommand::kRewardFieldNumber;
const int ResponseModeInfoCommand::kCarLimitDisplayStringFieldNumber;
const int ResponseModeInfoCommand::kAcceptableCarIDsFieldNumber;
const int ResponseModeInfoCommand::kPersonalRankFieldNumber;
const int ResponseModeInfoCommand::kCurrentEnergyFieldNumber;
const int ResponseModeInfoCommand::kPersonalBestTimeFieldNumber;
const int ResponseModeInfoCommand::kFriendLeaderboardFieldNumber;
const int ResponseModeInfoCommand::kRewardsFieldNumber;
const int ResponseModeInfoCommand::kFriendLeaderboard2FieldNumber;
const int ResponseModeInfoCommand::kUserIdFieldNumber;
#endif  // !_MSC_VER

ResponseModeInfoCommand::ResponseModeInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseModeInfoCommand::InitAsDefaultInstance() {
  reward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
}

ResponseModeInfoCommand::ResponseModeInfoCommand(const ResponseModeInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseModeInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  energycost_ = 0;
  reward_ = NULL;
  carlimitdisplaystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  personalrank_ = 0;
  currentenergy_ = 0;
  personalbesttime_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseModeInfoCommand::~ResponseModeInfoCommand() {
  SharedDtor();
}

void ResponseModeInfoCommand::SharedDtor() {
  if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
    delete carlimitdisplaystring_;
  }
  if (this != default_instance_) {
    delete reward_;
  }
}

void ResponseModeInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseModeInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseModeInfoCommand_descriptor_;
}

const ResponseModeInfoCommand& ResponseModeInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseModeInfoCommand* ResponseModeInfoCommand::default_instance_ = NULL;

ResponseModeInfoCommand* ResponseModeInfoCommand::New() const {
  return new ResponseModeInfoCommand;
}

void ResponseModeInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energycost_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
    if (has_carlimitdisplaystring()) {
      if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
        carlimitdisplaystring_->clear();
      }
    }
    personalrank_ = 0;
    currentenergy_ = 0;
    personalbesttime_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    userid_ = GOOGLE_LONGLONG(0);
  }
  acceptablecarids_.Clear();
  friendleaderboard_.Clear();
  rewards_.Clear();
  friendleaderboard2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseModeInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 energyCost = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energycost_)));
          set_has_energycost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_carLimitDisplayString;
        break;
      }
      
      // required string carLimitDisplayString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carLimitDisplayString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carlimitdisplaystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acceptableCarIDs;
        break;
      }
      
      // repeated string acceptableCarIDs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptableCarIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_acceptablecarids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acceptablecarids(0).data(), this->acceptablecarids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_acceptableCarIDs;
        if (input->ExpectTag(40)) goto parse_personalRank;
        break;
      }
      
      // optional int32 personalRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_personalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &personalrank_)));
          set_has_personalrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currentEnergy;
        break;
      }
      
      // optional int32 currentEnergy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentenergy_)));
          set_has_currentenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_personalBestTime;
        break;
      }
      
      // optional float personalBestTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_personalBestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &personalbesttime_)));
          set_has_personalbesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_friendLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_friendLeaderboard;
        if (input->ExpectTag(74)) goto parse_rewards;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Reward rewards = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rewards;
        if (input->ExpectTag(82)) goto parse_friendLeaderboard2;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile friendLeaderboard2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendLeaderboard2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendleaderboard2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friendLeaderboard2;
        if (input->ExpectTag(88)) goto parse_userId;
        break;
      }
      
      // optional int64 userId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseModeInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 energyCost = 1;
  if (has_energycost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->energycost(), output);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }
  
  // required string carLimitDisplayString = 3;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->carlimitdisplaystring(), output);
  }
  
  // repeated string acceptableCarIDs = 4;
  for (int i = 0; i < this->acceptablecarids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->acceptablecarids(i).data(), this->acceptablecarids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->acceptablecarids(i), output);
  }
  
  // optional int32 personalRank = 5;
  if (has_personalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->personalrank(), output);
  }
  
  // optional int32 currentEnergy = 6;
  if (has_currentenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currentenergy(), output);
  }
  
  // optional float personalBestTime = 7;
  if (has_personalbesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->personalbesttime(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 8;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->friendleaderboard(i), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Reward rewards = 9;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rewards(i), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile friendLeaderboard2 = 10;
  for (int i = 0; i < this->friendleaderboard2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->friendleaderboard2(i), output);
  }
  
  // optional int64 userId = 11;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseModeInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 energyCost = 1;
  if (has_energycost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->energycost(), target);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }
  
  // required string carLimitDisplayString = 3;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->carlimitdisplaystring(), target);
  }
  
  // repeated string acceptableCarIDs = 4;
  for (int i = 0; i < this->acceptablecarids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acceptablecarids(i).data(), this->acceptablecarids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->acceptablecarids(i), target);
  }
  
  // optional int32 personalRank = 5;
  if (has_personalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->personalrank(), target);
  }
  
  // optional int32 currentEnergy = 6;
  if (has_currentenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currentenergy(), target);
  }
  
  // optional float personalBestTime = 7;
  if (has_personalbesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->personalbesttime(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 8;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->friendleaderboard(i), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Reward rewards = 9;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rewards(i), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile friendLeaderboard2 = 10;
  for (int i = 0; i < this->friendleaderboard2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->friendleaderboard2(i), target);
  }
  
  // optional int64 userId = 11;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseModeInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 energyCost = 1;
    if (has_energycost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energycost());
    }
    
    // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
    // required string carLimitDisplayString = 3;
    if (has_carlimitdisplaystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carlimitdisplaystring());
    }
    
    // optional int32 personalRank = 5;
    if (has_personalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->personalrank());
    }
    
    // optional int32 currentEnergy = 6;
    if (has_currentenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentenergy());
    }
    
    // optional float personalBestTime = 7;
    if (has_personalbesttime()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int64 userId = 11;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
  }
  // repeated string acceptableCarIDs = 4;
  total_size += 1 * this->acceptablecarids_size();
  for (int i = 0; i < this->acceptablecarids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->acceptablecarids(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 8;
  total_size += 1 * this->friendleaderboard_size();
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendleaderboard(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Reward rewards = 9;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardProfile friendLeaderboard2 = 10;
  total_size += 1 * this->friendleaderboard2_size();
  for (int i = 0; i < this->friendleaderboard2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendleaderboard2(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseModeInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseModeInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseModeInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseModeInfoCommand::MergeFrom(const ResponseModeInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptablecarids_.MergeFrom(from.acceptablecarids_);
  friendleaderboard_.MergeFrom(from.friendleaderboard_);
  rewards_.MergeFrom(from.rewards_);
  friendleaderboard2_.MergeFrom(from.friendleaderboard2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energycost()) {
      set_energycost(from.energycost());
    }
    if (from.has_reward()) {
      mutable_reward()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.reward());
    }
    if (from.has_carlimitdisplaystring()) {
      set_carlimitdisplaystring(from.carlimitdisplaystring());
    }
    if (from.has_personalrank()) {
      set_personalrank(from.personalrank());
    }
    if (from.has_currentenergy()) {
      set_currentenergy(from.currentenergy());
    }
    if (from.has_personalbesttime()) {
      set_personalbesttime(from.personalbesttime());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseModeInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseModeInfoCommand::CopyFrom(const ResponseModeInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseModeInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < friendleaderboard_size(); i++) {
    if (!this->friendleaderboard(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friendleaderboard2_size(); i++) {
    if (!this->friendleaderboard2(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseModeInfoCommand::Swap(ResponseModeInfoCommand* other) {
  if (other != this) {
    std::swap(energycost_, other->energycost_);
    std::swap(reward_, other->reward_);
    std::swap(carlimitdisplaystring_, other->carlimitdisplaystring_);
    acceptablecarids_.Swap(&other->acceptablecarids_);
    std::swap(personalrank_, other->personalrank_);
    std::swap(currentenergy_, other->currentenergy_);
    std::swap(personalbesttime_, other->personalbesttime_);
    friendleaderboard_.Swap(&other->friendleaderboard_);
    rewards_.Swap(&other->rewards_);
    friendleaderboard2_.Swap(&other->friendleaderboard2_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseModeInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseModeInfoCommand_descriptor_;
  metadata.reflection = ResponseModeInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRaceResultCommand::kGameModeFieldNumber;
const int RequestRaceResultCommand::kTrackIdFieldNumber;
const int RequestRaceResultCommand::kModeIdFieldNumber;
const int RequestRaceResultCommand::kRankFieldNumber;
const int RequestRaceResultCommand::kGhostsFieldNumber;
const int RequestRaceResultCommand::kRaceTypeFieldNumber;
const int RequestRaceResultCommand::kGhostAvergeEolFieldNumber;
const int RequestRaceResultCommand::kPropnumFieldNumber;
#endif  // !_MSC_VER

RequestRaceResultCommand::RequestRaceResultCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRaceResultCommand::InitAsDefaultInstance() {
  ghosts_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::GhostInfo*>(&::com::ea::eamobile::nfsmw::protoc::GhostInfo::default_instance());
}

RequestRaceResultCommand::RequestRaceResultCommand(const RequestRaceResultCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRaceResultCommand::SharedCtor() {
  _cached_size_ = 0;
  gamemode_ = 0;
  trackid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modeid_ = 0;
  rank_ = 0;
  ghosts_ = NULL;
  racetype_ = 0;
  ghostavergeeol_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRaceResultCommand::~RequestRaceResultCommand() {
  SharedDtor();
}

void RequestRaceResultCommand::SharedDtor() {
  if (trackid_ != &::google::protobuf::internal::kEmptyString) {
    delete trackid_;
  }
  if (this != default_instance_) {
    delete ghosts_;
  }
}

void RequestRaceResultCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRaceResultCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRaceResultCommand_descriptor_;
}

const RequestRaceResultCommand& RequestRaceResultCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestRaceResultCommand* RequestRaceResultCommand::default_instance_ = NULL;

RequestRaceResultCommand* RequestRaceResultCommand::New() const {
  return new RequestRaceResultCommand;
}

void RequestRaceResultCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamemode_ = 0;
    if (has_trackid()) {
      if (trackid_ != &::google::protobuf::internal::kEmptyString) {
        trackid_->clear();
      }
    }
    modeid_ = 0;
    rank_ = 0;
    if (has_ghosts()) {
      if (ghosts_ != NULL) ghosts_->::com::ea::eamobile::nfsmw::protoc::GhostInfo::Clear();
    }
    racetype_ = 0;
    ghostavergeeol_ = 0;
  }
  propnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRaceResultCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
          set_has_gamemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trackId;
        break;
      }
      
      // required string trackId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackid().data(), this->trackid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modeId;
        break;
      }
      
      // required int32 modeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ghosts;
        break;
      }
      
      // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghosts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghosts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghosts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_raceType;
        break;
      }
      
      // required int32 raceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &racetype_)));
          set_has_racetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ghostAvergeEol;
        break;
      }
      
      // optional int32 ghostAvergeEol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ghostAvergeEol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ghostavergeeol_)));
          set_has_ghostavergeeol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_propnum;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_propnum;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRaceResultCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameMode = 1;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gamemode(), output);
  }
  
  // required string trackId = 2;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackid().data(), this->trackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trackid(), output);
  }
  
  // required int32 modeId = 3;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modeid(), output);
  }
  
  // required int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghosts = 5;
  if (has_ghosts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ghosts(), output);
  }
  
  // required int32 raceType = 6;
  if (has_racetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->racetype(), output);
  }
  
  // optional int32 ghostAvergeEol = 7;
  if (has_ghostavergeeol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ghostavergeeol(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 8;
  for (int i = 0; i < this->propnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->propnum(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRaceResultCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameMode = 1;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gamemode(), target);
  }
  
  // required string trackId = 2;
  if (has_trackid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackid().data(), this->trackid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trackid(), target);
  }
  
  // required int32 modeId = 3;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modeid(), target);
  }
  
  // required int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghosts = 5;
  if (has_ghosts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ghosts(), target);
  }
  
  // required int32 raceType = 6;
  if (has_racetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->racetype(), target);
  }
  
  // optional int32 ghostAvergeEol = 7;
  if (has_ghostavergeeol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ghostavergeeol(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 8;
  for (int i = 0; i < this->propnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->propnum(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRaceResultCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameMode = 1;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemode());
    }
    
    // required string trackId = 2;
    if (has_trackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackid());
    }
    
    // required int32 modeId = 3;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required .com.ea.eamobile.nfsmw.protoc.GhostInfo ghosts = 5;
    if (has_ghosts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghosts());
    }
    
    // required int32 raceType = 6;
    if (has_racetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->racetype());
    }
    
    // optional int32 ghostAvergeEol = 7;
    if (has_ghostavergeeol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ghostavergeeol());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.Prop propnum = 8;
  total_size += 1 * this->propnum_size();
  for (int i = 0; i < this->propnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propnum(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRaceResultCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRaceResultCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRaceResultCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRaceResultCommand::MergeFrom(const RequestRaceResultCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  propnum_.MergeFrom(from.propnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_trackid()) {
      set_trackid(from.trackid());
    }
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_ghosts()) {
      mutable_ghosts()->::com::ea::eamobile::nfsmw::protoc::GhostInfo::MergeFrom(from.ghosts());
    }
    if (from.has_racetype()) {
      set_racetype(from.racetype());
    }
    if (from.has_ghostavergeeol()) {
      set_ghostavergeeol(from.ghostavergeeol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRaceResultCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRaceResultCommand::CopyFrom(const RequestRaceResultCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRaceResultCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_ghosts()) {
    if (!this->ghosts().IsInitialized()) return false;
  }
  return true;
}

void RequestRaceResultCommand::Swap(RequestRaceResultCommand* other) {
  if (other != this) {
    std::swap(gamemode_, other->gamemode_);
    std::swap(trackid_, other->trackid_);
    std::swap(modeid_, other->modeid_);
    std::swap(rank_, other->rank_);
    std::swap(ghosts_, other->ghosts_);
    std::swap(racetype_, other->racetype_);
    std::swap(ghostavergeeol_, other->ghostavergeeol_);
    propnum_.Swap(&other->propnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRaceResultCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRaceResultCommand_descriptor_;
  metadata.reflection = RequestRaceResultCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPMessage::kLevelFieldNumber;
const int RPMessage::kIconnameFieldNumber;
const int RPMessage::kTitleFieldNumber;
const int RPMessage::kPercentageFieldNumber;
const int RPMessage::kCurrentExpFieldNumber;
const int RPMessage::kMinExpFieldNumber;
const int RPMessage::kMaxExpFieldNumber;
#endif  // !_MSC_VER

RPMessage::RPMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPMessage::InitAsDefaultInstance() {
}

RPMessage::RPMessage(const RPMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPMessage::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  iconname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  percentage_ = 0;
  currentexp_ = 0;
  minexp_ = 0;
  maxexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPMessage::~RPMessage() {
  SharedDtor();
}

void RPMessage::SharedDtor() {
  if (iconname_ != &::google::protobuf::internal::kEmptyString) {
    delete iconname_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void RPMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPMessage_descriptor_;
}

const RPMessage& RPMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RPMessage* RPMessage::default_instance_ = NULL;

RPMessage* RPMessage::New() const {
  return new RPMessage;
}

void RPMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_iconname()) {
      if (iconname_ != &::google::protobuf::internal::kEmptyString) {
        iconname_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    percentage_ = 0;
    currentexp_ = 0;
    minexp_ = 0;
    maxexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_iconname;
        break;
      }
      
      // optional string iconname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconname().data(), this->iconname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // required string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_percentage;
        break;
      }
      
      // optional float percentage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentage_)));
          set_has_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentExp;
        break;
      }
      
      // optional int32 currentExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentexp_)));
          set_has_currentexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minExp;
        break;
      }
      
      // optional int32 minExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minexp_)));
          set_has_minexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxExp;
        break;
      }
      
      // optional int32 maxExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxexp_)));
          set_has_maxexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // optional string iconname = 2;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconname().data(), this->iconname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->iconname(), output);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }
  
  // optional float percentage = 4;
  if (has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->percentage(), output);
  }
  
  // optional int32 currentExp = 5;
  if (has_currentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentexp(), output);
  }
  
  // optional int32 minExp = 6;
  if (has_minexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minexp(), output);
  }
  
  // optional int32 maxExp = 7;
  if (has_maxexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maxexp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // optional string iconname = 2;
  if (has_iconname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconname().data(), this->iconname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->iconname(), target);
  }
  
  // required string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }
  
  // optional float percentage = 4;
  if (has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->percentage(), target);
  }
  
  // optional int32 currentExp = 5;
  if (has_currentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currentexp(), target);
  }
  
  // optional int32 minExp = 6;
  if (has_minexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minexp(), target);
  }
  
  // optional int32 maxExp = 7;
  if (has_maxexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maxexp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional string iconname = 2;
    if (has_iconname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconname());
    }
    
    // required string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional float percentage = 4;
    if (has_percentage()) {
      total_size += 1 + 4;
    }
    
    // optional int32 currentExp = 5;
    if (has_currentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentexp());
    }
    
    // optional int32 minExp = 6;
    if (has_minexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minexp());
    }
    
    // optional int32 maxExp = 7;
    if (has_maxexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxexp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPMessage::MergeFrom(const RPMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_iconname()) {
      set_iconname(from.iconname());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_percentage()) {
      set_percentage(from.percentage());
    }
    if (from.has_currentexp()) {
      set_currentexp(from.currentexp());
    }
    if (from.has_minexp()) {
      set_minexp(from.minexp());
    }
    if (from.has_maxexp()) {
      set_maxexp(from.maxexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPMessage::CopyFrom(const RPMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void RPMessage::Swap(RPMessage* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(iconname_, other->iconname_);
    std::swap(title_, other->title_);
    std::swap(percentage_, other->percentage_);
    std::swap(currentexp_, other->currentexp_);
    std::swap(minexp_, other->minexp_);
    std::swap(maxexp_, other->maxexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPMessage_descriptor_;
  metadata.reflection = RPMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockInfoMessage::kTierUnlockedFieldNumber;
const int UnlockInfoMessage::kIsTrackUnlockedFieldNumber;
const int UnlockInfoMessage::kIsModeUnlockedFieldNumber;
const int UnlockInfoMessage::kUnlockedCarFieldNumber;
#endif  // !_MSC_VER

UnlockInfoMessage::UnlockInfoMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlockInfoMessage::InitAsDefaultInstance() {
}

UnlockInfoMessage::UnlockInfoMessage(const UnlockInfoMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlockInfoMessage::SharedCtor() {
  _cached_size_ = 0;
  tierunlocked_ = 0;
  istrackunlocked_ = false;
  ismodeunlocked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockInfoMessage::~UnlockInfoMessage() {
  SharedDtor();
}

void UnlockInfoMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockInfoMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockInfoMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockInfoMessage_descriptor_;
}

const UnlockInfoMessage& UnlockInfoMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

UnlockInfoMessage* UnlockInfoMessage::default_instance_ = NULL;

UnlockInfoMessage* UnlockInfoMessage::New() const {
  return new UnlockInfoMessage;
}

void UnlockInfoMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tierunlocked_ = 0;
    istrackunlocked_ = false;
    ismodeunlocked_ = false;
  }
  unlockedcar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockInfoMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tierUnlocked = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tierunlocked_)));
          set_has_tierunlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isTrackUnlocked;
        break;
      }
      
      // optional bool isTrackUnlocked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrackUnlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrackunlocked_)));
          set_has_istrackunlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isModeUnlocked;
        break;
      }
      
      // optional bool isModeUnlocked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isModeUnlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismodeunlocked_)));
          set_has_ismodeunlocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unlockedCar;
        break;
      }
      
      // repeated string unlockedCar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockedCar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unlockedcar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unlockedcar(0).data(), this->unlockedcar(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unlockedCar;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlockInfoMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tierUnlocked = 1;
  if (has_tierunlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tierunlocked(), output);
  }
  
  // optional bool isTrackUnlocked = 2;
  if (has_istrackunlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->istrackunlocked(), output);
  }
  
  // optional bool isModeUnlocked = 3;
  if (has_ismodeunlocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ismodeunlocked(), output);
  }
  
  // repeated string unlockedCar = 4;
  for (int i = 0; i < this->unlockedcar_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unlockedcar(i).data(), this->unlockedcar(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unlockedcar(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlockInfoMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tierUnlocked = 1;
  if (has_tierunlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tierunlocked(), target);
  }
  
  // optional bool isTrackUnlocked = 2;
  if (has_istrackunlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->istrackunlocked(), target);
  }
  
  // optional bool isModeUnlocked = 3;
  if (has_ismodeunlocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ismodeunlocked(), target);
  }
  
  // repeated string unlockedCar = 4;
  for (int i = 0; i < this->unlockedcar_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unlockedcar(i).data(), this->unlockedcar(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->unlockedcar(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlockInfoMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tierUnlocked = 1;
    if (has_tierunlocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tierunlocked());
    }
    
    // optional bool isTrackUnlocked = 2;
    if (has_istrackunlocked()) {
      total_size += 1 + 1;
    }
    
    // optional bool isModeUnlocked = 3;
    if (has_ismodeunlocked()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string unlockedCar = 4;
  total_size += 1 * this->unlockedcar_size();
  for (int i = 0; i < this->unlockedcar_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unlockedcar(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockInfoMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockInfoMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockInfoMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockInfoMessage::MergeFrom(const UnlockInfoMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlockedcar_.MergeFrom(from.unlockedcar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tierunlocked()) {
      set_tierunlocked(from.tierunlocked());
    }
    if (from.has_istrackunlocked()) {
      set_istrackunlocked(from.istrackunlocked());
    }
    if (from.has_ismodeunlocked()) {
      set_ismodeunlocked(from.ismodeunlocked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockInfoMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockInfoMessage::CopyFrom(const UnlockInfoMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockInfoMessage::IsInitialized() const {
  
  return true;
}

void UnlockInfoMessage::Swap(UnlockInfoMessage* other) {
  if (other != this) {
    std::swap(tierunlocked_, other->tierunlocked_);
    std::swap(istrackunlocked_, other->istrackunlocked_);
    std::swap(ismodeunlocked_, other->ismodeunlocked_);
    unlockedcar_.Swap(&other->unlockedcar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockInfoMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockInfoMessage_descriptor_;
  metadata.reflection = UnlockInfoMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRaceResultCommand::kTrackFinishRatioFieldNumber;
const int ResponseRaceResultCommand::kModeFinishRatioFieldNumber;
const int ResponseRaceResultCommand::kGainMostWantedNumFieldNumber;
const int ResponseRaceResultCommand::kUnlockTracksFieldNumber;
const int ResponseRaceResultCommand::kUnlockModesFieldNumber;
const int ResponseRaceResultCommand::kRewardsFieldNumber;
const int ResponseRaceResultCommand::kIsNewRecordFieldNumber;
const int ResponseRaceResultCommand::kNewRankFieldNumber;
const int ResponseRaceResultCommand::kLeaderBoardFieldNumber;
const int ResponseRaceResultCommand::kTierFieldNumber;
const int ResponseRaceResultCommand::kPersonalBestTimeFieldNumber;
const int ResponseRaceResultCommand::kBestRankFieldNumber;
const int ResponseRaceResultCommand::kRpmessagesFieldNumber;
const int ResponseRaceResultCommand::kUnlockInfoFieldNumber;
const int ResponseRaceResultCommand::kFriendLeaderboardFieldNumber;
#endif  // !_MSC_VER

ResponseRaceResultCommand::ResponseRaceResultCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRaceResultCommand::InitAsDefaultInstance() {
  rewards_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
  tier_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::TierInfo*>(&::com::ea::eamobile::nfsmw::protoc::TierInfo::default_instance());
  unlockinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::UnlockInfoMessage*>(&::com::ea::eamobile::nfsmw::protoc::UnlockInfoMessage::default_instance());
}

ResponseRaceResultCommand::ResponseRaceResultCommand(const ResponseRaceResultCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRaceResultCommand::SharedCtor() {
  _cached_size_ = 0;
  trackfinishratio_ = 0;
  modefinishratio_ = 0;
  gainmostwantednum_ = 0;
  rewards_ = NULL;
  isnewrecord_ = false;
  newrank_ = 0;
  tier_ = NULL;
  personalbesttime_ = 0;
  bestrank_ = 0;
  unlockinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRaceResultCommand::~ResponseRaceResultCommand() {
  SharedDtor();
}

void ResponseRaceResultCommand::SharedDtor() {
  if (this != default_instance_) {
    delete rewards_;
    delete tier_;
    delete unlockinfo_;
  }
}

void ResponseRaceResultCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRaceResultCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRaceResultCommand_descriptor_;
}

const ResponseRaceResultCommand& ResponseRaceResultCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseRaceResultCommand* ResponseRaceResultCommand::default_instance_ = NULL;

ResponseRaceResultCommand* ResponseRaceResultCommand::New() const {
  return new ResponseRaceResultCommand;
}

void ResponseRaceResultCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trackfinishratio_ = 0;
    modefinishratio_ = 0;
    gainmostwantednum_ = 0;
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
    isnewrecord_ = false;
    newrank_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_tier()) {
      if (tier_ != NULL) tier_->::com::ea::eamobile::nfsmw::protoc::TierInfo::Clear();
    }
    personalbesttime_ = 0;
    bestrank_ = 0;
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::com::ea::eamobile::nfsmw::protoc::UnlockInfoMessage::Clear();
    }
  }
  unlocktracks_.Clear();
  unlockmodes_.Clear();
  leaderboard_.Clear();
  rpmessages_.Clear();
  friendleaderboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRaceResultCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trackFinishRatio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackfinishratio_)));
          set_has_trackfinishratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modeFinishRatio;
        break;
      }
      
      // required int32 modeFinishRatio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeFinishRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modefinishratio_)));
          set_has_modefinishratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gainMostWantedNum;
        break;
      }
      
      // required int32 gainMostWantedNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gainMostWantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gainmostwantednum_)));
          set_has_gainmostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unlockTracks;
        break;
      }
      
      // repeated string unlockTracks = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockTracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unlocktracks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unlocktracks(0).data(), this->unlocktracks(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_unlockTracks;
        if (input->ExpectTag(40)) goto parse_unlockModes;
        break;
      }
      
      // repeated int32 unlockModes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockModes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_unlockmodes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unlockmodes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_unlockModes;
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isNewRecord;
        break;
      }
      
      // optional bool isNewRecord = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNewRecord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewrecord_)));
          set_has_isnewrecord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_newRank;
        break;
      }
      
      // optional int32 newRank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newrank_)));
          set_has_newrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_leaderBoard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderBoard = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderBoard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_leaderBoard;
        if (input->ExpectTag(82)) goto parse_tier;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tier()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_personalBestTime;
        break;
      }
      
      // optional float personalBestTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_personalBestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &personalbesttime_)));
          set_has_personalbesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bestRank;
        break;
      }
      
      // optional int32 bestRank = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bestRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bestrank_)));
          set_has_bestrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rpmessages;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpmessages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpmessages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rpmessages;
        if (input->ExpectTag(114)) goto parse_unlockInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.UnlockInfoMessage unlockInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_friendLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_friendLeaderboard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRaceResultCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 trackFinishRatio = 1;
  if (has_trackfinishratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trackfinishratio(), output);
  }
  
  // required int32 modeFinishRatio = 2;
  if (has_modefinishratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modefinishratio(), output);
  }
  
  // required int32 gainMostWantedNum = 3;
  if (has_gainmostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gainmostwantednum(), output);
  }
  
  // repeated string unlockTracks = 4;
  for (int i = 0; i < this->unlocktracks_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unlocktracks(i).data(), this->unlocktracks(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unlocktracks(i), output);
  }
  
  // repeated int32 unlockModes = 5;
  for (int i = 0; i < this->unlockmodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->unlockmodes(i), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewards(), output);
  }
  
  // optional bool isNewRecord = 7;
  if (has_isnewrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isnewrecord(), output);
  }
  
  // optional int32 newRank = 8;
  if (has_newrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->newrank(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderBoard = 9;
  for (int i = 0; i < this->leaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->leaderboard(i), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 10;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tier(), output);
  }
  
  // optional float personalBestTime = 11;
  if (has_personalbesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->personalbesttime(), output);
  }
  
  // optional int32 bestRank = 12;
  if (has_bestrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bestrank(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
  for (int i = 0; i < this->rpmessages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rpmessages(i), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UnlockInfoMessage unlockInfo = 14;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->unlockinfo(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 15;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->friendleaderboard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRaceResultCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 trackFinishRatio = 1;
  if (has_trackfinishratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trackfinishratio(), target);
  }
  
  // required int32 modeFinishRatio = 2;
  if (has_modefinishratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modefinishratio(), target);
  }
  
  // required int32 gainMostWantedNum = 3;
  if (has_gainmostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gainmostwantednum(), target);
  }
  
  // repeated string unlockTracks = 4;
  for (int i = 0; i < this->unlocktracks_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unlocktracks(i).data(), this->unlocktracks(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->unlocktracks(i), target);
  }
  
  // repeated int32 unlockModes = 5;
  for (int i = 0; i < this->unlockmodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->unlockmodes(i), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewards(), target);
  }
  
  // optional bool isNewRecord = 7;
  if (has_isnewrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isnewrecord(), target);
  }
  
  // optional int32 newRank = 8;
  if (has_newrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->newrank(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderBoard = 9;
  for (int i = 0; i < this->leaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->leaderboard(i), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 10;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tier(), target);
  }
  
  // optional float personalBestTime = 11;
  if (has_personalbesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->personalbesttime(), target);
  }
  
  // optional int32 bestRank = 12;
  if (has_bestrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bestrank(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
  for (int i = 0; i < this->rpmessages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rpmessages(i), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UnlockInfoMessage unlockInfo = 14;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->unlockinfo(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 15;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->friendleaderboard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRaceResultCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 trackFinishRatio = 1;
    if (has_trackfinishratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trackfinishratio());
    }
    
    // required int32 modeFinishRatio = 2;
    if (has_modefinishratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modefinishratio());
    }
    
    // required int32 gainMostWantedNum = 3;
    if (has_gainmostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gainmostwantednum());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
    // optional bool isNewRecord = 7;
    if (has_isnewrecord()) {
      total_size += 1 + 1;
    }
    
    // optional int32 newRank = 8;
    if (has_newrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newrank());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.TierInfo tier = 10;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tier());
    }
    
    // optional float personalBestTime = 11;
    if (has_personalbesttime()) {
      total_size += 1 + 4;
    }
    
    // optional int32 bestRank = 12;
    if (has_bestrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestrank());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.UnlockInfoMessage unlockInfo = 14;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }
    
  }
  // repeated string unlockTracks = 4;
  total_size += 1 * this->unlocktracks_size();
  for (int i = 0; i < this->unlocktracks_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unlocktracks(i));
  }
  
  // repeated int32 unlockModes = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockmodes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unlockmodes(i));
    }
    total_size += 1 * this->unlockmodes_size() + data_size;
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard leaderBoard = 9;
  total_size += 1 * this->leaderboard_size();
  for (int i = 0; i < this->leaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leaderboard(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
  total_size += 1 * this->rpmessages_size();
  for (int i = 0; i < this->rpmessages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpmessages(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 15;
  total_size += 1 * this->friendleaderboard_size();
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendleaderboard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRaceResultCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRaceResultCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRaceResultCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRaceResultCommand::MergeFrom(const ResponseRaceResultCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlocktracks_.MergeFrom(from.unlocktracks_);
  unlockmodes_.MergeFrom(from.unlockmodes_);
  leaderboard_.MergeFrom(from.leaderboard_);
  rpmessages_.MergeFrom(from.rpmessages_);
  friendleaderboard_.MergeFrom(from.friendleaderboard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trackfinishratio()) {
      set_trackfinishratio(from.trackfinishratio());
    }
    if (from.has_modefinishratio()) {
      set_modefinishratio(from.modefinishratio());
    }
    if (from.has_gainmostwantednum()) {
      set_gainmostwantednum(from.gainmostwantednum());
    }
    if (from.has_rewards()) {
      mutable_rewards()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.rewards());
    }
    if (from.has_isnewrecord()) {
      set_isnewrecord(from.isnewrecord());
    }
    if (from.has_newrank()) {
      set_newrank(from.newrank());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_tier()) {
      mutable_tier()->::com::ea::eamobile::nfsmw::protoc::TierInfo::MergeFrom(from.tier());
    }
    if (from.has_personalbesttime()) {
      set_personalbesttime(from.personalbesttime());
    }
    if (from.has_bestrank()) {
      set_bestrank(from.bestrank());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::com::ea::eamobile::nfsmw::protoc::UnlockInfoMessage::MergeFrom(from.unlockinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRaceResultCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRaceResultCommand::CopyFrom(const ResponseRaceResultCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRaceResultCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < leaderboard_size(); i++) {
    if (!this->leaderboard(i).IsInitialized()) return false;
  }
  if (has_tier()) {
    if (!this->tier().IsInitialized()) return false;
  }
  for (int i = 0; i < rpmessages_size(); i++) {
    if (!this->rpmessages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friendleaderboard_size(); i++) {
    if (!this->friendleaderboard(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseRaceResultCommand::Swap(ResponseRaceResultCommand* other) {
  if (other != this) {
    std::swap(trackfinishratio_, other->trackfinishratio_);
    std::swap(modefinishratio_, other->modefinishratio_);
    std::swap(gainmostwantednum_, other->gainmostwantednum_);
    unlocktracks_.Swap(&other->unlocktracks_);
    unlockmodes_.Swap(&other->unlockmodes_);
    std::swap(rewards_, other->rewards_);
    std::swap(isnewrecord_, other->isnewrecord_);
    std::swap(newrank_, other->newrank_);
    leaderboard_.Swap(&other->leaderboard_);
    std::swap(tier_, other->tier_);
    std::swap(personalbesttime_, other->personalbesttime_);
    std::swap(bestrank_, other->bestrank_);
    rpmessages_.Swap(&other->rpmessages_);
    std::swap(unlockinfo_, other->unlockinfo_);
    friendleaderboard_.Swap(&other->friendleaderboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRaceResultCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRaceResultCommand_descriptor_;
  metadata.reflection = ResponseRaceResultCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentRaceResultCommand::kRewardsFieldNumber;
const int ResponseTournamentRaceResultCommand::kRpmessagesFieldNumber;
const int ResponseTournamentRaceResultCommand::kTournamentRemainTimeFieldNumber;
const int ResponseTournamentRaceResultCommand::kTournamentLeftTimesFieldNumber;
const int ResponseTournamentRaceResultCommand::kBoardFieldNumber;
const int ResponseTournamentRaceResultCommand::kSelfRankFieldNumber;
const int ResponseTournamentRaceResultCommand::kSelfNameFieldNumber;
const int ResponseTournamentRaceResultCommand::kSelfRaceResultFieldNumber;
const int ResponseTournamentRaceResultCommand::kUpRankFieldNumber;
const int ResponseTournamentRaceResultCommand::kIsNewRecodeFieldNumber;
const int ResponseTournamentRaceResultCommand::kFriendLeaderboardFieldNumber;
const int ResponseTournamentRaceResultCommand::kTournamentOnlineIdFieldNumber;
const int ResponseTournamentRaceResultCommand::kIsTournamentOnlineFinishFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentRaceResultCommand::ResponseTournamentRaceResultCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentRaceResultCommand::InitAsDefaultInstance() {
  rewards_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
}

ResponseTournamentRaceResultCommand::ResponseTournamentRaceResultCommand(const ResponseTournamentRaceResultCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentRaceResultCommand::SharedCtor() {
  _cached_size_ = 0;
  rewards_ = NULL;
  tournamentremaintime_ = 0;
  tournamentlefttimes_ = 0;
  selfrank_ = 0;
  selfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfraceresult_ = 0;
  uprank_ = 0;
  isnewrecode_ = false;
  tournamentonlineid_ = 0;
  istournamentonlinefinish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentRaceResultCommand::~ResponseTournamentRaceResultCommand() {
  SharedDtor();
}

void ResponseTournamentRaceResultCommand::SharedDtor() {
  if (selfname_ != &::google::protobuf::internal::kEmptyString) {
    delete selfname_;
  }
  if (this != default_instance_) {
    delete rewards_;
  }
}

void ResponseTournamentRaceResultCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentRaceResultCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentRaceResultCommand_descriptor_;
}

const ResponseTournamentRaceResultCommand& ResponseTournamentRaceResultCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentRaceResultCommand* ResponseTournamentRaceResultCommand::default_instance_ = NULL;

ResponseTournamentRaceResultCommand* ResponseTournamentRaceResultCommand::New() const {
  return new ResponseTournamentRaceResultCommand;
}

void ResponseTournamentRaceResultCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rewards()) {
      if (rewards_ != NULL) rewards_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
    tournamentremaintime_ = 0;
    tournamentlefttimes_ = 0;
    selfrank_ = 0;
    if (has_selfname()) {
      if (selfname_ != &::google::protobuf::internal::kEmptyString) {
        selfname_->clear();
      }
    }
    selfraceresult_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    uprank_ = 0;
    isnewrecode_ = false;
    tournamentonlineid_ = 0;
    istournamentonlinefinish_ = false;
  }
  rpmessages_.Clear();
  board_.Clear();
  friendleaderboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentRaceResultCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rpmessages;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpmessages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpmessages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_rpmessages;
        if (input->ExpectTag(125)) goto parse_tournamentRemainTime;
        break;
      }
      
      // optional float tournamentRemainTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tournamentRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tournamentremaintime_)));
          set_has_tournamentremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tournamentLeftTimes;
        break;
      }
      
      // optional int32 tournamentLeftTimes = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentLeftTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentlefttimes_)));
          set_has_tournamentlefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_board;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard board = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_board:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_board()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_board;
        if (input->ExpectTag(144)) goto parse_selfRank;
        break;
      }
      
      // required int32 selfRank = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_selfName;
        break;
      }
      
      // required string selfName = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfname().data(), this->selfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_selfRaceResult;
        break;
      }
      
      // required float selfRaceResult = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_selfRaceResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selfraceresult_)));
          set_has_selfraceresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_upRank;
        break;
      }
      
      // optional int32 upRank = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uprank_)));
          set_has_uprank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_isNewRecode;
        break;
      }
      
      // optional bool isNewRecode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNewRecode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewrecode_)));
          set_has_isnewrecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_friendLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_friendLeaderboard;
        if (input->ExpectTag(192)) goto parse_tournamentOnlineId;
        break;
      }
      
      // optional int32 tournamentOnlineId = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentOnlineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_isTournamentOnlineFinish;
        break;
      }
      
      // optional bool isTournamentOnlineFinish = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTournamentOnlineFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istournamentonlinefinish_)));
          set_has_istournamentonlinefinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentRaceResultCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
  if (has_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewards(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
  for (int i = 0; i < this->rpmessages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rpmessages(i), output);
  }
  
  // optional float tournamentRemainTime = 15;
  if (has_tournamentremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tournamentremaintime(), output);
  }
  
  // optional int32 tournamentLeftTimes = 16;
  if (has_tournamentlefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tournamentlefttimes(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard board = 17;
  for (int i = 0; i < this->board_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->board(i), output);
  }
  
  // required int32 selfRank = 18;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->selfrank(), output);
  }
  
  // required string selfName = 19;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->selfname(), output);
  }
  
  // required float selfRaceResult = 20;
  if (has_selfraceresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->selfraceresult(), output);
  }
  
  // optional int32 upRank = 21;
  if (has_uprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->uprank(), output);
  }
  
  // optional bool isNewRecode = 22;
  if (has_isnewrecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isnewrecode(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 23;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->friendleaderboard(i), output);
  }
  
  // optional int32 tournamentOnlineId = 24;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tournamentonlineid(), output);
  }
  
  // optional bool isTournamentOnlineFinish = 25;
  if (has_istournamentonlinefinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->istournamentonlinefinish(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentRaceResultCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
  if (has_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewards(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
  for (int i = 0; i < this->rpmessages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rpmessages(i), target);
  }
  
  // optional float tournamentRemainTime = 15;
  if (has_tournamentremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->tournamentremaintime(), target);
  }
  
  // optional int32 tournamentLeftTimes = 16;
  if (has_tournamentlefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tournamentlefttimes(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard board = 17;
  for (int i = 0; i < this->board_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->board(i), target);
  }
  
  // required int32 selfRank = 18;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->selfrank(), target);
  }
  
  // required string selfName = 19;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->selfname(), target);
  }
  
  // required float selfRaceResult = 20;
  if (has_selfraceresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->selfraceresult(), target);
  }
  
  // optional int32 upRank = 21;
  if (has_uprank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->uprank(), target);
  }
  
  // optional bool isNewRecode = 22;
  if (has_isnewrecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isnewrecode(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 23;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->friendleaderboard(i), target);
  }
  
  // optional int32 tournamentOnlineId = 24;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->tournamentonlineid(), target);
  }
  
  // optional bool isTournamentOnlineFinish = 25;
  if (has_istournamentonlinefinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->istournamentonlinefinish(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentRaceResultCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.Reward rewards = 6;
    if (has_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards());
    }
    
    // optional float tournamentRemainTime = 15;
    if (has_tournamentremaintime()) {
      total_size += 1 + 4;
    }
    
    // optional int32 tournamentLeftTimes = 16;
    if (has_tournamentlefttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentlefttimes());
    }
    
    // required int32 selfRank = 18;
    if (has_selfrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }
    
    // required string selfName = 19;
    if (has_selfname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfname());
    }
    
    // required float selfRaceResult = 20;
    if (has_selfraceresult()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 upRank = 21;
    if (has_uprank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uprank());
    }
    
    // optional bool isNewRecode = 22;
    if (has_isnewrecode()) {
      total_size += 2 + 1;
    }
    
    // optional int32 tournamentOnlineId = 24;
    if (has_tournamentonlineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
    // optional bool isTournamentOnlineFinish = 25;
    if (has_istournamentonlinefinish()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.RPMessage rpmessages = 13;
  total_size += 1 * this->rpmessages_size();
  for (int i = 0; i < this->rpmessages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpmessages(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard board = 17;
  total_size += 2 * this->board_size();
  for (int i = 0; i < this->board_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->board(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 23;
  total_size += 2 * this->friendleaderboard_size();
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendleaderboard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentRaceResultCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentRaceResultCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentRaceResultCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentRaceResultCommand::MergeFrom(const ResponseTournamentRaceResultCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpmessages_.MergeFrom(from.rpmessages_);
  board_.MergeFrom(from.board_);
  friendleaderboard_.MergeFrom(from.friendleaderboard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewards()) {
      mutable_rewards()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.rewards());
    }
    if (from.has_tournamentremaintime()) {
      set_tournamentremaintime(from.tournamentremaintime());
    }
    if (from.has_tournamentlefttimes()) {
      set_tournamentlefttimes(from.tournamentlefttimes());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_selfname()) {
      set_selfname(from.selfname());
    }
    if (from.has_selfraceresult()) {
      set_selfraceresult(from.selfraceresult());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uprank()) {
      set_uprank(from.uprank());
    }
    if (from.has_isnewrecode()) {
      set_isnewrecode(from.isnewrecode());
    }
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
    if (from.has_istournamentonlinefinish()) {
      set_istournamentonlinefinish(from.istournamentonlinefinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentRaceResultCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentRaceResultCommand::CopyFrom(const ResponseTournamentRaceResultCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentRaceResultCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e0) != 0x000000e0) return false;
  
  for (int i = 0; i < rpmessages_size(); i++) {
    if (!this->rpmessages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < board_size(); i++) {
    if (!this->board(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friendleaderboard_size(); i++) {
    if (!this->friendleaderboard(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseTournamentRaceResultCommand::Swap(ResponseTournamentRaceResultCommand* other) {
  if (other != this) {
    std::swap(rewards_, other->rewards_);
    rpmessages_.Swap(&other->rpmessages_);
    std::swap(tournamentremaintime_, other->tournamentremaintime_);
    std::swap(tournamentlefttimes_, other->tournamentlefttimes_);
    board_.Swap(&other->board_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(selfname_, other->selfname_);
    std::swap(selfraceresult_, other->selfraceresult_);
    std::swap(uprank_, other->uprank_);
    std::swap(isnewrecode_, other->isnewrecode_);
    friendleaderboard_.Swap(&other->friendleaderboard_);
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(istournamentonlinefinish_, other->istournamentonlinefinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentRaceResultCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentRaceResultCommand_descriptor_;
  metadata.reflection = ResponseTournamentRaceResultCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentMessage::kTypeFieldNumber;
const int TournamentMessage::kNameFieldNumber;
const int TournamentMessage::kStartTimeFieldNumber;
const int TournamentMessage::kRemainTimeFieldNumber;
const int TournamentMessage::kSignUpTypeFieldNumber;
const int TournamentMessage::kSignUpFieldNumber;
const int TournamentMessage::kRankListFieldNumber;
const int TournamentMessage::kRankingHighLightFieldNumber;
const int TournamentMessage::kRewardListFieldNumber;
const int TournamentMessage::kLeftTimesFieldNumber;
const int TournamentMessage::kIdFieldNumber;
const int TournamentMessage::kEnergyFieldNumber;
const int TournamentMessage::kOnlineIdFieldNumber;
const int TournamentMessage::kEventIdFieldNumber;
const int TournamentMessage::kSignUpPriceFieldNumber;
const int TournamentMessage::kBackgroundPictureIdFieldNumber;
const int TournamentMessage::kAdIdFieldNumber;
const int TournamentMessage::kIsAlreadyGetRewardFieldNumber;
const int TournamentMessage::kTournamentGroupFieldNumber;
const int TournamentMessage::kTournamentCarNameFieldNumber;
#endif  // !_MSC_VER

TournamentMessage::TournamentMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentMessage::InitAsDefaultInstance() {
}

TournamentMessage::TournamentMessage(const TournamentMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_LONGLONG(0);
  remaintime_ = GOOGLE_LONGLONG(0);
  signuptype_ = 0;
  signup_ = 0;
  rankinghighlight_ = 0;
  lefttimes_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  energy_ = 0;
  onlineid_ = 0;
  eventid_ = 0;
  signupprice_ = 0;
  backgroundpictureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adid_ = 0;
  isalreadygetreward_ = false;
  tournamentgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tournamentcarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentMessage::~TournamentMessage() {
  SharedDtor();
}

void TournamentMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (backgroundpictureid_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundpictureid_;
  }
  if (tournamentgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete tournamentgroup_;
  }
  if (tournamentcarname_ != &::google::protobuf::internal::kEmptyString) {
    delete tournamentcarname_;
  }
  if (this != default_instance_) {
  }
}

void TournamentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentMessage_descriptor_;
}

const TournamentMessage& TournamentMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TournamentMessage* TournamentMessage::default_instance_ = NULL;

TournamentMessage* TournamentMessage::New() const {
  return new TournamentMessage;
}

void TournamentMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    starttime_ = GOOGLE_LONGLONG(0);
    remaintime_ = GOOGLE_LONGLONG(0);
    signuptype_ = 0;
    signup_ = 0;
    rankinghighlight_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    lefttimes_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    energy_ = 0;
    onlineid_ = 0;
    eventid_ = 0;
    signupprice_ = 0;
    if (has_backgroundpictureid()) {
      if (backgroundpictureid_ != &::google::protobuf::internal::kEmptyString) {
        backgroundpictureid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    adid_ = 0;
    isalreadygetreward_ = false;
    if (has_tournamentgroup()) {
      if (tournamentgroup_ != &::google::protobuf::internal::kEmptyString) {
        tournamentgroup_->clear();
      }
    }
    if (has_tournamentcarname()) {
      if (tournamentcarname_ != &::google::protobuf::internal::kEmptyString) {
        tournamentcarname_->clear();
      }
    }
  }
  ranklist_.Clear();
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }
      
      // optional int64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remainTime;
        break;
      }
      
      // optional int64 remainTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_signUpType;
        break;
      }
      
      // optional int32 signUpType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signUpType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signuptype_)));
          set_has_signuptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_signUp;
        break;
      }
      
      // optional int32 signUp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signup_)));
          set_has_signup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rankList;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRankingListMessage rankList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rankList;
        if (input->ExpectTag(104)) goto parse_rankingHighLight;
        break;
      }
      
      // optional int32 rankingHighLight = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankingHighLight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankinghighlight_)));
          set_has_rankinghighlight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_rewardList;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardListMessage rewardList = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_rewardList;
        if (input->ExpectTag(136)) goto parse_leftTimes;
        break;
      }
      
      // optional int32 leftTimes = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttimes_)));
          set_has_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_id;
        break;
      }
      
      // required string id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_energy;
        break;
      }
      
      // required int32 energy = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_onlineId;
        break;
      }
      
      // required int32 onlineId = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlineid_)));
          set_has_onlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_eventId;
        break;
      }
      
      // required int32 eventId = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_signUpPrice;
        break;
      }
      
      // optional int32 signUpPrice = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signUpPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signupprice_)));
          set_has_signupprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_backgroundPictureId;
        break;
      }
      
      // optional string backgroundPictureId = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backgroundPictureId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundpictureid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->backgroundpictureid().data(), this->backgroundpictureid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_adId;
        break;
      }
      
      // optional int32 adId = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adid_)));
          set_has_adid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_isAlreadyGetReward;
        break;
      }
      
      // optional bool isAlreadyGetReward = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAlreadyGetReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isalreadygetreward_)));
          set_has_isalreadygetreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_tournamentGroup;
        break;
      }
      
      // optional string tournamentGroup = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournamentgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournamentgroup().data(), this->tournamentgroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_tournamentCarName;
        break;
      }
      
      // optional string tournamentCarName = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentCarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournamentcarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournamentcarname().data(), this->tournamentcarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->starttime(), output);
  }
  
  // optional int64 remainTime = 4;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->remaintime(), output);
  }
  
  // optional int32 signUpType = 5;
  if (has_signuptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->signuptype(), output);
  }
  
  // optional int32 signUp = 6;
  if (has_signup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->signup(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRankingListMessage rankList = 7;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->ranklist(i), output);
  }
  
  // optional int32 rankingHighLight = 13;
  if (has_rankinghighlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rankinghighlight(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardListMessage rewardList = 14;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->rewardlist(i), output);
  }
  
  // optional int32 leftTimes = 17;
  if (has_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lefttimes(), output);
  }
  
  // required string id = 18;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->id(), output);
  }
  
  // required int32 energy = 22;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->energy(), output);
  }
  
  // required int32 onlineId = 23;
  if (has_onlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->onlineid(), output);
  }
  
  // required int32 eventId = 24;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->eventid(), output);
  }
  
  // optional int32 signUpPrice = 25;
  if (has_signupprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->signupprice(), output);
  }
  
  // optional string backgroundPictureId = 26;
  if (has_backgroundpictureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->backgroundpictureid().data(), this->backgroundpictureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->backgroundpictureid(), output);
  }
  
  // optional int32 adId = 27;
  if (has_adid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->adid(), output);
  }
  
  // optional bool isAlreadyGetReward = 28;
  if (has_isalreadygetreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->isalreadygetreward(), output);
  }
  
  // optional string tournamentGroup = 29;
  if (has_tournamentgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentgroup().data(), this->tournamentgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->tournamentgroup(), output);
  }
  
  // optional string tournamentCarName = 30;
  if (has_tournamentcarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentcarname().data(), this->tournamentcarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->tournamentcarname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->starttime(), target);
  }
  
  // optional int64 remainTime = 4;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->remaintime(), target);
  }
  
  // optional int32 signUpType = 5;
  if (has_signuptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->signuptype(), target);
  }
  
  // optional int32 signUp = 6;
  if (has_signup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->signup(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRankingListMessage rankList = 7;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->ranklist(i), target);
  }
  
  // optional int32 rankingHighLight = 13;
  if (has_rankinghighlight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rankinghighlight(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardListMessage rewardList = 14;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->rewardlist(i), target);
  }
  
  // optional int32 leftTimes = 17;
  if (has_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lefttimes(), target);
  }
  
  // required string id = 18;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->id(), target);
  }
  
  // required int32 energy = 22;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->energy(), target);
  }
  
  // required int32 onlineId = 23;
  if (has_onlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->onlineid(), target);
  }
  
  // required int32 eventId = 24;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->eventid(), target);
  }
  
  // optional int32 signUpPrice = 25;
  if (has_signupprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->signupprice(), target);
  }
  
  // optional string backgroundPictureId = 26;
  if (has_backgroundpictureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->backgroundpictureid().data(), this->backgroundpictureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->backgroundpictureid(), target);
  }
  
  // optional int32 adId = 27;
  if (has_adid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->adid(), target);
  }
  
  // optional bool isAlreadyGetReward = 28;
  if (has_isalreadygetreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->isalreadygetreward(), target);
  }
  
  // optional string tournamentGroup = 29;
  if (has_tournamentgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentgroup().data(), this->tournamentgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->tournamentgroup(), target);
  }
  
  // optional string tournamentCarName = 30;
  if (has_tournamentcarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentcarname().data(), this->tournamentcarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->tournamentcarname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }
    
    // optional int64 remainTime = 4;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remaintime());
    }
    
    // optional int32 signUpType = 5;
    if (has_signuptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signuptype());
    }
    
    // optional int32 signUp = 6;
    if (has_signup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signup());
    }
    
    // optional int32 rankingHighLight = 13;
    if (has_rankinghighlight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankinghighlight());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 leftTimes = 17;
    if (has_lefttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttimes());
    }
    
    // required string id = 18;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required int32 energy = 22;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
    // required int32 onlineId = 23;
    if (has_onlineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlineid());
    }
    
    // required int32 eventId = 24;
    if (has_eventid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }
    
    // optional int32 signUpPrice = 25;
    if (has_signupprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signupprice());
    }
    
    // optional string backgroundPictureId = 26;
    if (has_backgroundpictureid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundpictureid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 adId = 27;
    if (has_adid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adid());
    }
    
    // optional bool isAlreadyGetReward = 28;
    if (has_isalreadygetreward()) {
      total_size += 2 + 1;
    }
    
    // optional string tournamentGroup = 29;
    if (has_tournamentgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournamentgroup());
    }
    
    // optional string tournamentCarName = 30;
    if (has_tournamentcarname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournamentcarname());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRankingListMessage rankList = 7;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardListMessage rewardList = 14;
  total_size += 1 * this->rewardlist_size();
  for (int i = 0; i < this->rewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentMessage::MergeFrom(const TournamentMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_signuptype()) {
      set_signuptype(from.signuptype());
    }
    if (from.has_signup()) {
      set_signup(from.signup());
    }
    if (from.has_rankinghighlight()) {
      set_rankinghighlight(from.rankinghighlight());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_lefttimes()) {
      set_lefttimes(from.lefttimes());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_onlineid()) {
      set_onlineid(from.onlineid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_signupprice()) {
      set_signupprice(from.signupprice());
    }
    if (from.has_backgroundpictureid()) {
      set_backgroundpictureid(from.backgroundpictureid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_adid()) {
      set_adid(from.adid());
    }
    if (from.has_isalreadygetreward()) {
      set_isalreadygetreward(from.isalreadygetreward());
    }
    if (from.has_tournamentgroup()) {
      set_tournamentgroup(from.tournamentgroup());
    }
    if (from.has_tournamentcarname()) {
      set_tournamentcarname(from.tournamentcarname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentMessage::CopyFrom(const TournamentMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003c03) != 0x00003c03) return false;
  
  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rewardlist_size(); i++) {
    if (!this->rewardlist(i).IsInitialized()) return false;
  }
  return true;
}

void TournamentMessage::Swap(TournamentMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(starttime_, other->starttime_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(signuptype_, other->signuptype_);
    std::swap(signup_, other->signup_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(rankinghighlight_, other->rankinghighlight_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(id_, other->id_);
    std::swap(energy_, other->energy_);
    std::swap(onlineid_, other->onlineid_);
    std::swap(eventid_, other->eventid_);
    std::swap(signupprice_, other->signupprice_);
    std::swap(backgroundpictureid_, other->backgroundpictureid_);
    std::swap(adid_, other->adid_);
    std::swap(isalreadygetreward_, other->isalreadygetreward_);
    std::swap(tournamentgroup_, other->tournamentgroup_);
    std::swap(tournamentcarname_, other->tournamentcarname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentMessage_descriptor_;
  metadata.reflection = TournamentMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentRankingListMessage::kRankFieldNumber;
const int TournamentRankingListMessage::kNameFieldNumber;
#endif  // !_MSC_VER

TournamentRankingListMessage::TournamentRankingListMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentRankingListMessage::InitAsDefaultInstance() {
}

TournamentRankingListMessage::TournamentRankingListMessage(const TournamentRankingListMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentRankingListMessage::SharedCtor() {
  _cached_size_ = 0;
  rank_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentRankingListMessage::~TournamentRankingListMessage() {
  SharedDtor();
}

void TournamentRankingListMessage::SharedDtor() {
  if (rank_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TournamentRankingListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentRankingListMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentRankingListMessage_descriptor_;
}

const TournamentRankingListMessage& TournamentRankingListMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TournamentRankingListMessage* TournamentRankingListMessage::default_instance_ = NULL;

TournamentRankingListMessage* TournamentRankingListMessage::New() const {
  return new TournamentRankingListMessage;
}

void TournamentRankingListMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rank()) {
      if (rank_ != &::google::protobuf::internal::kEmptyString) {
        rank_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentRankingListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rank().data(), this->rank().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentRankingListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank().data(), this->rank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rank(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentRankingListMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank().data(), this->rank().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rank(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentRankingListMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rank());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentRankingListMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentRankingListMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentRankingListMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentRankingListMessage::MergeFrom(const TournamentRankingListMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentRankingListMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentRankingListMessage::CopyFrom(const TournamentRankingListMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentRankingListMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TournamentRankingListMessage::Swap(TournamentRankingListMessage* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentRankingListMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentRankingListMessage_descriptor_;
  metadata.reflection = TournamentRankingListMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentRewardListMessage::kNumFieldNumber;
const int TournamentRewardListMessage::kNameFieldNumber;
#endif  // !_MSC_VER

TournamentRewardListMessage::TournamentRewardListMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentRewardListMessage::InitAsDefaultInstance() {
}

TournamentRewardListMessage::TournamentRewardListMessage(const TournamentRewardListMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentRewardListMessage::SharedCtor() {
  _cached_size_ = 0;
  num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentRewardListMessage::~TournamentRewardListMessage() {
  SharedDtor();
}

void TournamentRewardListMessage::SharedDtor() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TournamentRewardListMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentRewardListMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentRewardListMessage_descriptor_;
}

const TournamentRewardListMessage& TournamentRewardListMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TournamentRewardListMessage* TournamentRewardListMessage::default_instance_ = NULL;

TournamentRewardListMessage* TournamentRewardListMessage::New() const {
  return new TournamentRewardListMessage;
}

void TournamentRewardListMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_num()) {
      if (num_ != &::google::protobuf::internal::kEmptyString) {
        num_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentRewardListMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentRewardListMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->num(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentRewardListMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->num(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentRewardListMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->num());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentRewardListMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentRewardListMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentRewardListMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentRewardListMessage::MergeFrom(const TournamentRewardListMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentRewardListMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentRewardListMessage::CopyFrom(const TournamentRewardListMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentRewardListMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TournamentRewardListMessage::Swap(TournamentRewardListMessage* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentRewardListMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentRewardListMessage_descriptor_;
  metadata.reflection = TournamentRewardListMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentRewardDetailMessage::kRankFieldNumber;
const int TournamentRewardDetailMessage::kNameFieldNumber;
const int TournamentRewardDetailMessage::kRaceTimeFieldNumber;
const int TournamentRewardDetailMessage::kRewardFieldNumber;
const int TournamentRewardDetailMessage::kHeadIndexFieldNumber;
const int TournamentRewardDetailMessage::kHeadUrlFieldNumber;
const int TournamentRewardDetailMessage::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

TournamentRewardDetailMessage::TournamentRewardDetailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentRewardDetailMessage::InitAsDefaultInstance() {
}

TournamentRewardDetailMessage::TournamentRewardDetailMessage(const TournamentRewardDetailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentRewardDetailMessage::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  racetime_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentRewardDetailMessage::~TournamentRewardDetailMessage() {
  SharedDtor();
}

void TournamentRewardDetailMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void TournamentRewardDetailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentRewardDetailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentRewardDetailMessage_descriptor_;
}

const TournamentRewardDetailMessage& TournamentRewardDetailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TournamentRewardDetailMessage* TournamentRewardDetailMessage::default_instance_ = NULL;

TournamentRewardDetailMessage* TournamentRewardDetailMessage::New() const {
  return new TournamentRewardDetailMessage;
}

void TournamentRewardDetailMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    racetime_ = 0;
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentRewardDetailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_raceTime;
        break;
      }
      
      // required float raceTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_raceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &racetime_)));
          set_has_racetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }
      
      // required string reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_displayName;
        break;
      }
      
      // optional string displayName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentRewardDetailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required float raceTime = 3;
  if (has_racetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->racetime(), output);
  }
  
  // required string reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reward(), output);
  }
  
  // required int32 headIndex = 5;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->headindex(), output);
  }
  
  // optional string headUrl = 6;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->headurl(), output);
  }
  
  // optional string displayName = 7;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->displayname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentRewardDetailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required float raceTime = 3;
  if (has_racetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->racetime(), target);
  }
  
  // required string reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reward(), target);
  }
  
  // required int32 headIndex = 5;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->headindex(), target);
  }
  
  // optional string headUrl = 6;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headurl(), target);
  }
  
  // optional string displayName = 7;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->displayname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentRewardDetailMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float raceTime = 3;
    if (has_racetime()) {
      total_size += 1 + 4;
    }
    
    // required string reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }
    
    // required int32 headIndex = 5;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 6;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // optional string displayName = 7;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentRewardDetailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentRewardDetailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentRewardDetailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentRewardDetailMessage::MergeFrom(const TournamentRewardDetailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_racetime()) {
      set_racetime(from.racetime());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentRewardDetailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentRewardDetailMessage::CopyFrom(const TournamentRewardDetailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentRewardDetailMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void TournamentRewardDetailMessage::Swap(TournamentRewardDetailMessage* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(racetime_, other->racetime_);
    std::swap(reward_, other->reward_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(displayname_, other->displayname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentRewardDetailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentRewardDetailMessage_descriptor_;
  metadata.reflection = TournamentRewardDetailMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentDetailMessage::kRankFieldNumber;
const int TournamentDetailMessage::kNameFieldNumber;
const int TournamentDetailMessage::kRaceTimeFieldNumber;
const int TournamentDetailMessage::kHeadIndexFieldNumber;
const int TournamentDetailMessage::kHeadUrlFieldNumber;
const int TournamentDetailMessage::kUserIdFieldNumber;
#endif  // !_MSC_VER

TournamentDetailMessage::TournamentDetailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentDetailMessage::InitAsDefaultInstance() {
}

TournamentDetailMessage::TournamentDetailMessage(const TournamentDetailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentDetailMessage::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  racetime_ = 0;
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentDetailMessage::~TournamentDetailMessage() {
  SharedDtor();
}

void TournamentDetailMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
  }
}

void TournamentDetailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentDetailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentDetailMessage_descriptor_;
}

const TournamentDetailMessage& TournamentDetailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TournamentDetailMessage* TournamentDetailMessage::default_instance_ = NULL;

TournamentDetailMessage* TournamentDetailMessage::New() const {
  return new TournamentDetailMessage;
}

void TournamentDetailMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    racetime_ = 0;
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentDetailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_raceTime;
        break;
      }
      
      // required float raceTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_raceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &racetime_)));
          set_has_racetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userId;
        break;
      }
      
      // optional int64 userId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentDetailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required float raceTime = 3;
  if (has_racetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->racetime(), output);
  }
  
  // required int32 headIndex = 4;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headindex(), output);
  }
  
  // optional string headUrl = 5;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->headurl(), output);
  }
  
  // optional int64 userId = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentDetailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required float raceTime = 3;
  if (has_racetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->racetime(), target);
  }
  
  // required int32 headIndex = 4;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headindex(), target);
  }
  
  // optional string headUrl = 5;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headurl(), target);
  }
  
  // optional int64 userId = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentDetailMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float raceTime = 3;
    if (has_racetime()) {
      total_size += 1 + 4;
    }
    
    // required int32 headIndex = 4;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 5;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // optional int64 userId = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentDetailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentDetailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentDetailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentDetailMessage::MergeFrom(const TournamentDetailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_racetime()) {
      set_racetime(from.racetime());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentDetailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentDetailMessage::CopyFrom(const TournamentDetailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentDetailMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TournamentDetailMessage::Swap(TournamentDetailMessage* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(racetime_, other->racetime_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentDetailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentDetailMessage_descriptor_;
  metadata.reflection = TournamentDetailMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TournamentDetailRewardMessage::kTitleFieldNumber;
const int TournamentDetailRewardMessage::kMoneyFieldNumber;
const int TournamentDetailRewardMessage::kRmbFieldNumber;
const int TournamentDetailRewardMessage::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

TournamentDetailRewardMessage::TournamentDetailRewardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TournamentDetailRewardMessage::InitAsDefaultInstance() {
}

TournamentDetailRewardMessage::TournamentDetailRewardMessage(const TournamentDetailRewardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TournamentDetailRewardMessage::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rmb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TournamentDetailRewardMessage::~TournamentDetailRewardMessage() {
  SharedDtor();
}

void TournamentDetailRewardMessage::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (rmb_ != &::google::protobuf::internal::kEmptyString) {
    delete rmb_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void TournamentDetailRewardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TournamentDetailRewardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TournamentDetailRewardMessage_descriptor_;
}

const TournamentDetailRewardMessage& TournamentDetailRewardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TournamentDetailRewardMessage* TournamentDetailRewardMessage::default_instance_ = NULL;

TournamentDetailRewardMessage* TournamentDetailRewardMessage::New() const {
  return new TournamentDetailRewardMessage;
}

void TournamentDetailRewardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    if (has_rmb()) {
      if (rmb_ != &::google::protobuf::internal::kEmptyString) {
        rmb_->clear();
      }
    }
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TournamentDetailRewardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_money;
        break;
      }
      
      // optional string money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->money().data(), this->money().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rmb;
        break;
      }
      
      // optional string rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rmb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rmb().data(), this->rmb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_displayName;
        break;
      }
      
      // optional string displayName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TournamentDetailRewardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }
  
  // optional string money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->money(), output);
  }
  
  // optional string rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rmb().data(), this->rmb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rmb(), output);
  }
  
  // optional string displayName = 4;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->displayname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TournamentDetailRewardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }
  
  // optional string money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->money(), target);
  }
  
  // optional string rmb = 3;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rmb().data(), this->rmb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rmb(), target);
  }
  
  // optional string displayName = 4;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->displayname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TournamentDetailRewardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // optional string rmb = 3;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rmb());
    }
    
    // optional string displayName = 4;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TournamentDetailRewardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TournamentDetailRewardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TournamentDetailRewardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TournamentDetailRewardMessage::MergeFrom(const TournamentDetailRewardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TournamentDetailRewardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TournamentDetailRewardMessage::CopyFrom(const TournamentDetailRewardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentDetailRewardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TournamentDetailRewardMessage::Swap(TournamentDetailRewardMessage* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(money_, other->money_);
    std::swap(rmb_, other->rmb_);
    std::swap(displayname_, other->displayname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TournamentDetailRewardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TournamentDetailRewardMessage_descriptor_;
  metadata.reflection = TournamentDetailRewardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTournamentCommand::kTypeFieldNumber;
#endif  // !_MSC_VER

RequestTournamentCommand::RequestTournamentCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTournamentCommand::InitAsDefaultInstance() {
}

RequestTournamentCommand::RequestTournamentCommand(const RequestTournamentCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTournamentCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTournamentCommand::~RequestTournamentCommand() {
  SharedDtor();
}

void RequestTournamentCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTournamentCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTournamentCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTournamentCommand_descriptor_;
}

const RequestTournamentCommand& RequestTournamentCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTournamentCommand* RequestTournamentCommand::default_instance_ = NULL;

RequestTournamentCommand* RequestTournamentCommand::New() const {
  return new RequestTournamentCommand;
}

void RequestTournamentCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTournamentCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTournamentCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTournamentCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTournamentCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTournamentCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTournamentCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTournamentCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTournamentCommand::MergeFrom(const RequestTournamentCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTournamentCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTournamentCommand::CopyFrom(const RequestTournamentCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTournamentCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTournamentCommand::Swap(RequestTournamentCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTournamentCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTournamentCommand_descriptor_;
  metadata.reflection = RequestTournamentCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentCommand::kTournamentFieldNumber;
const int ResponseTournamentCommand::kTypeFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentCommand::ResponseTournamentCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentCommand::InitAsDefaultInstance() {
}

ResponseTournamentCommand::ResponseTournamentCommand(const ResponseTournamentCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentCommand::~ResponseTournamentCommand() {
  SharedDtor();
}

void ResponseTournamentCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseTournamentCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentCommand_descriptor_;
}

const ResponseTournamentCommand& ResponseTournamentCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentCommand* ResponseTournamentCommand::default_instance_ = NULL;

ResponseTournamentCommand* ResponseTournamentCommand::New() const {
  return new ResponseTournamentCommand;
}

void ResponseTournamentCommand::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  tournament_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentMessage tournament = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournament:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournament()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tournament;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentMessage tournament = 1;
  for (int i = 0; i < this->tournament_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tournament(i), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentMessage tournament = 1;
  for (int i = 0; i < this->tournament_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tournament(i), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentMessage tournament = 1;
  total_size += 1 * this->tournament_size();
  for (int i = 0; i < this->tournament_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournament(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentCommand::MergeFrom(const ResponseTournamentCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  tournament_.MergeFrom(from.tournament_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentCommand::CopyFrom(const ResponseTournamentCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentCommand::IsInitialized() const {
  
  for (int i = 0; i < tournament_size(); i++) {
    if (!this->tournament(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseTournamentCommand::Swap(ResponseTournamentCommand* other) {
  if (other != this) {
    tournament_.Swap(&other->tournament_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentCommand_descriptor_;
  metadata.reflection = ResponseTournamentCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTournamentRewardDetailCommand::kTournamentOnlineIdFieldNumber;
#endif  // !_MSC_VER

RequestTournamentRewardDetailCommand::RequestTournamentRewardDetailCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTournamentRewardDetailCommand::InitAsDefaultInstance() {
}

RequestTournamentRewardDetailCommand::RequestTournamentRewardDetailCommand(const RequestTournamentRewardDetailCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTournamentRewardDetailCommand::SharedCtor() {
  _cached_size_ = 0;
  tournamentonlineid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTournamentRewardDetailCommand::~RequestTournamentRewardDetailCommand() {
  SharedDtor();
}

void RequestTournamentRewardDetailCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTournamentRewardDetailCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTournamentRewardDetailCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTournamentRewardDetailCommand_descriptor_;
}

const RequestTournamentRewardDetailCommand& RequestTournamentRewardDetailCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTournamentRewardDetailCommand* RequestTournamentRewardDetailCommand::default_instance_ = NULL;

RequestTournamentRewardDetailCommand* RequestTournamentRewardDetailCommand::New() const {
  return new RequestTournamentRewardDetailCommand;
}

void RequestTournamentRewardDetailCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tournamentonlineid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTournamentRewardDetailCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tournamentOnlineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTournamentRewardDetailCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tournamentOnlineId = 2;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tournamentonlineid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTournamentRewardDetailCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tournamentOnlineId = 2;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tournamentonlineid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTournamentRewardDetailCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tournamentOnlineId = 2;
    if (has_tournamentonlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTournamentRewardDetailCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTournamentRewardDetailCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTournamentRewardDetailCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTournamentRewardDetailCommand::MergeFrom(const RequestTournamentRewardDetailCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTournamentRewardDetailCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTournamentRewardDetailCommand::CopyFrom(const RequestTournamentRewardDetailCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTournamentRewardDetailCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTournamentRewardDetailCommand::Swap(RequestTournamentRewardDetailCommand* other) {
  if (other != this) {
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTournamentRewardDetailCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTournamentRewardDetailCommand_descriptor_;
  metadata.reflection = RequestTournamentRewardDetailCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentRewardDetailCommand::kRewardDetailFieldNumber;
const int ResponseTournamentRewardDetailCommand::kSelfRankFieldNumber;
const int ResponseTournamentRewardDetailCommand::kSelfNameFieldNumber;
const int ResponseTournamentRewardDetailCommand::kSelfRaceTimeFieldNumber;
const int ResponseTournamentRewardDetailCommand::kSelfRewardFieldNumber;
const int ResponseTournamentRewardDetailCommand::kSelfHeadIndexFieldNumber;
const int ResponseTournamentRewardDetailCommand::kSelfHeadUrlFieldNumber;
const int ResponseTournamentRewardDetailCommand::kTournamentNameFieldNumber;
const int ResponseTournamentRewardDetailCommand::kInfoFieldNumber;
const int ResponseTournamentRewardDetailCommand::kFriendLeaderboardFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentRewardDetailCommand::ResponseTournamentRewardDetailCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentRewardDetailCommand::InitAsDefaultInstance() {
}

ResponseTournamentRewardDetailCommand::ResponseTournamentRewardDetailCommand(const ResponseTournamentRewardDetailCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentRewardDetailCommand::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = 0;
  selfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfracetime_ = 0;
  selfreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfheadindex_ = 0;
  selfheadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tournamentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentRewardDetailCommand::~ResponseTournamentRewardDetailCommand() {
  SharedDtor();
}

void ResponseTournamentRewardDetailCommand::SharedDtor() {
  if (selfname_ != &::google::protobuf::internal::kEmptyString) {
    delete selfname_;
  }
  if (selfreward_ != &::google::protobuf::internal::kEmptyString) {
    delete selfreward_;
  }
  if (selfheadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete selfheadurl_;
  }
  if (tournamentname_ != &::google::protobuf::internal::kEmptyString) {
    delete tournamentname_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ResponseTournamentRewardDetailCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentRewardDetailCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentRewardDetailCommand_descriptor_;
}

const ResponseTournamentRewardDetailCommand& ResponseTournamentRewardDetailCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentRewardDetailCommand* ResponseTournamentRewardDetailCommand::default_instance_ = NULL;

ResponseTournamentRewardDetailCommand* ResponseTournamentRewardDetailCommand::New() const {
  return new ResponseTournamentRewardDetailCommand;
}

void ResponseTournamentRewardDetailCommand::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    selfrank_ = 0;
    if (has_selfname()) {
      if (selfname_ != &::google::protobuf::internal::kEmptyString) {
        selfname_->clear();
      }
    }
    selfracetime_ = 0;
    if (has_selfreward()) {
      if (selfreward_ != &::google::protobuf::internal::kEmptyString) {
        selfreward_->clear();
      }
    }
    selfheadindex_ = 0;
    if (has_selfheadurl()) {
      if (selfheadurl_ != &::google::protobuf::internal::kEmptyString) {
        selfheadurl_->clear();
      }
    }
    if (has_tournamentname()) {
      if (tournamentname_ != &::google::protobuf::internal::kEmptyString) {
        tournamentname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  rewarddetail_.Clear();
  friendleaderboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentRewardDetailCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardDetailMessage rewardDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewarddetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewardDetail;
        if (input->ExpectTag(16)) goto parse_selfRank;
        break;
      }
      
      // optional int32 selfRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfName;
        break;
      }
      
      // optional string selfName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfname().data(), this->selfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_selfRaceTime;
        break;
      }
      
      // optional float selfRaceTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_selfRaceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selfracetime_)));
          set_has_selfracetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selfReward;
        break;
      }
      
      // optional string selfReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfreward().data(), this->selfreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfHeadIndex;
        break;
      }
      
      // optional int32 selfHeadIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfHeadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfheadindex_)));
          set_has_selfheadindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_selfHeadUrl;
        break;
      }
      
      // optional string selfHeadUrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfHeadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfheadurl().data(), this->selfheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tournamentName;
        break;
      }
      
      // required string tournamentName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournamentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournamentname().data(), this->tournamentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_info;
        break;
      }
      
      // optional string info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friendLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_friendLeaderboard;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentRewardDetailCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardDetailMessage rewardDetail = 1;
  for (int i = 0; i < this->rewarddetail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewarddetail(i), output);
  }
  
  // optional int32 selfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfrank(), output);
  }
  
  // optional string selfName = 3;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->selfname(), output);
  }
  
  // optional float selfRaceTime = 4;
  if (has_selfracetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->selfracetime(), output);
  }
  
  // optional string selfReward = 5;
  if (has_selfreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfreward().data(), this->selfreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->selfreward(), output);
  }
  
  // optional int32 selfHeadIndex = 6;
  if (has_selfheadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->selfheadindex(), output);
  }
  
  // optional string selfHeadUrl = 7;
  if (has_selfheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfheadurl().data(), this->selfheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->selfheadurl(), output);
  }
  
  // required string tournamentName = 8;
  if (has_tournamentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentname().data(), this->tournamentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tournamentname(), output);
  }
  
  // optional string info = 9;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->info(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 10;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->friendleaderboard(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentRewardDetailCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardDetailMessage rewardDetail = 1;
  for (int i = 0; i < this->rewarddetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewarddetail(i), target);
  }
  
  // optional int32 selfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfrank(), target);
  }
  
  // optional string selfName = 3;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->selfname(), target);
  }
  
  // optional float selfRaceTime = 4;
  if (has_selfracetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->selfracetime(), target);
  }
  
  // optional string selfReward = 5;
  if (has_selfreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfreward().data(), this->selfreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->selfreward(), target);
  }
  
  // optional int32 selfHeadIndex = 6;
  if (has_selfheadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->selfheadindex(), target);
  }
  
  // optional string selfHeadUrl = 7;
  if (has_selfheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfheadurl().data(), this->selfheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->selfheadurl(), target);
  }
  
  // required string tournamentName = 8;
  if (has_tournamentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentname().data(), this->tournamentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tournamentname(), target);
  }
  
  // optional string info = 9;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->info(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 10;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->friendleaderboard(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentRewardDetailCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 selfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }
    
    // optional string selfName = 3;
    if (has_selfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfname());
    }
    
    // optional float selfRaceTime = 4;
    if (has_selfracetime()) {
      total_size += 1 + 4;
    }
    
    // optional string selfReward = 5;
    if (has_selfreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfreward());
    }
    
    // optional int32 selfHeadIndex = 6;
    if (has_selfheadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfheadindex());
    }
    
    // optional string selfHeadUrl = 7;
    if (has_selfheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfheadurl());
    }
    
    // required string tournamentName = 8;
    if (has_tournamentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournamentname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string info = 9;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentRewardDetailMessage rewardDetail = 1;
  total_size += 1 * this->rewarddetail_size();
  for (int i = 0; i < this->rewarddetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewarddetail(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 10;
  total_size += 1 * this->friendleaderboard_size();
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendleaderboard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentRewardDetailCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentRewardDetailCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentRewardDetailCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentRewardDetailCommand::MergeFrom(const ResponseTournamentRewardDetailCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarddetail_.MergeFrom(from.rewarddetail_);
  friendleaderboard_.MergeFrom(from.friendleaderboard_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_selfname()) {
      set_selfname(from.selfname());
    }
    if (from.has_selfracetime()) {
      set_selfracetime(from.selfracetime());
    }
    if (from.has_selfreward()) {
      set_selfreward(from.selfreward());
    }
    if (from.has_selfheadindex()) {
      set_selfheadindex(from.selfheadindex());
    }
    if (from.has_selfheadurl()) {
      set_selfheadurl(from.selfheadurl());
    }
    if (from.has_tournamentname()) {
      set_tournamentname(from.tournamentname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentRewardDetailCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentRewardDetailCommand::CopyFrom(const ResponseTournamentRewardDetailCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentRewardDetailCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  
  for (int i = 0; i < rewarddetail_size(); i++) {
    if (!this->rewarddetail(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friendleaderboard_size(); i++) {
    if (!this->friendleaderboard(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseTournamentRewardDetailCommand::Swap(ResponseTournamentRewardDetailCommand* other) {
  if (other != this) {
    rewarddetail_.Swap(&other->rewarddetail_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(selfname_, other->selfname_);
    std::swap(selfracetime_, other->selfracetime_);
    std::swap(selfreward_, other->selfreward_);
    std::swap(selfheadindex_, other->selfheadindex_);
    std::swap(selfheadurl_, other->selfheadurl_);
    std::swap(tournamentname_, other->tournamentname_);
    std::swap(info_, other->info_);
    friendleaderboard_.Swap(&other->friendleaderboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentRewardDetailCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentRewardDetailCommand_descriptor_;
  metadata.reflection = ResponseTournamentRewardDetailCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int responseTournamentRewardCommand::kRankFieldNumber;
const int responseTournamentRewardCommand::kMoneyFieldNumber;
const int responseTournamentRewardCommand::kMoneyIconIdFieldNumber;
const int responseTournamentRewardCommand::kRmbFieldNumber;
const int responseTournamentRewardCommand::kGoldIconIdFieldNumber;
const int responseTournamentRewardCommand::kDisplayNameFieldNumber;
const int responseTournamentRewardCommand::kIsGetFieldNumber;
#endif  // !_MSC_VER

responseTournamentRewardCommand::responseTournamentRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void responseTournamentRewardCommand::InitAsDefaultInstance() {
}

responseTournamentRewardCommand::responseTournamentRewardCommand(const responseTournamentRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void responseTournamentRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  money_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneyiconid_ = 0;
  rmb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goldiconid_ = 0;
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isget_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

responseTournamentRewardCommand::~responseTournamentRewardCommand() {
  SharedDtor();
}

void responseTournamentRewardCommand::SharedDtor() {
  if (money_ != &::google::protobuf::internal::kEmptyString) {
    delete money_;
  }
  if (rmb_ != &::google::protobuf::internal::kEmptyString) {
    delete rmb_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void responseTournamentRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* responseTournamentRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return responseTournamentRewardCommand_descriptor_;
}

const responseTournamentRewardCommand& responseTournamentRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

responseTournamentRewardCommand* responseTournamentRewardCommand::default_instance_ = NULL;

responseTournamentRewardCommand* responseTournamentRewardCommand::New() const {
  return new responseTournamentRewardCommand;
}

void responseTournamentRewardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_money()) {
      if (money_ != &::google::protobuf::internal::kEmptyString) {
        money_->clear();
      }
    }
    moneyiconid_ = 0;
    if (has_rmb()) {
      if (rmb_ != &::google::protobuf::internal::kEmptyString) {
        rmb_->clear();
      }
    }
    goldiconid_ = 0;
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
    isget_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool responseTournamentRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_money;
        break;
      }
      
      // optional string money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_money()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->money().data(), this->money().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moneyIconId;
        break;
      }
      
      // optional int32 moneyIconId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyIconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneyiconid_)));
          set_has_moneyiconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rmb;
        break;
      }
      
      // optional string rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rmb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rmb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rmb().data(), this->rmb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goldIconId;
        break;
      }
      
      // optional int32 goldIconId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldIconId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldiconid_)));
          set_has_goldiconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_displayName;
        break;
      }
      
      // optional string displayName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isGet;
        break;
      }
      
      // optional bool isGet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isget_)));
          set_has_isget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void responseTournamentRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // optional string money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->money(), output);
  }
  
  // optional int32 moneyIconId = 3;
  if (has_moneyiconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->moneyiconid(), output);
  }
  
  // optional string rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rmb().data(), this->rmb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rmb(), output);
  }
  
  // optional int32 goldIconId = 5;
  if (has_goldiconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->goldiconid(), output);
  }
  
  // optional string displayName = 6;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->displayname(), output);
  }
  
  // optional bool isGet = 7;
  if (has_isget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* responseTournamentRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // optional string money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->money().data(), this->money().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->money(), target);
  }
  
  // optional int32 moneyIconId = 3;
  if (has_moneyiconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->moneyiconid(), target);
  }
  
  // optional string rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rmb().data(), this->rmb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rmb(), target);
  }
  
  // optional int32 goldIconId = 5;
  if (has_goldiconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->goldiconid(), target);
  }
  
  // optional string displayName = 6;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->displayname(), target);
  }
  
  // optional bool isGet = 7;
  if (has_isget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int responseTournamentRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // optional string money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->money());
    }
    
    // optional int32 moneyIconId = 3;
    if (has_moneyiconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneyiconid());
    }
    
    // optional string rmb = 4;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rmb());
    }
    
    // optional int32 goldIconId = 5;
    if (has_goldiconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldiconid());
    }
    
    // optional string displayName = 6;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
    // optional bool isGet = 7;
    if (has_isget()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void responseTournamentRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const responseTournamentRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const responseTournamentRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void responseTournamentRewardCommand::MergeFrom(const responseTournamentRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_moneyiconid()) {
      set_moneyiconid(from.moneyiconid());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_goldiconid()) {
      set_goldiconid(from.goldiconid());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
    if (from.has_isget()) {
      set_isget(from.isget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void responseTournamentRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void responseTournamentRewardCommand::CopyFrom(const responseTournamentRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool responseTournamentRewardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void responseTournamentRewardCommand::Swap(responseTournamentRewardCommand* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(money_, other->money_);
    std::swap(moneyiconid_, other->moneyiconid_);
    std::swap(rmb_, other->rmb_);
    std::swap(goldiconid_, other->goldiconid_);
    std::swap(displayname_, other->displayname_);
    std::swap(isget_, other->isget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata responseTournamentRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = responseTournamentRewardCommand_descriptor_;
  metadata.reflection = responseTournamentRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTournamentSignUpCommand::kTournamentOnlineIdFieldNumber;
#endif  // !_MSC_VER

RequestTournamentSignUpCommand::RequestTournamentSignUpCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTournamentSignUpCommand::InitAsDefaultInstance() {
}

RequestTournamentSignUpCommand::RequestTournamentSignUpCommand(const RequestTournamentSignUpCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTournamentSignUpCommand::SharedCtor() {
  _cached_size_ = 0;
  tournamentonlineid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTournamentSignUpCommand::~RequestTournamentSignUpCommand() {
  SharedDtor();
}

void RequestTournamentSignUpCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTournamentSignUpCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTournamentSignUpCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTournamentSignUpCommand_descriptor_;
}

const RequestTournamentSignUpCommand& RequestTournamentSignUpCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTournamentSignUpCommand* RequestTournamentSignUpCommand::default_instance_ = NULL;

RequestTournamentSignUpCommand* RequestTournamentSignUpCommand::New() const {
  return new RequestTournamentSignUpCommand;
}

void RequestTournamentSignUpCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tournamentonlineid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTournamentSignUpCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tournamentOnlineId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTournamentSignUpCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tournamentOnlineId = 1;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tournamentonlineid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTournamentSignUpCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tournamentOnlineId = 1;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tournamentonlineid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTournamentSignUpCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tournamentOnlineId = 1;
    if (has_tournamentonlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTournamentSignUpCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTournamentSignUpCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTournamentSignUpCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTournamentSignUpCommand::MergeFrom(const RequestTournamentSignUpCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTournamentSignUpCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTournamentSignUpCommand::CopyFrom(const RequestTournamentSignUpCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTournamentSignUpCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTournamentSignUpCommand::Swap(RequestTournamentSignUpCommand* other) {
  if (other != this) {
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTournamentSignUpCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTournamentSignUpCommand_descriptor_;
  metadata.reflection = RequestTournamentSignUpCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentSignUpCommand::kResultFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentSignUpCommand::ResponseTournamentSignUpCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentSignUpCommand::InitAsDefaultInstance() {
}

ResponseTournamentSignUpCommand::ResponseTournamentSignUpCommand(const ResponseTournamentSignUpCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentSignUpCommand::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentSignUpCommand::~ResponseTournamentSignUpCommand() {
  SharedDtor();
}

void ResponseTournamentSignUpCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseTournamentSignUpCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentSignUpCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentSignUpCommand_descriptor_;
}

const ResponseTournamentSignUpCommand& ResponseTournamentSignUpCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentSignUpCommand* ResponseTournamentSignUpCommand::default_instance_ = NULL;

ResponseTournamentSignUpCommand* ResponseTournamentSignUpCommand::New() const {
  return new ResponseTournamentSignUpCommand;
}

void ResponseTournamentSignUpCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentSignUpCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentSignUpCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentSignUpCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentSignUpCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentSignUpCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentSignUpCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentSignUpCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentSignUpCommand::MergeFrom(const ResponseTournamentSignUpCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentSignUpCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentSignUpCommand::CopyFrom(const ResponseTournamentSignUpCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentSignUpCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseTournamentSignUpCommand::Swap(ResponseTournamentSignUpCommand* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentSignUpCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentSignUpCommand_descriptor_;
  metadata.reflection = ResponseTournamentSignUpCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTournamentDetailCommand::kTournamentOnlineIdFieldNumber;
const int RequestTournamentDetailCommand::kRaceTypeFieldNumber;
#endif  // !_MSC_VER

RequestTournamentDetailCommand::RequestTournamentDetailCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTournamentDetailCommand::InitAsDefaultInstance() {
}

RequestTournamentDetailCommand::RequestTournamentDetailCommand(const RequestTournamentDetailCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTournamentDetailCommand::SharedCtor() {
  _cached_size_ = 0;
  tournamentonlineid_ = 0;
  racetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTournamentDetailCommand::~RequestTournamentDetailCommand() {
  SharedDtor();
}

void RequestTournamentDetailCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTournamentDetailCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTournamentDetailCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTournamentDetailCommand_descriptor_;
}

const RequestTournamentDetailCommand& RequestTournamentDetailCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTournamentDetailCommand* RequestTournamentDetailCommand::default_instance_ = NULL;

RequestTournamentDetailCommand* RequestTournamentDetailCommand::New() const {
  return new RequestTournamentDetailCommand;
}

void RequestTournamentDetailCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tournamentonlineid_ = 0;
    racetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTournamentDetailCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tournamentOnlineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raceType;
        break;
      }
      
      // optional int32 raceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &racetype_)));
          set_has_racetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTournamentDetailCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tournamentOnlineId = 2;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tournamentonlineid(), output);
  }
  
  // optional int32 raceType = 3;
  if (has_racetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->racetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTournamentDetailCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tournamentOnlineId = 2;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tournamentonlineid(), target);
  }
  
  // optional int32 raceType = 3;
  if (has_racetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->racetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTournamentDetailCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tournamentOnlineId = 2;
    if (has_tournamentonlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
    // optional int32 raceType = 3;
    if (has_racetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->racetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTournamentDetailCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTournamentDetailCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTournamentDetailCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTournamentDetailCommand::MergeFrom(const RequestTournamentDetailCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
    if (from.has_racetype()) {
      set_racetype(from.racetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTournamentDetailCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTournamentDetailCommand::CopyFrom(const RequestTournamentDetailCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTournamentDetailCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTournamentDetailCommand::Swap(RequestTournamentDetailCommand* other) {
  if (other != this) {
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(racetype_, other->racetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTournamentDetailCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTournamentDetailCommand_descriptor_;
  metadata.reflection = RequestTournamentDetailCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentDetailCommand::kTournamentDetailFieldNumber;
const int ResponseTournamentDetailCommand::kSelfRankFieldNumber;
const int ResponseTournamentDetailCommand::kSelfNameFieldNumber;
const int ResponseTournamentDetailCommand::kSelfRaceTimeFieldNumber;
const int ResponseTournamentDetailCommand::kSelfHeadIndexFieldNumber;
const int ResponseTournamentDetailCommand::kSelfHeadUrlFieldNumber;
const int ResponseTournamentDetailCommand::kTournamentSignUpPriceFieldNumber;
const int ResponseTournamentDetailCommand::kTournamentGroupFieldNumber;
const int ResponseTournamentDetailCommand::kTournamentDescriptionFieldNumber;
const int ResponseTournamentDetailCommand::kTournamentCarNameFieldNumber;
const int ResponseTournamentDetailCommand::kDetailRewardFieldNumber;
const int ResponseTournamentDetailCommand::kIshasCarFieldNumber;
const int ResponseTournamentDetailCommand::kCarIDsFieldNumber;
const int ResponseTournamentDetailCommand::kHotRideCarIdFieldNumber;
const int ResponseTournamentDetailCommand::kIsNotConsumableFieldNumber;
const int ResponseTournamentDetailCommand::kWeiboContentFieldNumber;
const int ResponseTournamentDetailCommand::kHintFieldNumber;
const int ResponseTournamentDetailCommand::kFriendLeaderboardFieldNumber;
const int ResponseTournamentDetailCommand::kStartContentFieldNumber;
const int ResponseTournamentDetailCommand::kEndContentFieldNumber;
const int ResponseTournamentDetailCommand::kWeiboShareContentFieldNumber;
const int ResponseTournamentDetailCommand::kTournamentOnlineIdFieldNumber;
const int ResponseTournamentDetailCommand::kTournamentGroupIdFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentDetailCommand::ResponseTournamentDetailCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentDetailCommand::InitAsDefaultInstance() {
}

ResponseTournamentDetailCommand::ResponseTournamentDetailCommand(const ResponseTournamentDetailCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentDetailCommand::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = 0;
  selfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfracetime_ = 0;
  selfheadindex_ = 0;
  selfheadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tournamentsignupprice_ = 0;
  tournamentgroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tournamentdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ishascar_ = 0;
  hotridecarid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isnotconsumable_ = false;
  weibocontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weibosharecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tournamentonlineid_ = 0;
  tournamentgroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentDetailCommand::~ResponseTournamentDetailCommand() {
  SharedDtor();
}

void ResponseTournamentDetailCommand::SharedDtor() {
  if (selfname_ != &::google::protobuf::internal::kEmptyString) {
    delete selfname_;
  }
  if (selfheadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete selfheadurl_;
  }
  if (tournamentgroup_ != &::google::protobuf::internal::kEmptyString) {
    delete tournamentgroup_;
  }
  if (tournamentdescription_ != &::google::protobuf::internal::kEmptyString) {
    delete tournamentdescription_;
  }
  if (hotridecarid_ != &::google::protobuf::internal::kEmptyString) {
    delete hotridecarid_;
  }
  if (weibocontent_ != &::google::protobuf::internal::kEmptyString) {
    delete weibocontent_;
  }
  if (hint_ != &::google::protobuf::internal::kEmptyString) {
    delete hint_;
  }
  if (startcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete startcontent_;
  }
  if (endcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete endcontent_;
  }
  if (weibosharecontent_ != &::google::protobuf::internal::kEmptyString) {
    delete weibosharecontent_;
  }
  if (this != default_instance_) {
  }
}

void ResponseTournamentDetailCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentDetailCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentDetailCommand_descriptor_;
}

const ResponseTournamentDetailCommand& ResponseTournamentDetailCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentDetailCommand* ResponseTournamentDetailCommand::default_instance_ = NULL;

ResponseTournamentDetailCommand* ResponseTournamentDetailCommand::New() const {
  return new ResponseTournamentDetailCommand;
}

void ResponseTournamentDetailCommand::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    selfrank_ = 0;
    if (has_selfname()) {
      if (selfname_ != &::google::protobuf::internal::kEmptyString) {
        selfname_->clear();
      }
    }
    selfracetime_ = 0;
    selfheadindex_ = 0;
    if (has_selfheadurl()) {
      if (selfheadurl_ != &::google::protobuf::internal::kEmptyString) {
        selfheadurl_->clear();
      }
    }
    tournamentsignupprice_ = 0;
    if (has_tournamentgroup()) {
      if (tournamentgroup_ != &::google::protobuf::internal::kEmptyString) {
        tournamentgroup_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_tournamentdescription()) {
      if (tournamentdescription_ != &::google::protobuf::internal::kEmptyString) {
        tournamentdescription_->clear();
      }
    }
    ishascar_ = 0;
    if (has_hotridecarid()) {
      if (hotridecarid_ != &::google::protobuf::internal::kEmptyString) {
        hotridecarid_->clear();
      }
    }
    isnotconsumable_ = false;
    if (has_weibocontent()) {
      if (weibocontent_ != &::google::protobuf::internal::kEmptyString) {
        weibocontent_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_hint()) {
      if (hint_ != &::google::protobuf::internal::kEmptyString) {
        hint_->clear();
      }
    }
    if (has_startcontent()) {
      if (startcontent_ != &::google::protobuf::internal::kEmptyString) {
        startcontent_->clear();
      }
    }
    if (has_endcontent()) {
      if (endcontent_ != &::google::protobuf::internal::kEmptyString) {
        endcontent_->clear();
      }
    }
    if (has_weibosharecontent()) {
      if (weibosharecontent_ != &::google::protobuf::internal::kEmptyString) {
        weibosharecontent_->clear();
      }
    }
    tournamentonlineid_ = 0;
    tournamentgroupid_ = 0;
  }
  tournamentdetail_.Clear();
  tournamentcarname_.Clear();
  detailreward_.Clear();
  carids_.Clear();
  friendleaderboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentDetailCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailMessage tournamentDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournamentdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tournamentDetail;
        if (input->ExpectTag(16)) goto parse_selfRank;
        break;
      }
      
      // optional int32 selfRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_selfName;
        break;
      }
      
      // optional string selfName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfname().data(), this->selfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_selfRaceTime;
        break;
      }
      
      // optional float selfRaceTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_selfRaceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selfracetime_)));
          set_has_selfracetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfHeadIndex;
        break;
      }
      
      // optional int32 selfHeadIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfHeadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfheadindex_)));
          set_has_selfheadindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_selfHeadUrl;
        break;
      }
      
      // optional string selfHeadUrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfHeadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfheadurl().data(), this->selfheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_tournamentSignUpPrice;
        break;
      }
      
      // required int32 tournamentSignUpPrice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentSignUpPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentsignupprice_)));
          set_has_tournamentsignupprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tournamentGroup;
        break;
      }
      
      // required string tournamentGroup = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournamentgroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournamentgroup().data(), this->tournamentgroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_tournamentDescription;
        break;
      }
      
      // required string tournamentDescription = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tournamentdescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournamentdescription().data(), this->tournamentdescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tournamentCarName;
        break;
      }
      
      // repeated string tournamentCarName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentCarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tournamentcarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tournamentcarname(0).data(), this->tournamentcarname(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tournamentCarName;
        if (input->ExpectTag(122)) goto parse_detailReward;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_detailReward;
        if (input->ExpectTag(128)) goto parse_ishasCar;
        break;
      }
      
      // required int32 ishasCar = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ishasCar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishascar_)));
          set_has_ishascar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_carIDs;
        break;
      }
      
      // repeated string carIDs = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_carids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carids(0).data(), this->carids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_carIDs;
        if (input->ExpectTag(146)) goto parse_hotRideCarId;
        break;
      }
      
      // optional string hotRideCarId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotRideCarId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotridecarid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotridecarid().data(), this->hotridecarid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isNotConsumable;
        break;
      }
      
      // optional bool isNotConsumable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNotConsumable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnotconsumable_)));
          set_has_isnotconsumable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_weiboContent;
        break;
      }
      
      // optional string weiboContent = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weiboContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibocontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weibocontent().data(), this->weibocontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_hint;
        break;
      }
      
      // optional string hint = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hint().data(), this->hint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_friendLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_friendLeaderboard;
        if (input->ExpectTag(186)) goto parse_startContent;
        break;
      }
      
      // optional string startContent = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startcontent().data(), this->startcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_endContent;
        break;
      }
      
      // optional string endContent = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endcontent().data(), this->endcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_weiboShareContent;
        break;
      }
      
      // optional string weiboShareContent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weiboShareContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weibosharecontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weibosharecontent().data(), this->weibosharecontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tournamentOnlineId;
        break;
      }
      
      // optional int32 tournamentOnlineId = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentOnlineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_tournamentGroupId;
        break;
      }
      
      // optional int32 tournamentGroupId = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentgroupid_)));
          set_has_tournamentgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentDetailCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailMessage tournamentDetail = 1;
  for (int i = 0; i < this->tournamentdetail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tournamentdetail(i), output);
  }
  
  // optional int32 selfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfrank(), output);
  }
  
  // optional string selfName = 3;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->selfname(), output);
  }
  
  // optional float selfRaceTime = 4;
  if (has_selfracetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->selfracetime(), output);
  }
  
  // optional int32 selfHeadIndex = 6;
  if (has_selfheadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->selfheadindex(), output);
  }
  
  // optional string selfHeadUrl = 7;
  if (has_selfheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfheadurl().data(), this->selfheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->selfheadurl(), output);
  }
  
  // required int32 tournamentSignUpPrice = 11;
  if (has_tournamentsignupprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tournamentsignupprice(), output);
  }
  
  // required string tournamentGroup = 12;
  if (has_tournamentgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentgroup().data(), this->tournamentgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->tournamentgroup(), output);
  }
  
  // required string tournamentDescription = 13;
  if (has_tournamentdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentdescription().data(), this->tournamentdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tournamentdescription(), output);
  }
  
  // repeated string tournamentCarName = 14;
  for (int i = 0; i < this->tournamentcarname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tournamentcarname(i).data(), this->tournamentcarname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->tournamentcarname(i), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 15;
  for (int i = 0; i < this->detailreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->detailreward(i), output);
  }
  
  // required int32 ishasCar = 16;
  if (has_ishascar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->ishascar(), output);
  }
  
  // repeated string carIDs = 17;
  for (int i = 0; i < this->carids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->carids(i).data(), this->carids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->carids(i), output);
  }
  
  // optional string hotRideCarId = 18;
  if (has_hotridecarid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotridecarid().data(), this->hotridecarid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->hotridecarid(), output);
  }
  
  // optional bool isNotConsumable = 19;
  if (has_isnotconsumable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isnotconsumable(), output);
  }
  
  // optional string weiboContent = 20;
  if (has_weibocontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weibocontent().data(), this->weibocontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->weibocontent(), output);
  }
  
  // optional string hint = 21;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->hint(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 22;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->friendleaderboard(i), output);
  }
  
  // optional string startContent = 23;
  if (has_startcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startcontent().data(), this->startcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->startcontent(), output);
  }
  
  // optional string endContent = 24;
  if (has_endcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endcontent().data(), this->endcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->endcontent(), output);
  }
  
  // optional string weiboShareContent = 25;
  if (has_weibosharecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weibosharecontent().data(), this->weibosharecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->weibosharecontent(), output);
  }
  
  // optional int32 tournamentOnlineId = 26;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tournamentonlineid(), output);
  }
  
  // optional int32 tournamentGroupId = 27;
  if (has_tournamentgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->tournamentgroupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentDetailCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailMessage tournamentDetail = 1;
  for (int i = 0; i < this->tournamentdetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tournamentdetail(i), target);
  }
  
  // optional int32 selfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfrank(), target);
  }
  
  // optional string selfName = 3;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->selfname(), target);
  }
  
  // optional float selfRaceTime = 4;
  if (has_selfracetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->selfracetime(), target);
  }
  
  // optional int32 selfHeadIndex = 6;
  if (has_selfheadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->selfheadindex(), target);
  }
  
  // optional string selfHeadUrl = 7;
  if (has_selfheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfheadurl().data(), this->selfheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->selfheadurl(), target);
  }
  
  // required int32 tournamentSignUpPrice = 11;
  if (has_tournamentsignupprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tournamentsignupprice(), target);
  }
  
  // required string tournamentGroup = 12;
  if (has_tournamentgroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentgroup().data(), this->tournamentgroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->tournamentgroup(), target);
  }
  
  // required string tournamentDescription = 13;
  if (has_tournamentdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentdescription().data(), this->tournamentdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->tournamentdescription(), target);
  }
  
  // repeated string tournamentCarName = 14;
  for (int i = 0; i < this->tournamentcarname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tournamentcarname(i).data(), this->tournamentcarname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->tournamentcarname(i), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 15;
  for (int i = 0; i < this->detailreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->detailreward(i), target);
  }
  
  // required int32 ishasCar = 16;
  if (has_ishascar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->ishascar(), target);
  }
  
  // repeated string carIDs = 17;
  for (int i = 0; i < this->carids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carids(i).data(), this->carids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(17, this->carids(i), target);
  }
  
  // optional string hotRideCarId = 18;
  if (has_hotridecarid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotridecarid().data(), this->hotridecarid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->hotridecarid(), target);
  }
  
  // optional bool isNotConsumable = 19;
  if (has_isnotconsumable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isnotconsumable(), target);
  }
  
  // optional string weiboContent = 20;
  if (has_weibocontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weibocontent().data(), this->weibocontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->weibocontent(), target);
  }
  
  // optional string hint = 21;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->hint(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 22;
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->friendleaderboard(i), target);
  }
  
  // optional string startContent = 23;
  if (has_startcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startcontent().data(), this->startcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->startcontent(), target);
  }
  
  // optional string endContent = 24;
  if (has_endcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endcontent().data(), this->endcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->endcontent(), target);
  }
  
  // optional string weiboShareContent = 25;
  if (has_weibosharecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weibosharecontent().data(), this->weibosharecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->weibosharecontent(), target);
  }
  
  // optional int32 tournamentOnlineId = 26;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->tournamentonlineid(), target);
  }
  
  // optional int32 tournamentGroupId = 27;
  if (has_tournamentgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->tournamentgroupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentDetailCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 selfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }
    
    // optional string selfName = 3;
    if (has_selfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfname());
    }
    
    // optional float selfRaceTime = 4;
    if (has_selfracetime()) {
      total_size += 1 + 4;
    }
    
    // optional int32 selfHeadIndex = 6;
    if (has_selfheadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfheadindex());
    }
    
    // optional string selfHeadUrl = 7;
    if (has_selfheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfheadurl());
    }
    
    // required int32 tournamentSignUpPrice = 11;
    if (has_tournamentsignupprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentsignupprice());
    }
    
    // required string tournamentGroup = 12;
    if (has_tournamentgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournamentgroup());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string tournamentDescription = 13;
    if (has_tournamentdescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tournamentdescription());
    }
    
    // required int32 ishasCar = 16;
    if (has_ishascar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishascar());
    }
    
    // optional string hotRideCarId = 18;
    if (has_hotridecarid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotridecarid());
    }
    
    // optional bool isNotConsumable = 19;
    if (has_isnotconsumable()) {
      total_size += 2 + 1;
    }
    
    // optional string weiboContent = 20;
    if (has_weibocontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibocontent());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string hint = 21;
    if (has_hint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hint());
    }
    
    // optional string startContent = 23;
    if (has_startcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startcontent());
    }
    
    // optional string endContent = 24;
    if (has_endcontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endcontent());
    }
    
    // optional string weiboShareContent = 25;
    if (has_weibosharecontent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weibosharecontent());
    }
    
    // optional int32 tournamentOnlineId = 26;
    if (has_tournamentonlineid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
    // optional int32 tournamentGroupId = 27;
    if (has_tournamentgroupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentgroupid());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailMessage tournamentDetail = 1;
  total_size += 1 * this->tournamentdetail_size();
  for (int i = 0; i < this->tournamentdetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tournamentdetail(i));
  }
  
  // repeated string tournamentCarName = 14;
  total_size += 1 * this->tournamentcarname_size();
  for (int i = 0; i < this->tournamentcarname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tournamentcarname(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 15;
  total_size += 1 * this->detailreward_size();
  for (int i = 0; i < this->detailreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailreward(i));
  }
  
  // repeated string carIDs = 17;
  total_size += 2 * this->carids_size();
  for (int i = 0; i < this->carids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->carids(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Leaderboard friendLeaderboard = 22;
  total_size += 2 * this->friendleaderboard_size();
  for (int i = 0; i < this->friendleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendleaderboard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentDetailCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentDetailCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentDetailCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentDetailCommand::MergeFrom(const ResponseTournamentDetailCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  tournamentdetail_.MergeFrom(from.tournamentdetail_);
  tournamentcarname_.MergeFrom(from.tournamentcarname_);
  detailreward_.MergeFrom(from.detailreward_);
  carids_.MergeFrom(from.carids_);
  friendleaderboard_.MergeFrom(from.friendleaderboard_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_selfname()) {
      set_selfname(from.selfname());
    }
    if (from.has_selfracetime()) {
      set_selfracetime(from.selfracetime());
    }
    if (from.has_selfheadindex()) {
      set_selfheadindex(from.selfheadindex());
    }
    if (from.has_selfheadurl()) {
      set_selfheadurl(from.selfheadurl());
    }
    if (from.has_tournamentsignupprice()) {
      set_tournamentsignupprice(from.tournamentsignupprice());
    }
    if (from.has_tournamentgroup()) {
      set_tournamentgroup(from.tournamentgroup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tournamentdescription()) {
      set_tournamentdescription(from.tournamentdescription());
    }
    if (from.has_ishascar()) {
      set_ishascar(from.ishascar());
    }
    if (from.has_hotridecarid()) {
      set_hotridecarid(from.hotridecarid());
    }
    if (from.has_isnotconsumable()) {
      set_isnotconsumable(from.isnotconsumable());
    }
    if (from.has_weibocontent()) {
      set_weibocontent(from.weibocontent());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hint()) {
      set_hint(from.hint());
    }
    if (from.has_startcontent()) {
      set_startcontent(from.startcontent());
    }
    if (from.has_endcontent()) {
      set_endcontent(from.endcontent());
    }
    if (from.has_weibosharecontent()) {
      set_weibosharecontent(from.weibosharecontent());
    }
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
    if (from.has_tournamentgroupid()) {
      set_tournamentgroupid(from.tournamentgroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentDetailCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentDetailCommand::CopyFrom(const ResponseTournamentDetailCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentDetailCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x000009c0) != 0x000009c0) return false;
  
  for (int i = 0; i < tournamentdetail_size(); i++) {
    if (!this->tournamentdetail(i).IsInitialized()) return false;
  }
  for (int i = 0; i < detailreward_size(); i++) {
    if (!this->detailreward(i).IsInitialized()) return false;
  }
  for (int i = 0; i < friendleaderboard_size(); i++) {
    if (!this->friendleaderboard(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseTournamentDetailCommand::Swap(ResponseTournamentDetailCommand* other) {
  if (other != this) {
    tournamentdetail_.Swap(&other->tournamentdetail_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(selfname_, other->selfname_);
    std::swap(selfracetime_, other->selfracetime_);
    std::swap(selfheadindex_, other->selfheadindex_);
    std::swap(selfheadurl_, other->selfheadurl_);
    std::swap(tournamentsignupprice_, other->tournamentsignupprice_);
    std::swap(tournamentgroup_, other->tournamentgroup_);
    std::swap(tournamentdescription_, other->tournamentdescription_);
    tournamentcarname_.Swap(&other->tournamentcarname_);
    detailreward_.Swap(&other->detailreward_);
    std::swap(ishascar_, other->ishascar_);
    carids_.Swap(&other->carids_);
    std::swap(hotridecarid_, other->hotridecarid_);
    std::swap(isnotconsumable_, other->isnotconsumable_);
    std::swap(weibocontent_, other->weibocontent_);
    std::swap(hint_, other->hint_);
    friendleaderboard_.Swap(&other->friendleaderboard_);
    std::swap(startcontent_, other->startcontent_);
    std::swap(endcontent_, other->endcontent_);
    std::swap(weibosharecontent_, other->weibosharecontent_);
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(tournamentgroupid_, other->tournamentgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentDetailCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentDetailCommand_descriptor_;
  metadata.reflection = ResponseTournamentDetailCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGetRewardCommand::kTournamentOnlineIdFieldNumber;
#endif  // !_MSC_VER

RequestGetRewardCommand::RequestGetRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGetRewardCommand::InitAsDefaultInstance() {
}

RequestGetRewardCommand::RequestGetRewardCommand(const RequestGetRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGetRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  tournamentonlineid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGetRewardCommand::~RequestGetRewardCommand() {
  SharedDtor();
}

void RequestGetRewardCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestGetRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGetRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGetRewardCommand_descriptor_;
}

const RequestGetRewardCommand& RequestGetRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestGetRewardCommand* RequestGetRewardCommand::default_instance_ = NULL;

RequestGetRewardCommand* RequestGetRewardCommand::New() const {
  return new RequestGetRewardCommand;
}

void RequestGetRewardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tournamentonlineid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGetRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tournamentOnlineId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGetRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tournamentOnlineId = 2;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tournamentonlineid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGetRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tournamentOnlineId = 2;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tournamentonlineid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGetRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tournamentOnlineId = 2;
    if (has_tournamentonlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGetRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGetRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGetRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGetRewardCommand::MergeFrom(const RequestGetRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGetRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGetRewardCommand::CopyFrom(const RequestGetRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGetRewardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestGetRewardCommand::Swap(RequestGetRewardCommand* other) {
  if (other != this) {
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGetRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGetRewardCommand_descriptor_;
  metadata.reflection = RequestGetRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGetRewardCommand::kSuccessFieldNumber;
const int ResponseGetRewardCommand::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

ResponseGetRewardCommand::ResponseGetRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseGetRewardCommand::InitAsDefaultInstance() {
}

ResponseGetRewardCommand::ResponseGetRewardCommand(const ResponseGetRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGetRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGetRewardCommand::~ResponseGetRewardCommand() {
  SharedDtor();
}

void ResponseGetRewardCommand::SharedDtor() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void ResponseGetRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGetRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGetRewardCommand_descriptor_;
}

const ResponseGetRewardCommand& ResponseGetRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseGetRewardCommand* ResponseGetRewardCommand::default_instance_ = NULL;

ResponseGetRewardCommand* ResponseGetRewardCommand::New() const {
  return new ResponseGetRewardCommand;
}

void ResponseGetRewardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseGetRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errorMessage;
        break;
      }
      
      // optional string errorMessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGetRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->success(), output);
  }
  
  // optional string errorMessage = 3;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseGetRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->success(), target);
  }
  
  // optional string errorMessage = 3;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseGetRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }
    
    // optional string errorMessage = 3;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGetRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseGetRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseGetRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseGetRewardCommand::MergeFrom(const ResponseGetRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseGetRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGetRewardCommand::CopyFrom(const ResponseGetRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGetRewardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseGetRewardCommand::Swap(ResponseGetRewardCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseGetRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGetRewardCommand_descriptor_;
  metadata.reflection = ResponseGetRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeadInfo::kVersionFieldNumber;
const int HeadInfo::kDatetimeFieldNumber;
const int HeadInfo::kSessionFieldNumber;
const int HeadInfo::kGameVersionFieldNumber;
#endif  // !_MSC_VER

HeadInfo::HeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeadInfo::InitAsDefaultInstance() {
}

HeadInfo::HeadInfo(const HeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeadInfo::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  datetime_ = GOOGLE_LONGLONG(0);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameversion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeadInfo::~HeadInfo() {
  SharedDtor();
}

void HeadInfo::SharedDtor() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void HeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeadInfo_descriptor_;
}

const HeadInfo& HeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

HeadInfo* HeadInfo::default_instance_ = NULL;

HeadInfo* HeadInfo::New() const {
  return new HeadInfo;
}

void HeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    datetime_ = GOOGLE_LONGLONG(0);
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    gameversion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_datetime;
        break;
      }
      
      // required int64 datetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datetime_)));
          set_has_datetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_session;
        break;
      }
      
      // required string session = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameVersion;
        break;
      }
      
      // required int32 gameVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameversion_)));
          set_has_gameversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required int64 datetime = 2;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->datetime(), output);
  }
  
  // required string session = 4;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->session(), output);
  }
  
  // required int32 gameVersion = 5;
  if (has_gameversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required int64 datetime = 2;
  if (has_datetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->datetime(), target);
  }
  
  // required string session = 4;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->session(), target);
  }
  
  // required int32 gameVersion = 5;
  if (has_gameversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeadInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required int64 datetime = 2;
    if (has_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datetime());
    }
    
    // required string session = 4;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // required int32 gameVersion = 5;
    if (has_gameversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameversion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeadInfo::MergeFrom(const HeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_gameversion()) {
      set_gameversion(from.gameversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadInfo::CopyFrom(const HeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void HeadInfo::Swap(HeadInfo* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(datetime_, other->datetime_);
    std::swap(session_, other->session_);
    std::swap(gameversion_, other->gameversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeadInfo_descriptor_;
  metadata.reflection = HeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRaceStartCommand::kModeIdFieldNumber;
const int RequestRaceStartCommand::kGameModeFieldNumber;
const int RequestRaceStartCommand::kRaceTypeFieldNumber;
const int RequestRaceStartCommand::kTournamentOnlineIdFieldNumber;
const int RequestRaceStartCommand::kCarModTypeFieldNumber;
const int RequestRaceStartCommand::kCarModSlotIDFieldNumber;
const int RequestRaceStartCommand::kCarIdFieldNumber;
#endif  // !_MSC_VER

RequestRaceStartCommand::RequestRaceStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRaceStartCommand::InitAsDefaultInstance() {
}

RequestRaceStartCommand::RequestRaceStartCommand(const RequestRaceStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRaceStartCommand::SharedCtor() {
  _cached_size_ = 0;
  modeid_ = 0;
  gamemode_ = 0;
  racetype_ = 0;
  tournamentonlineid_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRaceStartCommand::~RequestRaceStartCommand() {
  SharedDtor();
}

void RequestRaceStartCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestRaceStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRaceStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRaceStartCommand_descriptor_;
}

const RequestRaceStartCommand& RequestRaceStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestRaceStartCommand* RequestRaceStartCommand::default_instance_ = NULL;

RequestRaceStartCommand* RequestRaceStartCommand::New() const {
  return new RequestRaceStartCommand;
}

void RequestRaceStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modeid_ = 0;
    gamemode_ = 0;
    racetype_ = 0;
    tournamentonlineid_ = 0;
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
  }
  carmodtype_.Clear();
  carmodslotid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRaceStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameMode;
        break;
      }
      
      // required int32 gameMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamemode_)));
          set_has_gamemode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raceType;
        break;
      }
      
      // optional int32 raceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &racetype_)));
          set_has_racetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tournamentOnlineId;
        break;
      }
      
      // optional int32 tournamentOnlineId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentOnlineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_carModType;
        break;
      }
      
      // repeated int32 carModType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_carmodtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_carModType;
        if (input->ExpectTag(48)) goto parse_carModSlotID;
        break;
      }
      
      // repeated int32 carModSlotID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModSlotID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_carmodslotid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodslotid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_carModSlotID;
        if (input->ExpectTag(58)) goto parse_carId;
        break;
      }
      
      // optional string carId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRaceStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modeid(), output);
  }
  
  // required int32 gameMode = 2;
  if (has_gamemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gamemode(), output);
  }
  
  // optional int32 raceType = 3;
  if (has_racetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->racetype(), output);
  }
  
  // optional int32 tournamentOnlineId = 4;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tournamentonlineid(), output);
  }
  
  // repeated int32 carModType = 5;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->carmodtype(i), output);
  }
  
  // repeated int32 carModSlotID = 6;
  for (int i = 0; i < this->carmodslotid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->carmodslotid(i), output);
  }
  
  // optional string carId = 7;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->carid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRaceStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modeid(), target);
  }
  
  // required int32 gameMode = 2;
  if (has_gamemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gamemode(), target);
  }
  
  // optional int32 raceType = 3;
  if (has_racetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->racetype(), target);
  }
  
  // optional int32 tournamentOnlineId = 4;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tournamentonlineid(), target);
  }
  
  // repeated int32 carModType = 5;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->carmodtype(i), target);
  }
  
  // repeated int32 carModSlotID = 6;
  for (int i = 0; i < this->carmodslotid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->carmodslotid(i), target);
  }
  
  // optional string carId = 7;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->carid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRaceStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modeId = 1;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required int32 gameMode = 2;
    if (has_gamemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamemode());
    }
    
    // optional int32 raceType = 3;
    if (has_racetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->racetype());
    }
    
    // optional int32 tournamentOnlineId = 4;
    if (has_tournamentonlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
    // optional string carId = 7;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
  }
  // repeated int32 carModType = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodtype(i));
    }
    total_size += 1 * this->carmodtype_size() + data_size;
  }
  
  // repeated int32 carModSlotID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodslotid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodslotid(i));
    }
    total_size += 1 * this->carmodslotid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRaceStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRaceStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRaceStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRaceStartCommand::MergeFrom(const RequestRaceStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  carmodtype_.MergeFrom(from.carmodtype_);
  carmodslotid_.MergeFrom(from.carmodslotid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_gamemode()) {
      set_gamemode(from.gamemode());
    }
    if (from.has_racetype()) {
      set_racetype(from.racetype());
    }
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRaceStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRaceStartCommand::CopyFrom(const RequestRaceStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRaceStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestRaceStartCommand::Swap(RequestRaceStartCommand* other) {
  if (other != this) {
    std::swap(modeid_, other->modeid_);
    std::swap(gamemode_, other->gamemode_);
    std::swap(racetype_, other->racetype_);
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    carmodtype_.Swap(&other->carmodtype_);
    carmodslotid_.Swap(&other->carmodslotid_);
    std::swap(carid_, other->carid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRaceStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRaceStartCommand_descriptor_;
  metadata.reflection = RequestRaceStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRaceStartCommand::kApprovedFieldNumber;
const int ResponseRaceStartCommand::kStaminaFieldNumber;
const int ResponseRaceStartCommand::kStatusFieldNumber;
const int ResponseRaceStartCommand::kHintFieldNumber;
const int ResponseRaceStartCommand::kSamplePeriodFieldNumber;
#endif  // !_MSC_VER

ResponseRaceStartCommand::ResponseRaceStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRaceStartCommand::InitAsDefaultInstance() {
}

ResponseRaceStartCommand::ResponseRaceStartCommand(const ResponseRaceStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRaceStartCommand::SharedCtor() {
  _cached_size_ = 0;
  approved_ = false;
  stamina_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  hint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sampleperiod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRaceStartCommand::~ResponseRaceStartCommand() {
  SharedDtor();
}

void ResponseRaceStartCommand::SharedDtor() {
  if (hint_ != &::google::protobuf::internal::kEmptyString) {
    delete hint_;
  }
  if (this != default_instance_) {
  }
}

void ResponseRaceStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRaceStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRaceStartCommand_descriptor_;
}

const ResponseRaceStartCommand& ResponseRaceStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseRaceStartCommand* ResponseRaceStartCommand::default_instance_ = NULL;

ResponseRaceStartCommand* ResponseRaceStartCommand::New() const {
  return new ResponseRaceStartCommand;
}

void ResponseRaceStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    approved_ = false;
    stamina_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_hint()) {
      if (hint_ != &::google::protobuf::internal::kEmptyString) {
        hint_->clear();
      }
    }
    sampleperiod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRaceStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool approved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approved_)));
          set_has_approved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stamina;
        break;
      }
      
      // optional int64 stamina = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hint;
        break;
      }
      
      // optional string hint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hint().data(), this->hint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_samplePeriod;
        break;
      }
      
      // optional int32 samplePeriod = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_samplePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampleperiod_)));
          set_has_sampleperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRaceStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool approved = 1;
  if (has_approved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->approved(), output);
  }
  
  // optional int64 stamina = 2;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stamina(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // optional string hint = 4;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hint(), output);
  }
  
  // optional int32 samplePeriod = 5;
  if (has_sampleperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sampleperiod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRaceStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool approved = 1;
  if (has_approved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->approved(), target);
  }
  
  // optional int64 stamina = 2;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stamina(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // optional string hint = 4;
  if (has_hint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hint().data(), this->hint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hint(), target);
  }
  
  // optional int32 samplePeriod = 5;
  if (has_sampleperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sampleperiod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRaceStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool approved = 1;
    if (has_approved()) {
      total_size += 1 + 1;
    }
    
    // optional int64 stamina = 2;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stamina());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional string hint = 4;
    if (has_hint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hint());
    }
    
    // optional int32 samplePeriod = 5;
    if (has_sampleperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sampleperiod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRaceStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRaceStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRaceStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRaceStartCommand::MergeFrom(const ResponseRaceStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_approved()) {
      set_approved(from.approved());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_hint()) {
      set_hint(from.hint());
    }
    if (from.has_sampleperiod()) {
      set_sampleperiod(from.sampleperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRaceStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRaceStartCommand::CopyFrom(const ResponseRaceStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRaceStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseRaceStartCommand::Swap(ResponseRaceStartCommand* other) {
  if (other != this) {
    std::swap(approved_, other->approved_);
    std::swap(stamina_, other->stamina_);
    std::swap(status_, other->status_);
    std::swap(hint_, other->hint_);
    std::swap(sampleperiod_, other->sampleperiod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRaceStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRaceStartCommand_descriptor_;
  metadata.reflection = ResponseRaceStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentRaceStartCommand::kTrackNameFieldNumber;
const int ResponseTournamentRaceStartCommand::kRewardFieldNumber;
const int ResponseTournamentRaceStartCommand::kDetailRewardFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentRaceStartCommand::ResponseTournamentRaceStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentRaceStartCommand::InitAsDefaultInstance() {
}

ResponseTournamentRaceStartCommand::ResponseTournamentRaceStartCommand(const ResponseTournamentRaceStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentRaceStartCommand::SharedCtor() {
  _cached_size_ = 0;
  trackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentRaceStartCommand::~ResponseTournamentRaceStartCommand() {
  SharedDtor();
}

void ResponseTournamentRaceStartCommand::SharedDtor() {
  if (trackname_ != &::google::protobuf::internal::kEmptyString) {
    delete trackname_;
  }
  if (this != default_instance_) {
  }
}

void ResponseTournamentRaceStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentRaceStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentRaceStartCommand_descriptor_;
}

const ResponseTournamentRaceStartCommand& ResponseTournamentRaceStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentRaceStartCommand* ResponseTournamentRaceStartCommand::default_instance_ = NULL;

ResponseTournamentRaceStartCommand* ResponseTournamentRaceStartCommand::New() const {
  return new ResponseTournamentRaceStartCommand;
}

void ResponseTournamentRaceStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trackname()) {
      if (trackname_ != &::google::protobuf::internal::kEmptyString) {
        trackname_->clear();
      }
    }
  }
  reward_.Clear();
  detailreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentRaceStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trackName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackname().data(), this->trackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(26)) goto parse_detailReward;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detailReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentRaceStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string trackName = 1;
  if (has_trackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackname().data(), this->trackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trackname(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 3;
  for (int i = 0; i < this->detailreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detailreward(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentRaceStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string trackName = 1;
  if (has_trackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackname().data(), this->trackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trackname(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 3;
  for (int i = 0; i < this->detailreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detailreward(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentRaceStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string trackName = 1;
    if (has_trackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackname());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.TournamentDetailRewardMessage detailReward = 3;
  total_size += 1 * this->detailreward_size();
  for (int i = 0; i < this->detailreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailreward(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentRaceStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentRaceStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentRaceStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentRaceStartCommand::MergeFrom(const ResponseTournamentRaceStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  detailreward_.MergeFrom(from.detailreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trackname()) {
      set_trackname(from.trackname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentRaceStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentRaceStartCommand::CopyFrom(const ResponseTournamentRaceStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentRaceStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < detailreward_size(); i++) {
    if (!this->detailreward(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseTournamentRaceStartCommand::Swap(ResponseTournamentRaceStartCommand* other) {
  if (other != this) {
    std::swap(trackname_, other->trackname_);
    reward_.Swap(&other->reward_);
    detailreward_.Swap(&other->detailreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentRaceStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentRaceStartCommand_descriptor_;
  metadata.reflection = ResponseTournamentRaceStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kTypeFieldNumber;
const int AccountInfo::kNameFieldNumber;
const int AccountInfo::kHeadUrlFieldNumber;
const int AccountInfo::kIsExpiredFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isexpired_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    isexpired_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isExpired;
        break;
      }
      
      // optional bool isExpired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExpired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isexpired_)));
          set_has_isexpired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string headUrl = 3;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headurl(), output);
  }
  
  // optional bool isExpired = 4;
  if (has_isexpired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isexpired(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string headUrl = 3;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headurl(), target);
  }
  
  // optional bool isExpired = 4;
  if (has_isexpired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isexpired(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string headUrl = 3;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // optional bool isExpired = 4;
    if (has_isexpired()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_isexpired()) {
      set_isexpired(from.isexpired());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(headurl_, other->headurl_);
    std::swap(isexpired_, other->isexpired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBindingStartCommand::kTokenFieldNumber;
#endif  // !_MSC_VER

RequestBindingStartCommand::RequestBindingStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBindingStartCommand::InitAsDefaultInstance() {
}

RequestBindingStartCommand::RequestBindingStartCommand(const RequestBindingStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBindingStartCommand::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBindingStartCommand::~RequestBindingStartCommand() {
  SharedDtor();
}

void RequestBindingStartCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RequestBindingStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBindingStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBindingStartCommand_descriptor_;
}

const RequestBindingStartCommand& RequestBindingStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBindingStartCommand* RequestBindingStartCommand::default_instance_ = NULL;

RequestBindingStartCommand* RequestBindingStartCommand::New() const {
  return new RequestBindingStartCommand;
}

void RequestBindingStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBindingStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBindingStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBindingStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBindingStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBindingStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBindingStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBindingStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBindingStartCommand::MergeFrom(const RequestBindingStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBindingStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBindingStartCommand::CopyFrom(const RequestBindingStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBindingStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestBindingStartCommand::Swap(RequestBindingStartCommand* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBindingStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBindingStartCommand_descriptor_;
  metadata.reflection = RequestBindingStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBindingStartCommand::kAuthUrlFieldNumber;
const int ResponseBindingStartCommand::kCloseUrlFieldNumber;
#endif  // !_MSC_VER

ResponseBindingStartCommand::ResponseBindingStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBindingStartCommand::InitAsDefaultInstance() {
}

ResponseBindingStartCommand::ResponseBindingStartCommand(const ResponseBindingStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBindingStartCommand::SharedCtor() {
  _cached_size_ = 0;
  authurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  closeurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBindingStartCommand::~ResponseBindingStartCommand() {
  SharedDtor();
}

void ResponseBindingStartCommand::SharedDtor() {
  if (authurl_ != &::google::protobuf::internal::kEmptyString) {
    delete authurl_;
  }
  if (closeurl_ != &::google::protobuf::internal::kEmptyString) {
    delete closeurl_;
  }
  if (this != default_instance_) {
  }
}

void ResponseBindingStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBindingStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBindingStartCommand_descriptor_;
}

const ResponseBindingStartCommand& ResponseBindingStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBindingStartCommand* ResponseBindingStartCommand::default_instance_ = NULL;

ResponseBindingStartCommand* ResponseBindingStartCommand::New() const {
  return new ResponseBindingStartCommand;
}

void ResponseBindingStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_authurl()) {
      if (authurl_ != &::google::protobuf::internal::kEmptyString) {
        authurl_->clear();
      }
    }
    if (has_closeurl()) {
      if (closeurl_ != &::google::protobuf::internal::kEmptyString) {
        closeurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBindingStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string authUrl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authurl().data(), this->authurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_closeUrl;
        break;
      }
      
      // optional string closeUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closeUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_closeurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->closeurl().data(), this->closeurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBindingStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string authUrl = 1;
  if (has_authurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authurl().data(), this->authurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->authurl(), output);
  }
  
  // optional string closeUrl = 2;
  if (has_closeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeurl().data(), this->closeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->closeurl(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBindingStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string authUrl = 1;
  if (has_authurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authurl().data(), this->authurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->authurl(), target);
  }
  
  // optional string closeUrl = 2;
  if (has_closeurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->closeurl().data(), this->closeurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->closeurl(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBindingStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string authUrl = 1;
    if (has_authurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authurl());
    }
    
    // optional string closeUrl = 2;
    if (has_closeurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->closeurl());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBindingStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBindingStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBindingStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBindingStartCommand::MergeFrom(const ResponseBindingStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authurl()) {
      set_authurl(from.authurl());
    }
    if (from.has_closeurl()) {
      set_closeurl(from.closeurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBindingStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBindingStartCommand::CopyFrom(const ResponseBindingStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBindingStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseBindingStartCommand::Swap(ResponseBindingStartCommand* other) {
  if (other != this) {
    std::swap(authurl_, other->authurl_);
    std::swap(closeurl_, other->closeurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBindingStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBindingStartCommand_descriptor_;
  metadata.reflection = ResponseBindingStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBindingTokenCommand::kIsOverrideFieldNumber;
const int RequestBindingTokenCommand::kTokenFieldNumber;
const int RequestBindingTokenCommand::kAccessTokenFieldNumber;
const int RequestBindingTokenCommand::kUidFieldNumber;
const int RequestBindingTokenCommand::kNicknameFieldNumber;
#endif  // !_MSC_VER

RequestBindingTokenCommand::RequestBindingTokenCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBindingTokenCommand::InitAsDefaultInstance() {
}

RequestBindingTokenCommand::RequestBindingTokenCommand(const RequestBindingTokenCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBindingTokenCommand::SharedCtor() {
  _cached_size_ = 0;
  isoverride_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBindingTokenCommand::~RequestBindingTokenCommand() {
  SharedDtor();
}

void RequestBindingTokenCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void RequestBindingTokenCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBindingTokenCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBindingTokenCommand_descriptor_;
}

const RequestBindingTokenCommand& RequestBindingTokenCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBindingTokenCommand* RequestBindingTokenCommand::default_instance_ = NULL;

RequestBindingTokenCommand* RequestBindingTokenCommand::New() const {
  return new RequestBindingTokenCommand;
}

void RequestBindingTokenCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isoverride_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBindingTokenCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isOverride = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isoverride_)));
          set_has_isoverride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_access_token;
        break;
      }
      
      // required string access_token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uid;
        break;
      }
      
      // required string uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }
      
      // optional string nickname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBindingTokenCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isOverride = 1;
  if (has_isoverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isoverride(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  // required string access_token = 3;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->access_token(), output);
  }
  
  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uid(), output);
  }
  
  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nickname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBindingTokenCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isOverride = 1;
  if (has_isoverride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isoverride(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  // required string access_token = 3;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->access_token(), target);
  }
  
  // required string uid = 4;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uid(), target);
  }
  
  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBindingTokenCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isOverride = 1;
    if (has_isoverride()) {
      total_size += 1 + 1;
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // required string access_token = 3;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }
    
    // required string uid = 4;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBindingTokenCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBindingTokenCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBindingTokenCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBindingTokenCommand::MergeFrom(const RequestBindingTokenCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isoverride()) {
      set_isoverride(from.isoverride());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBindingTokenCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBindingTokenCommand::CopyFrom(const RequestBindingTokenCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBindingTokenCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RequestBindingTokenCommand::Swap(RequestBindingTokenCommand* other) {
  if (other != this) {
    std::swap(isoverride_, other->isoverride_);
    std::swap(token_, other->token_);
    std::swap(access_token_, other->access_token_);
    std::swap(uid_, other->uid_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBindingTokenCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBindingTokenCommand_descriptor_;
  metadata.reflection = RequestBindingTokenCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBindingTokenCommand::kTokenFieldNumber;
#endif  // !_MSC_VER

ResponseBindingTokenCommand::ResponseBindingTokenCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBindingTokenCommand::InitAsDefaultInstance() {
}

ResponseBindingTokenCommand::ResponseBindingTokenCommand(const ResponseBindingTokenCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBindingTokenCommand::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBindingTokenCommand::~ResponseBindingTokenCommand() {
  SharedDtor();
}

void ResponseBindingTokenCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ResponseBindingTokenCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBindingTokenCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBindingTokenCommand_descriptor_;
}

const ResponseBindingTokenCommand& ResponseBindingTokenCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBindingTokenCommand* ResponseBindingTokenCommand::default_instance_ = NULL;

ResponseBindingTokenCommand* ResponseBindingTokenCommand::New() const {
  return new ResponseBindingTokenCommand;
}

void ResponseBindingTokenCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBindingTokenCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBindingTokenCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBindingTokenCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBindingTokenCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBindingTokenCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBindingTokenCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBindingTokenCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBindingTokenCommand::MergeFrom(const ResponseBindingTokenCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBindingTokenCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBindingTokenCommand::CopyFrom(const ResponseBindingTokenCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBindingTokenCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseBindingTokenCommand::Swap(ResponseBindingTokenCommand* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBindingTokenCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBindingTokenCommand_descriptor_;
  metadata.reflection = ResponseBindingTokenCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBindingInfoCommand::kAccessTokenFieldNumber;
const int RequestBindingInfoCommand::kUidFieldNumber;
#endif  // !_MSC_VER

RequestBindingInfoCommand::RequestBindingInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBindingInfoCommand::InitAsDefaultInstance() {
}

RequestBindingInfoCommand::RequestBindingInfoCommand(const RequestBindingInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBindingInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBindingInfoCommand::~RequestBindingInfoCommand() {
  SharedDtor();
}

void RequestBindingInfoCommand::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RequestBindingInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBindingInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBindingInfoCommand_descriptor_;
}

const RequestBindingInfoCommand& RequestBindingInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBindingInfoCommand* RequestBindingInfoCommand::default_instance_ = NULL;

RequestBindingInfoCommand* RequestBindingInfoCommand::New() const {
  return new RequestBindingInfoCommand;
}

void RequestBindingInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBindingInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string access_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid;
        break;
      }
      
      // required string uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBindingInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->access_token(), output);
  }
  
  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBindingInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }
  
  // required string uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBindingInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }
    
    // required string uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBindingInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBindingInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBindingInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBindingInfoCommand::MergeFrom(const RequestBindingInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBindingInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBindingInfoCommand::CopyFrom(const RequestBindingInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBindingInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestBindingInfoCommand::Swap(RequestBindingInfoCommand* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBindingInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBindingInfoCommand_descriptor_;
  metadata.reflection = RequestBindingInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBindingInfoCommand::kIsBindingFieldNumber;
const int ResponseBindingInfoCommand::kBindingConfirmCommandFieldNumber;
const int ResponseBindingInfoCommand::kUserInfoFieldNumber;
#endif  // !_MSC_VER

ResponseBindingInfoCommand::ResponseBindingInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBindingInfoCommand::InitAsDefaultInstance() {
  bindingconfirmcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::default_instance());
  userinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::UserInfo*>(&::com::ea::eamobile::nfsmw::protoc::UserInfo::default_instance());
}

ResponseBindingInfoCommand::ResponseBindingInfoCommand(const ResponseBindingInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBindingInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  isbinding_ = false;
  bindingconfirmcommand_ = NULL;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBindingInfoCommand::~ResponseBindingInfoCommand() {
  SharedDtor();
}

void ResponseBindingInfoCommand::SharedDtor() {
  if (this != default_instance_) {
    delete bindingconfirmcommand_;
    delete userinfo_;
  }
}

void ResponseBindingInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBindingInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBindingInfoCommand_descriptor_;
}

const ResponseBindingInfoCommand& ResponseBindingInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBindingInfoCommand* ResponseBindingInfoCommand::default_instance_ = NULL;

ResponseBindingInfoCommand* ResponseBindingInfoCommand::New() const {
  return new ResponseBindingInfoCommand;
}

void ResponseBindingInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isbinding_ = false;
    if (has_bindingconfirmcommand()) {
      if (bindingconfirmcommand_ != NULL) bindingconfirmcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::com::ea::eamobile::nfsmw::protoc::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBindingInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isBinding = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbinding_)));
          set_has_isbinding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bindingConfirmCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingConfirmCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingconfirmcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBindingInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isBinding = 1;
  if (has_isbinding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isbinding(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
  if (has_bindingconfirmcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bindingconfirmcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBindingInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isBinding = 1;
  if (has_isbinding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isbinding(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
  if (has_bindingconfirmcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bindingconfirmcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBindingInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isBinding = 1;
    if (has_isbinding()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
    if (has_bindingconfirmcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingconfirmcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBindingInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBindingInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBindingInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBindingInfoCommand::MergeFrom(const ResponseBindingInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isbinding()) {
      set_isbinding(from.isbinding());
    }
    if (from.has_bindingconfirmcommand()) {
      mutable_bindingconfirmcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::MergeFrom(from.bindingconfirmcommand());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::com::ea::eamobile::nfsmw::protoc::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBindingInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBindingInfoCommand::CopyFrom(const ResponseBindingInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBindingInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_bindingconfirmcommand()) {
    if (!this->bindingconfirmcommand().IsInitialized()) return false;
  }
  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseBindingInfoCommand::Swap(ResponseBindingInfoCommand* other) {
  if (other != this) {
    std::swap(isbinding_, other->isbinding_);
    std::swap(bindingconfirmcommand_, other->bindingconfirmcommand_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBindingInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBindingInfoCommand_descriptor_;
  metadata.reflection = ResponseBindingInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBindingResultCommand::kTokenFieldNumber;
#endif  // !_MSC_VER

RequestBindingResultCommand::RequestBindingResultCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBindingResultCommand::InitAsDefaultInstance() {
}

RequestBindingResultCommand::RequestBindingResultCommand(const RequestBindingResultCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBindingResultCommand::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBindingResultCommand::~RequestBindingResultCommand() {
  SharedDtor();
}

void RequestBindingResultCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RequestBindingResultCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBindingResultCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBindingResultCommand_descriptor_;
}

const RequestBindingResultCommand& RequestBindingResultCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBindingResultCommand* RequestBindingResultCommand::default_instance_ = NULL;

RequestBindingResultCommand* RequestBindingResultCommand::New() const {
  return new RequestBindingResultCommand;
}

void RequestBindingResultCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBindingResultCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBindingResultCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBindingResultCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBindingResultCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBindingResultCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBindingResultCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBindingResultCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBindingResultCommand::MergeFrom(const RequestBindingResultCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBindingResultCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBindingResultCommand::CopyFrom(const RequestBindingResultCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBindingResultCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestBindingResultCommand::Swap(RequestBindingResultCommand* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBindingResultCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBindingResultCommand_descriptor_;
  metadata.reflection = RequestBindingResultCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBindingResultCommand::kIsBindingFieldNumber;
const int ResponseBindingResultCommand::kBindingConfirmCommandFieldNumber;
const int ResponseBindingResultCommand::kUserInfoFieldNumber;
#endif  // !_MSC_VER

ResponseBindingResultCommand::ResponseBindingResultCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBindingResultCommand::InitAsDefaultInstance() {
  bindingconfirmcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::default_instance());
  userinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::UserInfo*>(&::com::ea::eamobile::nfsmw::protoc::UserInfo::default_instance());
}

ResponseBindingResultCommand::ResponseBindingResultCommand(const ResponseBindingResultCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBindingResultCommand::SharedCtor() {
  _cached_size_ = 0;
  isbinding_ = false;
  bindingconfirmcommand_ = NULL;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBindingResultCommand::~ResponseBindingResultCommand() {
  SharedDtor();
}

void ResponseBindingResultCommand::SharedDtor() {
  if (this != default_instance_) {
    delete bindingconfirmcommand_;
    delete userinfo_;
  }
}

void ResponseBindingResultCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBindingResultCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBindingResultCommand_descriptor_;
}

const ResponseBindingResultCommand& ResponseBindingResultCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBindingResultCommand* ResponseBindingResultCommand::default_instance_ = NULL;

ResponseBindingResultCommand* ResponseBindingResultCommand::New() const {
  return new ResponseBindingResultCommand;
}

void ResponseBindingResultCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isbinding_ = false;
    if (has_bindingconfirmcommand()) {
      if (bindingconfirmcommand_ != NULL) bindingconfirmcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::com::ea::eamobile::nfsmw::protoc::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBindingResultCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isBinding = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbinding_)));
          set_has_isbinding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bindingConfirmCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingConfirmCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingconfirmcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBindingResultCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isBinding = 1;
  if (has_isbinding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isbinding(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
  if (has_bindingconfirmcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bindingconfirmcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBindingResultCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isBinding = 1;
  if (has_isbinding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isbinding(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
  if (has_bindingconfirmcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bindingconfirmcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBindingResultCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isBinding = 1;
    if (has_isbinding()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 3;
    if (has_bindingconfirmcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingconfirmcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.UserInfo userInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBindingResultCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBindingResultCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBindingResultCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBindingResultCommand::MergeFrom(const ResponseBindingResultCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isbinding()) {
      set_isbinding(from.isbinding());
    }
    if (from.has_bindingconfirmcommand()) {
      mutable_bindingconfirmcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::MergeFrom(from.bindingconfirmcommand());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::com::ea::eamobile::nfsmw::protoc::UserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBindingResultCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBindingResultCommand::CopyFrom(const ResponseBindingResultCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBindingResultCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_bindingconfirmcommand()) {
    if (!this->bindingconfirmcommand().IsInitialized()) return false;
  }
  if (has_userinfo()) {
    if (!this->userinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseBindingResultCommand::Swap(ResponseBindingResultCommand* other) {
  if (other != this) {
    std::swap(isbinding_, other->isbinding_);
    std::swap(bindingconfirmcommand_, other->bindingconfirmcommand_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBindingResultCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBindingResultCommand_descriptor_;
  metadata.reflection = ResponseBindingResultCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBindingConfirmCommand::kIsOverrideFieldNumber;
const int RequestBindingConfirmCommand::kTokenFieldNumber;
#endif  // !_MSC_VER

RequestBindingConfirmCommand::RequestBindingConfirmCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBindingConfirmCommand::InitAsDefaultInstance() {
}

RequestBindingConfirmCommand::RequestBindingConfirmCommand(const RequestBindingConfirmCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBindingConfirmCommand::SharedCtor() {
  _cached_size_ = 0;
  isoverride_ = false;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBindingConfirmCommand::~RequestBindingConfirmCommand() {
  SharedDtor();
}

void RequestBindingConfirmCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void RequestBindingConfirmCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBindingConfirmCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBindingConfirmCommand_descriptor_;
}

const RequestBindingConfirmCommand& RequestBindingConfirmCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBindingConfirmCommand* RequestBindingConfirmCommand::default_instance_ = NULL;

RequestBindingConfirmCommand* RequestBindingConfirmCommand::New() const {
  return new RequestBindingConfirmCommand;
}

void RequestBindingConfirmCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isoverride_ = false;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBindingConfirmCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isOverride = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isoverride_)));
          set_has_isoverride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }
      
      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBindingConfirmCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isOverride = 1;
  if (has_isoverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isoverride(), output);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBindingConfirmCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isOverride = 1;
  if (has_isoverride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isoverride(), target);
  }
  
  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBindingConfirmCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isOverride = 1;
    if (has_isoverride()) {
      total_size += 1 + 1;
    }
    
    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBindingConfirmCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBindingConfirmCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBindingConfirmCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBindingConfirmCommand::MergeFrom(const RequestBindingConfirmCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isoverride()) {
      set_isoverride(from.isoverride());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBindingConfirmCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBindingConfirmCommand::CopyFrom(const RequestBindingConfirmCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBindingConfirmCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestBindingConfirmCommand::Swap(RequestBindingConfirmCommand* other) {
  if (other != this) {
    std::swap(isoverride_, other->isoverride_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBindingConfirmCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBindingConfirmCommand_descriptor_;
  metadata.reflection = RequestBindingConfirmCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBindingConfirmCommand::kTokenFieldNumber;
#endif  // !_MSC_VER

ResponseBindingConfirmCommand::ResponseBindingConfirmCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBindingConfirmCommand::InitAsDefaultInstance() {
}

ResponseBindingConfirmCommand::ResponseBindingConfirmCommand(const ResponseBindingConfirmCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBindingConfirmCommand::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBindingConfirmCommand::~ResponseBindingConfirmCommand() {
  SharedDtor();
}

void ResponseBindingConfirmCommand::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ResponseBindingConfirmCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBindingConfirmCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBindingConfirmCommand_descriptor_;
}

const ResponseBindingConfirmCommand& ResponseBindingConfirmCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBindingConfirmCommand* ResponseBindingConfirmCommand::default_instance_ = NULL;

ResponseBindingConfirmCommand* ResponseBindingConfirmCommand::New() const {
  return new ResponseBindingConfirmCommand;
}

void ResponseBindingConfirmCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBindingConfirmCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBindingConfirmCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBindingConfirmCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBindingConfirmCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBindingConfirmCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBindingConfirmCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBindingConfirmCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBindingConfirmCommand::MergeFrom(const ResponseBindingConfirmCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBindingConfirmCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBindingConfirmCommand::CopyFrom(const ResponseBindingConfirmCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBindingConfirmCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseBindingConfirmCommand::Swap(ResponseBindingConfirmCommand* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBindingConfirmCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBindingConfirmCommand_descriptor_;
  metadata.reflection = ResponseBindingConfirmCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBindingPopupCommand::kIsPopupFieldNumber;
#endif  // !_MSC_VER

ResponseBindingPopupCommand::ResponseBindingPopupCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBindingPopupCommand::InitAsDefaultInstance() {
}

ResponseBindingPopupCommand::ResponseBindingPopupCommand(const ResponseBindingPopupCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBindingPopupCommand::SharedCtor() {
  _cached_size_ = 0;
  ispopup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBindingPopupCommand::~ResponseBindingPopupCommand() {
  SharedDtor();
}

void ResponseBindingPopupCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseBindingPopupCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBindingPopupCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBindingPopupCommand_descriptor_;
}

const ResponseBindingPopupCommand& ResponseBindingPopupCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBindingPopupCommand* ResponseBindingPopupCommand::default_instance_ = NULL;

ResponseBindingPopupCommand* ResponseBindingPopupCommand::New() const {
  return new ResponseBindingPopupCommand;
}

void ResponseBindingPopupCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ispopup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBindingPopupCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isPopup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispopup_)));
          set_has_ispopup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBindingPopupCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isPopup = 1;
  if (has_ispopup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ispopup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBindingPopupCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isPopup = 1;
  if (has_ispopup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ispopup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBindingPopupCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isPopup = 1;
    if (has_ispopup()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBindingPopupCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBindingPopupCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBindingPopupCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBindingPopupCommand::MergeFrom(const ResponseBindingPopupCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ispopup()) {
      set_ispopup(from.ispopup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBindingPopupCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBindingPopupCommand::CopyFrom(const ResponseBindingPopupCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBindingPopupCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseBindingPopupCommand::Swap(ResponseBindingPopupCommand* other) {
  if (other != this) {
    std::swap(ispopup_, other->ispopup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBindingPopupCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBindingPopupCommand_descriptor_;
  metadata.reflection = ResponseBindingPopupCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorCommand::kCodeFieldNumber;
const int ErrorCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ErrorCommand::ErrorCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorCommand::InitAsDefaultInstance() {
}

ErrorCommand::ErrorCommand(const ErrorCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorCommand::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorCommand::~ErrorCommand() {
  SharedDtor();
}

void ErrorCommand::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ErrorCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCommand_descriptor_;
}

const ErrorCommand& ErrorCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ErrorCommand* ErrorCommand::default_instance_ = NULL;

ErrorCommand* ErrorCommand::New() const {
  return new ErrorCommand;
}

void ErrorCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorCommand::MergeFrom(const ErrorCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorCommand::CopyFrom(const ErrorCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ErrorCommand::Swap(ErrorCommand* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorCommand_descriptor_;
  metadata.reflection = ErrorCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarData::kCarIdFieldNumber;
const int CarData::kTypeFieldNumber;
const int CarData::kTierFieldNumber;
const int CarData::kScoreFieldNumber;
const int CarData::kStatusFieldNumber;
const int CarData::kSlotsFieldNumber;
const int CarData::kPriceTypeFieldNumber;
const int CarData::kPriceFieldNumber;
const int CarData::kUnlockMWLevelFieldNumber;
const int CarData::kChartletIdFieldNumber;
const int CarData::kIsLockFieldNumber;
const int CarData::kRemainTimeFieldNumber;
const int CarData::kChartletInfosFieldNumber;
const int CarData::kSellFlagFieldNumber;
const int CarData::kIsSpecialCarFieldNumber;
const int CarData::kFragmentNumberFieldNumber;
const int CarData::kGotchaExpenseFieldNumber;
const int CarData::kTotalFragmentNumberFieldNumber;
const int CarData::kRemainPriceTypeFieldNumber;
const int CarData::kRemainPriceFieldNumber;
const int CarData::kMaxlimitFieldNumber;
const int CarData::kLimitFieldNumber;
const int CarData::kStateFieldNumber;
#endif  // !_MSC_VER

CarData::CarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarData::InitAsDefaultInstance() {
}

CarData::CarData(const CarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarData::SharedCtor() {
  _cached_size_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  tier_ = 0;
  score_ = 0;
  status_ = 0;
  pricetype_ = 0;
  price_ = 0;
  unlockmwlevel_ = 0;
  chartletid_ = 0;
  islock_ = false;
  remaintime_ = GOOGLE_LONGLONG(0);
  sellflag_ = 0;
  isspecialcar_ = false;
  fragmentnumber_ = 0;
  totalfragmentnumber_ = 0;
  remainpricetype_ = 0;
  remainprice_ = 0;
  maxlimit_ = 0;
  limit_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarData::~CarData() {
  SharedDtor();
}

void CarData::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void CarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarData_descriptor_;
}

const CarData& CarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

CarData* CarData::default_instance_ = NULL;

CarData* CarData::New() const {
  return new CarData;
}

void CarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    type_ = 0;
    tier_ = 0;
    score_ = 0;
    status_ = 0;
    pricetype_ = 0;
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    unlockmwlevel_ = 0;
    chartletid_ = 0;
    islock_ = false;
    remaintime_ = GOOGLE_LONGLONG(0);
    sellflag_ = 0;
    isspecialcar_ = false;
    fragmentnumber_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    totalfragmentnumber_ = 0;
    remainpricetype_ = 0;
    remainprice_ = 0;
    maxlimit_ = 0;
    limit_ = 0;
    state_ = 0;
  }
  slots_.Clear();
  chartletinfos_.Clear();
  gotchaexpense_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string carId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tier;
        break;
      }
      
      // required int32 tier = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }
      
      // required int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }
      
      // required int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_slots;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.CarSlotInfo slots = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_slots;
        if (input->ExpectTag(56)) goto parse_priceType;
        break;
      }
      
      // required int32 priceType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_price;
        break;
      }
      
      // required int32 price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_unlockMWLevel;
        break;
      }
      
      // required int32 unlockMWLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlockMWLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlockmwlevel_)));
          set_has_unlockmwlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_chartletId;
        break;
      }
      
      // required int32 chartletId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chartletId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chartletid_)));
          set_has_chartletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isLock;
        break;
      }
      
      // optional bool isLock = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islock_)));
          set_has_islock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_remainTime;
        break;
      }
      
      // optional int64 remainTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_chartletInfos;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.ChartletInfo chartletInfos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chartletInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chartletinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_chartletInfos;
        if (input->ExpectTag(120)) goto parse_sellFlag;
        break;
      }
      
      // optional int32 sellFlag = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellflag_)));
          set_has_sellflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isSpecialCar;
        break;
      }
      
      // optional bool isSpecialCar = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSpecialCar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspecialcar_)));
          set_has_isspecialcar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fragmentNumber;
        break;
      }
      
      // optional int32 fragmentNumber = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragmentnumber_)));
          set_has_fragmentnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_gotchaExpense;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.GotchaExpense gotchaExpense = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gotchaExpense:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gotchaexpense()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_gotchaExpense;
        if (input->ExpectTag(152)) goto parse_totalFragmentNumber;
        break;
      }
      
      // optional int32 totalFragmentNumber = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalFragmentNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalfragmentnumber_)));
          set_has_totalfragmentnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_remainPriceType;
        break;
      }
      
      // optional int32 remainPriceType = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainPriceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainpricetype_)));
          set_has_remainpricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_remainPrice;
        break;
      }
      
      // optional int32 remainPrice = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainprice_)));
          set_has_remainprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_maxlimit;
        break;
      }
      
      // optional int32 maxlimit = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlimit_)));
          set_has_maxlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_state;
        break;
      }
      
      // optional int32 state = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->carid(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // required int32 tier = 3;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tier(), output);
  }
  
  // required int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }
  
  // required int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.CarSlotInfo slots = 6;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->slots(i), output);
  }
  
  // required int32 priceType = 7;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pricetype(), output);
  }
  
  // required int32 price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price(), output);
  }
  
  // required int32 unlockMWLevel = 9;
  if (has_unlockmwlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->unlockmwlevel(), output);
  }
  
  // required int32 chartletId = 10;
  if (has_chartletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->chartletid(), output);
  }
  
  // optional bool isLock = 11;
  if (has_islock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->islock(), output);
  }
  
  // optional int64 remainTime = 13;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->remaintime(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ChartletInfo chartletInfos = 14;
  for (int i = 0; i < this->chartletinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->chartletinfos(i), output);
  }
  
  // optional int32 sellFlag = 15;
  if (has_sellflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sellflag(), output);
  }
  
  // optional bool isSpecialCar = 16;
  if (has_isspecialcar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isspecialcar(), output);
  }
  
  // optional int32 fragmentNumber = 17;
  if (has_fragmentnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->fragmentnumber(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.GotchaExpense gotchaExpense = 18;
  for (int i = 0; i < this->gotchaexpense_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->gotchaexpense(i), output);
  }
  
  // optional int32 totalFragmentNumber = 19;
  if (has_totalfragmentnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->totalfragmentnumber(), output);
  }
  
  // optional int32 remainPriceType = 20;
  if (has_remainpricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->remainpricetype(), output);
  }
  
  // optional int32 remainPrice = 21;
  if (has_remainprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->remainprice(), output);
  }
  
  // optional int32 maxlimit = 22;
  if (has_maxlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->maxlimit(), output);
  }
  
  // optional int32 limit = 23;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->limit(), output);
  }
  
  // optional int32 state = 24;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->carid(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // required int32 tier = 3;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tier(), target);
  }
  
  // required int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }
  
  // required int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.CarSlotInfo slots = 6;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->slots(i), target);
  }
  
  // required int32 priceType = 7;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pricetype(), target);
  }
  
  // required int32 price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price(), target);
  }
  
  // required int32 unlockMWLevel = 9;
  if (has_unlockmwlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->unlockmwlevel(), target);
  }
  
  // required int32 chartletId = 10;
  if (has_chartletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->chartletid(), target);
  }
  
  // optional bool isLock = 11;
  if (has_islock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->islock(), target);
  }
  
  // optional int64 remainTime = 13;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->remaintime(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ChartletInfo chartletInfos = 14;
  for (int i = 0; i < this->chartletinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->chartletinfos(i), target);
  }
  
  // optional int32 sellFlag = 15;
  if (has_sellflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sellflag(), target);
  }
  
  // optional bool isSpecialCar = 16;
  if (has_isspecialcar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isspecialcar(), target);
  }
  
  // optional int32 fragmentNumber = 17;
  if (has_fragmentnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->fragmentnumber(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.GotchaExpense gotchaExpense = 18;
  for (int i = 0; i < this->gotchaexpense_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->gotchaexpense(i), target);
  }
  
  // optional int32 totalFragmentNumber = 19;
  if (has_totalfragmentnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->totalfragmentnumber(), target);
  }
  
  // optional int32 remainPriceType = 20;
  if (has_remainpricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->remainpricetype(), target);
  }
  
  // optional int32 remainPrice = 21;
  if (has_remainprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->remainprice(), target);
  }
  
  // optional int32 maxlimit = 22;
  if (has_maxlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->maxlimit(), target);
  }
  
  // optional int32 limit = 23;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->limit(), target);
  }
  
  // optional int32 state = 24;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string carId = 1;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 tier = 3;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }
    
    // required int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int32 priceType = 7;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }
    
    // required int32 price = 8;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 unlockMWLevel = 9;
    if (has_unlockmwlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlockmwlevel());
    }
    
    // required int32 chartletId = 10;
    if (has_chartletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chartletid());
    }
    
    // optional bool isLock = 11;
    if (has_islock()) {
      total_size += 1 + 1;
    }
    
    // optional int64 remainTime = 13;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remaintime());
    }
    
    // optional int32 sellFlag = 15;
    if (has_sellflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellflag());
    }
    
    // optional bool isSpecialCar = 16;
    if (has_isspecialcar()) {
      total_size += 2 + 1;
    }
    
    // optional int32 fragmentNumber = 17;
    if (has_fragmentnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fragmentnumber());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 totalFragmentNumber = 19;
    if (has_totalfragmentnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalfragmentnumber());
    }
    
    // optional int32 remainPriceType = 20;
    if (has_remainpricetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainpricetype());
    }
    
    // optional int32 remainPrice = 21;
    if (has_remainprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remainprice());
    }
    
    // optional int32 maxlimit = 22;
    if (has_maxlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlimit());
    }
    
    // optional int32 limit = 23;
    if (has_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 state = 24;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.CarSlotInfo slots = 6;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ChartletInfo chartletInfos = 14;
  total_size += 1 * this->chartletinfos_size();
  for (int i = 0; i < this->chartletinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chartletinfos(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.GotchaExpense gotchaExpense = 18;
  total_size += 2 * this->gotchaexpense_size();
  for (int i = 0; i < this->gotchaexpense_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gotchaexpense(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarData::MergeFrom(const CarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  chartletinfos_.MergeFrom(from.chartletinfos_);
  gotchaexpense_.MergeFrom(from.gotchaexpense_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unlockmwlevel()) {
      set_unlockmwlevel(from.unlockmwlevel());
    }
    if (from.has_chartletid()) {
      set_chartletid(from.chartletid());
    }
    if (from.has_islock()) {
      set_islock(from.islock());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_sellflag()) {
      set_sellflag(from.sellflag());
    }
    if (from.has_isspecialcar()) {
      set_isspecialcar(from.isspecialcar());
    }
    if (from.has_fragmentnumber()) {
      set_fragmentnumber(from.fragmentnumber());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_totalfragmentnumber()) {
      set_totalfragmentnumber(from.totalfragmentnumber());
    }
    if (from.has_remainpricetype()) {
      set_remainpricetype(from.remainpricetype());
    }
    if (from.has_remainprice()) {
      set_remainprice(from.remainprice());
    }
    if (from.has_maxlimit()) {
      set_maxlimit(from.maxlimit());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarData::CopyFrom(const CarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003df) != 0x000003df) return false;
  
  for (int i = 0; i < slots_size(); i++) {
    if (!this->slots(i).IsInitialized()) return false;
  }
  for (int i = 0; i < chartletinfos_size(); i++) {
    if (!this->chartletinfos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gotchaexpense_size(); i++) {
    if (!this->gotchaexpense(i).IsInitialized()) return false;
  }
  return true;
}

void CarData::Swap(CarData* other) {
  if (other != this) {
    std::swap(carid_, other->carid_);
    std::swap(type_, other->type_);
    std::swap(tier_, other->tier_);
    std::swap(score_, other->score_);
    std::swap(status_, other->status_);
    slots_.Swap(&other->slots_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(unlockmwlevel_, other->unlockmwlevel_);
    std::swap(chartletid_, other->chartletid_);
    std::swap(islock_, other->islock_);
    std::swap(remaintime_, other->remaintime_);
    chartletinfos_.Swap(&other->chartletinfos_);
    std::swap(sellflag_, other->sellflag_);
    std::swap(isspecialcar_, other->isspecialcar_);
    std::swap(fragmentnumber_, other->fragmentnumber_);
    gotchaexpense_.Swap(&other->gotchaexpense_);
    std::swap(totalfragmentnumber_, other->totalfragmentnumber_);
    std::swap(remainpricetype_, other->remainpricetype_);
    std::swap(remainprice_, other->remainprice_);
    std::swap(maxlimit_, other->maxlimit_);
    std::swap(limit_, other->limit_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarData_descriptor_;
  metadata.reflection = CarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GotchaExpense::kLevelFieldNumber;
const int GotchaExpense::kPriceFieldNumber;
const int GotchaExpense::kPriceTypeFieldNumber;
const int GotchaExpense::kLeftFreeTimesFieldNumber;
#endif  // !_MSC_VER

GotchaExpense::GotchaExpense()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GotchaExpense::InitAsDefaultInstance() {
}

GotchaExpense::GotchaExpense(const GotchaExpense& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GotchaExpense::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  price_ = 0;
  pricetype_ = 0;
  leftfreetimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GotchaExpense::~GotchaExpense() {
  SharedDtor();
}

void GotchaExpense::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GotchaExpense::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GotchaExpense::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GotchaExpense_descriptor_;
}

const GotchaExpense& GotchaExpense::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

GotchaExpense* GotchaExpense::default_instance_ = NULL;

GotchaExpense* GotchaExpense::New() const {
  return new GotchaExpense;
}

void GotchaExpense::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    price_ = 0;
    pricetype_ = 0;
    leftfreetimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GotchaExpense::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }
      
      // required int32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priceType;
        break;
      }
      
      // required int32 priceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leftFreeTimes;
        break;
      }
      
      // required int32 leftFreeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftFreeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftfreetimes_)));
          set_has_leftfreetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GotchaExpense::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }
  
  // required int32 priceType = 3;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pricetype(), output);
  }
  
  // required int32 leftFreeTimes = 4;
  if (has_leftfreetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leftfreetimes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GotchaExpense::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }
  
  // required int32 priceType = 3;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pricetype(), target);
  }
  
  // required int32 leftFreeTimes = 4;
  if (has_leftfreetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leftfreetimes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GotchaExpense::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // required int32 priceType = 3;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }
    
    // required int32 leftFreeTimes = 4;
    if (has_leftfreetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftfreetimes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GotchaExpense::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GotchaExpense* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GotchaExpense*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GotchaExpense::MergeFrom(const GotchaExpense& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_leftfreetimes()) {
      set_leftfreetimes(from.leftfreetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GotchaExpense::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GotchaExpense::CopyFrom(const GotchaExpense& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GotchaExpense::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GotchaExpense::Swap(GotchaExpense* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(price_, other->price_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(leftfreetimes_, other->leftfreetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GotchaExpense::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GotchaExpense_descriptor_;
  metadata.reflection = GotchaExpense_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChartletInfo::kNameFieldNumber;
const int ChartletInfo::kDiffuseTexturePathFieldNumber;
const int ChartletInfo::kDiffuseMaskPathFieldNumber;
const int ChartletInfo::kBRDFPathFieldNumber;
const int ChartletInfo::kBRDFSpecularPathFieldNumber;
const int ChartletInfo::kNumberPlatePathFieldNumber;
const int ChartletInfo::kSwatchColorFieldNumber;
const int ChartletInfo::kSwatchColor2FieldNumber;
const int ChartletInfo::kPaintTypeFieldNumber;
const int ChartletInfo::kUseVinylMapFieldNumber;
const int ChartletInfo::kPriceTypeFieldNumber;
const int ChartletInfo::kPriceFieldNumber;
const int ChartletInfo::kTenancyFieldNumber;
const int ChartletInfo::kOwnedFieldNumber;
const int ChartletInfo::kRemainTimeFieldNumber;
const int ChartletInfo::kIdFieldNumber;
const int ChartletInfo::kSellFlagFieldNumber;
const int ChartletInfo::kOrderIdFieldNumber;
const int ChartletInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

ChartletInfo::ChartletInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChartletInfo::InitAsDefaultInstance() {
}

ChartletInfo::ChartletInfo(const ChartletInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChartletInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diffusetexturepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diffusemaskpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brdfpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brdfspecularpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numberplatepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  swatchcolor_ = GOOGLE_LONGLONG(0);
  swatchcolor2_ = GOOGLE_LONGLONG(0);
  painttype_ = 0;
  usevinylmap_ = false;
  pricetype_ = 0;
  price_ = 0;
  tenancy_ = GOOGLE_LONGLONG(0);
  owned_ = false;
  remaintime_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  sellflag_ = 0;
  orderid_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChartletInfo::~ChartletInfo() {
  SharedDtor();
}

void ChartletInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (diffusetexturepath_ != &::google::protobuf::internal::kEmptyString) {
    delete diffusetexturepath_;
  }
  if (diffusemaskpath_ != &::google::protobuf::internal::kEmptyString) {
    delete diffusemaskpath_;
  }
  if (brdfpath_ != &::google::protobuf::internal::kEmptyString) {
    delete brdfpath_;
  }
  if (brdfspecularpath_ != &::google::protobuf::internal::kEmptyString) {
    delete brdfspecularpath_;
  }
  if (numberplatepath_ != &::google::protobuf::internal::kEmptyString) {
    delete numberplatepath_;
  }
  if (this != default_instance_) {
  }
}

void ChartletInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartletInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartletInfo_descriptor_;
}

const ChartletInfo& ChartletInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ChartletInfo* ChartletInfo::default_instance_ = NULL;

ChartletInfo* ChartletInfo::New() const {
  return new ChartletInfo;
}

void ChartletInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_diffusetexturepath()) {
      if (diffusetexturepath_ != &::google::protobuf::internal::kEmptyString) {
        diffusetexturepath_->clear();
      }
    }
    if (has_diffusemaskpath()) {
      if (diffusemaskpath_ != &::google::protobuf::internal::kEmptyString) {
        diffusemaskpath_->clear();
      }
    }
    if (has_brdfpath()) {
      if (brdfpath_ != &::google::protobuf::internal::kEmptyString) {
        brdfpath_->clear();
      }
    }
    if (has_brdfspecularpath()) {
      if (brdfspecularpath_ != &::google::protobuf::internal::kEmptyString) {
        brdfspecularpath_->clear();
      }
    }
    if (has_numberplatepath()) {
      if (numberplatepath_ != &::google::protobuf::internal::kEmptyString) {
        numberplatepath_->clear();
      }
    }
    swatchcolor_ = GOOGLE_LONGLONG(0);
    swatchcolor2_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    painttype_ = 0;
    usevinylmap_ = false;
    pricetype_ = 0;
    price_ = 0;
    tenancy_ = GOOGLE_LONGLONG(0);
    owned_ = false;
    remaintime_ = GOOGLE_LONGLONG(0);
    id_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sellflag_ = 0;
    orderid_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChartletInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_diffuseTexturePath;
        break;
      }
      
      // required string diffuseTexturePath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffuseTexturePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffusetexturepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diffusetexturepath().data(), this->diffusetexturepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_diffuseMaskPath;
        break;
      }
      
      // required string diffuseMaskPath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffuseMaskPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffusemaskpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diffusemaskpath().data(), this->diffusemaskpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BRDFPath;
        break;
      }
      
      // required string BRDFPath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BRDFPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brdfpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brdfpath().data(), this->brdfpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BRDFSpecularPath;
        break;
      }
      
      // required string BRDFSpecularPath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BRDFSpecularPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brdfspecularpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brdfspecularpath().data(), this->brdfspecularpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_numberPlatePath;
        break;
      }
      
      // required string numberPlatePath = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_numberPlatePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_numberplatepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->numberplatepath().data(), this->numberplatepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_swatchColor;
        break;
      }
      
      // required int64 swatchColor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swatchColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &swatchcolor_)));
          set_has_swatchcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_swatchColor2;
        break;
      }
      
      // required int64 swatchColor2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swatchColor2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &swatchcolor2_)));
          set_has_swatchcolor2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_paintType;
        break;
      }
      
      // required int32 paintType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paintType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &painttype_)));
          set_has_painttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_useVinylMap;
        break;
      }
      
      // required bool useVinylMap = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useVinylMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usevinylmap_)));
          set_has_usevinylmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_priceType;
        break;
      }
      
      // required int32 priceType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_price;
        break;
      }
      
      // required int32 price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tenancy;
        break;
      }
      
      // required int64 tenancy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tenancy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tenancy_)));
          set_has_tenancy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_owned;
        break;
      }
      
      // required bool owned = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
          set_has_owned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_remainTime;
        break;
      }
      
      // required int64 remainTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_id;
        break;
      }
      
      // required int32 id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sellFlag;
        break;
      }
      
      // optional int32 sellFlag = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellflag_)));
          set_has_sellflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_orderId;
        break;
      }
      
      // optional int32 orderId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderid_)));
          set_has_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_score;
        break;
      }
      
      // optional int32 score = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChartletInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string diffuseTexturePath = 2;
  if (has_diffusetexturepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffusetexturepath().data(), this->diffusetexturepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->diffusetexturepath(), output);
  }
  
  // required string diffuseMaskPath = 3;
  if (has_diffusemaskpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffusemaskpath().data(), this->diffusemaskpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->diffusemaskpath(), output);
  }
  
  // required string BRDFPath = 4;
  if (has_brdfpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brdfpath().data(), this->brdfpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->brdfpath(), output);
  }
  
  // required string BRDFSpecularPath = 5;
  if (has_brdfspecularpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brdfspecularpath().data(), this->brdfspecularpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->brdfspecularpath(), output);
  }
  
  // required string numberPlatePath = 6;
  if (has_numberplatepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->numberplatepath().data(), this->numberplatepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->numberplatepath(), output);
  }
  
  // required int64 swatchColor = 7;
  if (has_swatchcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->swatchcolor(), output);
  }
  
  // required int64 swatchColor2 = 8;
  if (has_swatchcolor2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->swatchcolor2(), output);
  }
  
  // required int32 paintType = 9;
  if (has_painttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->painttype(), output);
  }
  
  // required bool useVinylMap = 10;
  if (has_usevinylmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->usevinylmap(), output);
  }
  
  // required int32 priceType = 11;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pricetype(), output);
  }
  
  // required int32 price = 12;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->price(), output);
  }
  
  // required int64 tenancy = 13;
  if (has_tenancy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->tenancy(), output);
  }
  
  // required bool owned = 14;
  if (has_owned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->owned(), output);
  }
  
  // required int64 remainTime = 15;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->remaintime(), output);
  }
  
  // required int32 id = 16;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->id(), output);
  }
  
  // optional int32 sellFlag = 17;
  if (has_sellflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sellflag(), output);
  }
  
  // optional int32 orderId = 18;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->orderid(), output);
  }
  
  // optional int32 score = 19;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChartletInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string diffuseTexturePath = 2;
  if (has_diffusetexturepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffusetexturepath().data(), this->diffusetexturepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->diffusetexturepath(), target);
  }
  
  // required string diffuseMaskPath = 3;
  if (has_diffusemaskpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diffusemaskpath().data(), this->diffusemaskpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->diffusemaskpath(), target);
  }
  
  // required string BRDFPath = 4;
  if (has_brdfpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brdfpath().data(), this->brdfpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brdfpath(), target);
  }
  
  // required string BRDFSpecularPath = 5;
  if (has_brdfspecularpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brdfspecularpath().data(), this->brdfspecularpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->brdfspecularpath(), target);
  }
  
  // required string numberPlatePath = 6;
  if (has_numberplatepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->numberplatepath().data(), this->numberplatepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->numberplatepath(), target);
  }
  
  // required int64 swatchColor = 7;
  if (has_swatchcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->swatchcolor(), target);
  }
  
  // required int64 swatchColor2 = 8;
  if (has_swatchcolor2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->swatchcolor2(), target);
  }
  
  // required int32 paintType = 9;
  if (has_painttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->painttype(), target);
  }
  
  // required bool useVinylMap = 10;
  if (has_usevinylmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->usevinylmap(), target);
  }
  
  // required int32 priceType = 11;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pricetype(), target);
  }
  
  // required int32 price = 12;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->price(), target);
  }
  
  // required int64 tenancy = 13;
  if (has_tenancy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->tenancy(), target);
  }
  
  // required bool owned = 14;
  if (has_owned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->owned(), target);
  }
  
  // required int64 remainTime = 15;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->remaintime(), target);
  }
  
  // required int32 id = 16;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->id(), target);
  }
  
  // optional int32 sellFlag = 17;
  if (has_sellflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sellflag(), target);
  }
  
  // optional int32 orderId = 18;
  if (has_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->orderid(), target);
  }
  
  // optional int32 score = 19;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChartletInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string diffuseTexturePath = 2;
    if (has_diffusetexturepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diffusetexturepath());
    }
    
    // required string diffuseMaskPath = 3;
    if (has_diffusemaskpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diffusemaskpath());
    }
    
    // required string BRDFPath = 4;
    if (has_brdfpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brdfpath());
    }
    
    // required string BRDFSpecularPath = 5;
    if (has_brdfspecularpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brdfspecularpath());
    }
    
    // required string numberPlatePath = 6;
    if (has_numberplatepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->numberplatepath());
    }
    
    // required int64 swatchColor = 7;
    if (has_swatchcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->swatchcolor());
    }
    
    // required int64 swatchColor2 = 8;
    if (has_swatchcolor2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->swatchcolor2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 paintType = 9;
    if (has_painttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->painttype());
    }
    
    // required bool useVinylMap = 10;
    if (has_usevinylmap()) {
      total_size += 1 + 1;
    }
    
    // required int32 priceType = 11;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }
    
    // required int32 price = 12;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // required int64 tenancy = 13;
    if (has_tenancy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tenancy());
    }
    
    // required bool owned = 14;
    if (has_owned()) {
      total_size += 1 + 1;
    }
    
    // required int64 remainTime = 15;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->remaintime());
    }
    
    // required int32 id = 16;
    if (has_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 sellFlag = 17;
    if (has_sellflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellflag());
    }
    
    // optional int32 orderId = 18;
    if (has_orderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderid());
    }
    
    // optional int32 score = 19;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartletInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChartletInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChartletInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChartletInfo::MergeFrom(const ChartletInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_diffusetexturepath()) {
      set_diffusetexturepath(from.diffusetexturepath());
    }
    if (from.has_diffusemaskpath()) {
      set_diffusemaskpath(from.diffusemaskpath());
    }
    if (from.has_brdfpath()) {
      set_brdfpath(from.brdfpath());
    }
    if (from.has_brdfspecularpath()) {
      set_brdfspecularpath(from.brdfspecularpath());
    }
    if (from.has_numberplatepath()) {
      set_numberplatepath(from.numberplatepath());
    }
    if (from.has_swatchcolor()) {
      set_swatchcolor(from.swatchcolor());
    }
    if (from.has_swatchcolor2()) {
      set_swatchcolor2(from.swatchcolor2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_painttype()) {
      set_painttype(from.painttype());
    }
    if (from.has_usevinylmap()) {
      set_usevinylmap(from.usevinylmap());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_tenancy()) {
      set_tenancy(from.tenancy());
    }
    if (from.has_owned()) {
      set_owned(from.owned());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sellflag()) {
      set_sellflag(from.sellflag());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChartletInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartletInfo::CopyFrom(const ChartletInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartletInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  
  return true;
}

void ChartletInfo::Swap(ChartletInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(diffusetexturepath_, other->diffusetexturepath_);
    std::swap(diffusemaskpath_, other->diffusemaskpath_);
    std::swap(brdfpath_, other->brdfpath_);
    std::swap(brdfspecularpath_, other->brdfspecularpath_);
    std::swap(numberplatepath_, other->numberplatepath_);
    std::swap(swatchcolor_, other->swatchcolor_);
    std::swap(swatchcolor2_, other->swatchcolor2_);
    std::swap(painttype_, other->painttype_);
    std::swap(usevinylmap_, other->usevinylmap_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(tenancy_, other->tenancy_);
    std::swap(owned_, other->owned_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(id_, other->id_);
    std::swap(sellflag_, other->sellflag_);
    std::swap(orderid_, other->orderid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChartletInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartletInfo_descriptor_;
  metadata.reflection = ChartletInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarSlotInfo::kSlotIdFieldNumber;
const int CarSlotInfo::kLevelFieldNumber;
const int CarSlotInfo::kReachMaxLevelFieldNumber;
const int CarSlotInfo::kStatusFieldNumber;
const int CarSlotInfo::kRemainTimeFieldNumber;
const int CarSlotInfo::kScoreFieldNumber;
const int CarSlotInfo::kPriceTypeFieldNumber;
const int CarSlotInfo::kPriceFieldNumber;
const int CarSlotInfo::kDescriptionFieldNumber;
const int CarSlotInfo::kConsumbleFieldNumber;
const int CarSlotInfo::kNextAddScoreFieldNumber;
#endif  // !_MSC_VER

CarSlotInfo::CarSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CarSlotInfo::InitAsDefaultInstance() {
}

CarSlotInfo::CarSlotInfo(const CarSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CarSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slotid_ = 0;
  level_ = 0;
  reachmaxlevel_ = false;
  status_ = 0;
  remaintime_ = 0;
  score_ = 0;
  pricetype_ = 0;
  price_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextaddscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarSlotInfo::~CarSlotInfo() {
  SharedDtor();
}

void CarSlotInfo::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void CarSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarSlotInfo_descriptor_;
}

const CarSlotInfo& CarSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

CarSlotInfo* CarSlotInfo::default_instance_ = NULL;

CarSlotInfo* CarSlotInfo::New() const {
  return new CarSlotInfo;
}

void CarSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slotid_ = 0;
    level_ = 0;
    reachmaxlevel_ = false;
    status_ = 0;
    remaintime_ = 0;
    score_ = 0;
    pricetype_ = 0;
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    nextaddscore_ = 0;
  }
  consumble_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slotId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reachMaxLevel;
        break;
      }
      
      // required bool reachMaxLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reachMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reachmaxlevel_)));
          set_has_reachmaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }
      
      // required int32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainTime;
        break;
      }
      
      // optional int32 remainTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score;
        break;
      }
      
      // required int32 score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_priceType;
        break;
      }
      
      // required int32 priceType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_price;
        break;
      }
      
      // required int32 price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }
      
      // required string description = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_consumble;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.ConsumableData consumble = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_consumble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumble()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_consumble;
        if (input->ExpectTag(88)) goto parse_nextAddScore;
        break;
      }
      
      // optional int32 nextAddScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextAddScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextaddscore_)));
          set_has_nextaddscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CarSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 slotId = 1;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slotid(), output);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // required bool reachMaxLevel = 3;
  if (has_reachmaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reachmaxlevel(), output);
  }
  
  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }
  
  // optional int32 remainTime = 5;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remaintime(), output);
  }
  
  // required int32 score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }
  
  // required int32 priceType = 7;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pricetype(), output);
  }
  
  // required int32 price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price(), output);
  }
  
  // required string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->description(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ConsumableData consumble = 10;
  for (int i = 0; i < this->consumble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->consumble(i), output);
  }
  
  // optional int32 nextAddScore = 11;
  if (has_nextaddscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nextaddscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CarSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 slotId = 1;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slotid(), target);
  }
  
  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // required bool reachMaxLevel = 3;
  if (has_reachmaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reachmaxlevel(), target);
  }
  
  // required int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }
  
  // optional int32 remainTime = 5;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remaintime(), target);
  }
  
  // required int32 score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }
  
  // required int32 priceType = 7;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pricetype(), target);
  }
  
  // required int32 price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price(), target);
  }
  
  // required string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->description(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ConsumableData consumble = 10;
  for (int i = 0; i < this->consumble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->consumble(i), target);
  }
  
  // optional int32 nextAddScore = 11;
  if (has_nextaddscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nextaddscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CarSlotInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 slotId = 1;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotid());
    }
    
    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required bool reachMaxLevel = 3;
    if (has_reachmaxlevel()) {
      total_size += 1 + 1;
    }
    
    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 remainTime = 5;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }
    
    // required int32 score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }
    
    // required int32 priceType = 7;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }
    
    // required int32 price = 8;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional int32 nextAddScore = 11;
    if (has_nextaddscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextaddscore());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.ConsumableData consumble = 10;
  total_size += 1 * this->consumble_size();
  for (int i = 0; i < this->consumble_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumble(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarSlotInfo::MergeFrom(const CarSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumble_.MergeFrom(from.consumble_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reachmaxlevel()) {
      set_reachmaxlevel(from.reachmaxlevel());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_nextaddscore()) {
      set_nextaddscore(from.nextaddscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarSlotInfo::CopyFrom(const CarSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarSlotInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;
  
  for (int i = 0; i < consumble_size(); i++) {
    if (!this->consumble(i).IsInitialized()) return false;
  }
  return true;
}

void CarSlotInfo::Swap(CarSlotInfo* other) {
  if (other != this) {
    std::swap(slotid_, other->slotid_);
    std::swap(level_, other->level_);
    std::swap(reachmaxlevel_, other->reachmaxlevel_);
    std::swap(status_, other->status_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(score_, other->score_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(description_, other->description_);
    consumble_.Swap(&other->consumble_);
    std::swap(nextaddscore_, other->nextaddscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarSlotInfo_descriptor_;
  metadata.reflection = CarSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConsumableData::kTypeFieldNumber;
const int ConsumableData::kRatioFieldNumber;
const int ConsumableData::kPriceTypeFieldNumber;
const int ConsumableData::kPriceFieldNumber;
#endif  // !_MSC_VER

ConsumableData::ConsumableData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConsumableData::InitAsDefaultInstance() {
}

ConsumableData::ConsumableData(const ConsumableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConsumableData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ratio_ = 0;
  pricetype_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConsumableData::~ConsumableData() {
  SharedDtor();
}

void ConsumableData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConsumableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConsumableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConsumableData_descriptor_;
}

const ConsumableData& ConsumableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ConsumableData* ConsumableData::default_instance_ = NULL;

ConsumableData* ConsumableData::New() const {
  return new ConsumableData;
}

void ConsumableData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ratio_ = 0;
    pricetype_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConsumableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ratio;
        break;
      }
      
      // required float ratio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priceType;
        break;
      }
      
      // required int32 priceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price;
        break;
      }
      
      // required int32 price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConsumableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required float ratio = 2;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ratio(), output);
  }
  
  // required int32 priceType = 3;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pricetype(), output);
  }
  
  // required int32 price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConsumableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required float ratio = 2;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ratio(), target);
  }
  
  // required int32 priceType = 3;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pricetype(), target);
  }
  
  // required int32 price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConsumableData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required float ratio = 2;
    if (has_ratio()) {
      total_size += 1 + 4;
    }
    
    // required int32 priceType = 3;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }
    
    // required int32 price = 4;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConsumableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConsumableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConsumableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConsumableData::MergeFrom(const ConsumableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConsumableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsumableData::CopyFrom(const ConsumableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumableData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ConsumableData::Swap(ConsumableData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ratio_, other->ratio_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConsumableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConsumableData_descriptor_;
  metadata.reflection = ConsumableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestGarageCommand::RequestGarageCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGarageCommand::InitAsDefaultInstance() {
}

RequestGarageCommand::RequestGarageCommand(const RequestGarageCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGarageCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGarageCommand::~RequestGarageCommand() {
  SharedDtor();
}

void RequestGarageCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestGarageCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGarageCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGarageCommand_descriptor_;
}

const RequestGarageCommand& RequestGarageCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestGarageCommand* RequestGarageCommand::default_instance_ = NULL;

RequestGarageCommand* RequestGarageCommand::New() const {
  return new RequestGarageCommand;
}

void RequestGarageCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGarageCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestGarageCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGarageCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGarageCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGarageCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGarageCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGarageCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGarageCommand::MergeFrom(const RequestGarageCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGarageCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGarageCommand::CopyFrom(const RequestGarageCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGarageCommand::IsInitialized() const {
  
  return true;
}

void RequestGarageCommand::Swap(RequestGarageCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGarageCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGarageCommand_descriptor_;
  metadata.reflection = RequestGarageCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGarageCommand::kCarDatasFieldNumber;
#endif  // !_MSC_VER

ResponseGarageCommand::ResponseGarageCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseGarageCommand::InitAsDefaultInstance() {
}

ResponseGarageCommand::ResponseGarageCommand(const ResponseGarageCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGarageCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGarageCommand::~ResponseGarageCommand() {
  SharedDtor();
}

void ResponseGarageCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseGarageCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGarageCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGarageCommand_descriptor_;
}

const ResponseGarageCommand& ResponseGarageCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseGarageCommand* ResponseGarageCommand::default_instance_ = NULL;

ResponseGarageCommand* ResponseGarageCommand::New() const {
  return new ResponseGarageCommand;
}

void ResponseGarageCommand::Clear() {
  cardatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseGarageCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.CarData carDatas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_carDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGarageCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.CarData carDatas = 1;
  for (int i = 0; i < this->cardatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardatas(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseGarageCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.CarData carDatas = 1;
  for (int i = 0; i < this->cardatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardatas(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseGarageCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.CarData carDatas = 1;
  total_size += 1 * this->cardatas_size();
  for (int i = 0; i < this->cardatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardatas(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGarageCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseGarageCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseGarageCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseGarageCommand::MergeFrom(const ResponseGarageCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardatas_.MergeFrom(from.cardatas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseGarageCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGarageCommand::CopyFrom(const ResponseGarageCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGarageCommand::IsInitialized() const {
  
  for (int i = 0; i < cardatas_size(); i++) {
    if (!this->cardatas(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseGarageCommand::Swap(ResponseGarageCommand* other) {
  if (other != this) {
    cardatas_.Swap(&other->cardatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseGarageCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGarageCommand_descriptor_;
  metadata.reflection = ResponseGarageCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBuyCarCommand::kCarIdFieldNumber;
#endif  // !_MSC_VER

RequestBuyCarCommand::RequestBuyCarCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBuyCarCommand::InitAsDefaultInstance() {
}

RequestBuyCarCommand::RequestBuyCarCommand(const RequestBuyCarCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBuyCarCommand::SharedCtor() {
  _cached_size_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBuyCarCommand::~RequestBuyCarCommand() {
  SharedDtor();
}

void RequestBuyCarCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestBuyCarCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBuyCarCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBuyCarCommand_descriptor_;
}

const RequestBuyCarCommand& RequestBuyCarCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBuyCarCommand* RequestBuyCarCommand::default_instance_ = NULL;

RequestBuyCarCommand* RequestBuyCarCommand::New() const {
  return new RequestBuyCarCommand;
}

void RequestBuyCarCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBuyCarCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string carId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBuyCarCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->carid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBuyCarCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->carid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBuyCarCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string carId = 1;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBuyCarCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBuyCarCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBuyCarCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBuyCarCommand::MergeFrom(const RequestBuyCarCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carid()) {
      set_carid(from.carid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBuyCarCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBuyCarCommand::CopyFrom(const RequestBuyCarCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBuyCarCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestBuyCarCommand::Swap(RequestBuyCarCommand* other) {
  if (other != this) {
    std::swap(carid_, other->carid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBuyCarCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBuyCarCommand_descriptor_;
  metadata.reflection = RequestBuyCarCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBuyCarCommand::kSuccessFieldNumber;
const int ResponseBuyCarCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ResponseBuyCarCommand::ResponseBuyCarCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBuyCarCommand::InitAsDefaultInstance() {
}

ResponseBuyCarCommand::ResponseBuyCarCommand(const ResponseBuyCarCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBuyCarCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBuyCarCommand::~ResponseBuyCarCommand() {
  SharedDtor();
}

void ResponseBuyCarCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseBuyCarCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBuyCarCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBuyCarCommand_descriptor_;
}

const ResponseBuyCarCommand& ResponseBuyCarCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBuyCarCommand* ResponseBuyCarCommand::default_instance_ = NULL;

ResponseBuyCarCommand* ResponseBuyCarCommand::New() const {
  return new ResponseBuyCarCommand;
}

void ResponseBuyCarCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBuyCarCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBuyCarCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBuyCarCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBuyCarCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBuyCarCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBuyCarCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBuyCarCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBuyCarCommand::MergeFrom(const ResponseBuyCarCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBuyCarCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBuyCarCommand::CopyFrom(const ResponseBuyCarCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBuyCarCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResponseBuyCarCommand::Swap(ResponseBuyCarCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBuyCarCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBuyCarCommand_descriptor_;
  metadata.reflection = ResponseBuyCarCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCarDataCommand::kCarIdFieldNumber;
#endif  // !_MSC_VER

RequestCarDataCommand::RequestCarDataCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCarDataCommand::InitAsDefaultInstance() {
}

RequestCarDataCommand::RequestCarDataCommand(const RequestCarDataCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCarDataCommand::SharedCtor() {
  _cached_size_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCarDataCommand::~RequestCarDataCommand() {
  SharedDtor();
}

void RequestCarDataCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestCarDataCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCarDataCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCarDataCommand_descriptor_;
}

const RequestCarDataCommand& RequestCarDataCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestCarDataCommand* RequestCarDataCommand::default_instance_ = NULL;

RequestCarDataCommand* RequestCarDataCommand::New() const {
  return new RequestCarDataCommand;
}

void RequestCarDataCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCarDataCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string carId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCarDataCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->carid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCarDataCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->carid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCarDataCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string carId = 1;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCarDataCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCarDataCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCarDataCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCarDataCommand::MergeFrom(const RequestCarDataCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carid()) {
      set_carid(from.carid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCarDataCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCarDataCommand::CopyFrom(const RequestCarDataCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCarDataCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestCarDataCommand::Swap(RequestCarDataCommand* other) {
  if (other != this) {
    std::swap(carid_, other->carid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCarDataCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCarDataCommand_descriptor_;
  metadata.reflection = RequestCarDataCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCarDataCommand::kCarDataFieldNumber;
#endif  // !_MSC_VER

ResponseCarDataCommand::ResponseCarDataCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseCarDataCommand::InitAsDefaultInstance() {
  cardata_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::CarData*>(&::com::ea::eamobile::nfsmw::protoc::CarData::default_instance());
}

ResponseCarDataCommand::ResponseCarDataCommand(const ResponseCarDataCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCarDataCommand::SharedCtor() {
  _cached_size_ = 0;
  cardata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCarDataCommand::~ResponseCarDataCommand() {
  SharedDtor();
}

void ResponseCarDataCommand::SharedDtor() {
  if (this != default_instance_) {
    delete cardata_;
  }
}

void ResponseCarDataCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCarDataCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCarDataCommand_descriptor_;
}

const ResponseCarDataCommand& ResponseCarDataCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseCarDataCommand* ResponseCarDataCommand::default_instance_ = NULL;

ResponseCarDataCommand* ResponseCarDataCommand::New() const {
  return new ResponseCarDataCommand;
}

void ResponseCarDataCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cardata()) {
      if (cardata_ != NULL) cardata_->::com::ea::eamobile::nfsmw::protoc::CarData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseCarDataCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.CarData carData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCarDataCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.CarData carData = 1;
  if (has_cardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseCarDataCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.CarData carData = 1;
  if (has_cardata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseCarDataCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.CarData carData = 1;
    if (has_cardata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCarDataCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseCarDataCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseCarDataCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCarDataCommand::MergeFrom(const ResponseCarDataCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardata()) {
      mutable_cardata()->::com::ea::eamobile::nfsmw::protoc::CarData::MergeFrom(from.cardata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseCarDataCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCarDataCommand::CopyFrom(const ResponseCarDataCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCarDataCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cardata()) {
    if (!this->cardata().IsInitialized()) return false;
  }
  return true;
}

void ResponseCarDataCommand::Swap(ResponseCarDataCommand* other) {
  if (other != this) {
    std::swap(cardata_, other->cardata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseCarDataCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCarDataCommand_descriptor_;
  metadata.reflection = ResponseCarDataCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpgradeSlotCommand::kSlotIdFieldNumber;
const int RequestUpgradeSlotCommand::kUserCarIdFieldNumber;
#endif  // !_MSC_VER

RequestUpgradeSlotCommand::RequestUpgradeSlotCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUpgradeSlotCommand::InitAsDefaultInstance() {
}

RequestUpgradeSlotCommand::RequestUpgradeSlotCommand(const RequestUpgradeSlotCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUpgradeSlotCommand::SharedCtor() {
  _cached_size_ = 0;
  slotid_ = 0;
  usercarid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpgradeSlotCommand::~RequestUpgradeSlotCommand() {
  SharedDtor();
}

void RequestUpgradeSlotCommand::SharedDtor() {
  if (usercarid_ != &::google::protobuf::internal::kEmptyString) {
    delete usercarid_;
  }
  if (this != default_instance_) {
  }
}

void RequestUpgradeSlotCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUpgradeSlotCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUpgradeSlotCommand_descriptor_;
}

const RequestUpgradeSlotCommand& RequestUpgradeSlotCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestUpgradeSlotCommand* RequestUpgradeSlotCommand::default_instance_ = NULL;

RequestUpgradeSlotCommand* RequestUpgradeSlotCommand::New() const {
  return new RequestUpgradeSlotCommand;
}

void RequestUpgradeSlotCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slotid_ = 0;
    if (has_usercarid()) {
      if (usercarid_ != &::google::protobuf::internal::kEmptyString) {
        usercarid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUpgradeSlotCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slotId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userCarId;
        break;
      }
      
      // required string userCarId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userCarId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usercarid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usercarid().data(), this->usercarid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUpgradeSlotCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 slotId = 1;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slotid(), output);
  }
  
  // required string userCarId = 2;
  if (has_usercarid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercarid().data(), this->usercarid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usercarid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUpgradeSlotCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 slotId = 1;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slotid(), target);
  }
  
  // required string userCarId = 2;
  if (has_usercarid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usercarid().data(), this->usercarid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->usercarid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUpgradeSlotCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 slotId = 1;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slotid());
    }
    
    // required string userCarId = 2;
    if (has_usercarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usercarid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpgradeSlotCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUpgradeSlotCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUpgradeSlotCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUpgradeSlotCommand::MergeFrom(const RequestUpgradeSlotCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_usercarid()) {
      set_usercarid(from.usercarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUpgradeSlotCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpgradeSlotCommand::CopyFrom(const RequestUpgradeSlotCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpgradeSlotCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestUpgradeSlotCommand::Swap(RequestUpgradeSlotCommand* other) {
  if (other != this) {
    std::swap(slotid_, other->slotid_);
    std::swap(usercarid_, other->usercarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUpgradeSlotCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUpgradeSlotCommand_descriptor_;
  metadata.reflection = RequestUpgradeSlotCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUpgradeSlotCommand::kSuccessFieldNumber;
const int ResponseUpgradeSlotCommand::kMessageFieldNumber;
const int ResponseUpgradeSlotCommand::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

ResponseUpgradeSlotCommand::ResponseUpgradeSlotCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseUpgradeSlotCommand::InitAsDefaultInstance() {
}

ResponseUpgradeSlotCommand::ResponseUpgradeSlotCommand(const ResponseUpgradeSlotCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUpgradeSlotCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUpgradeSlotCommand::~ResponseUpgradeSlotCommand() {
  SharedDtor();
}

void ResponseUpgradeSlotCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseUpgradeSlotCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUpgradeSlotCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUpgradeSlotCommand_descriptor_;
}

const ResponseUpgradeSlotCommand& ResponseUpgradeSlotCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseUpgradeSlotCommand* ResponseUpgradeSlotCommand::default_instance_ = NULL;

ResponseUpgradeSlotCommand* ResponseUpgradeSlotCommand::New() const {
  return new ResponseUpgradeSlotCommand;
}

void ResponseUpgradeSlotCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    remaintime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseUpgradeSlotCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainTime;
        break;
      }
      
      // optional int32 remainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUpgradeSlotCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  // optional int32 remainTime = 3;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remaintime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseUpgradeSlotCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  // optional int32 remainTime = 3;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remaintime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseUpgradeSlotCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // optional int32 remainTime = 3;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUpgradeSlotCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseUpgradeSlotCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseUpgradeSlotCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseUpgradeSlotCommand::MergeFrom(const ResponseUpgradeSlotCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseUpgradeSlotCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUpgradeSlotCommand::CopyFrom(const ResponseUpgradeSlotCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpgradeSlotCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResponseUpgradeSlotCommand::Swap(ResponseUpgradeSlotCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseUpgradeSlotCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUpgradeSlotCommand_descriptor_;
  metadata.reflection = ResponseUpgradeSlotCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUseChartletCommand::kChartletIdFieldNumber;
const int RequestUseChartletCommand::kCarIdFieldNumber;
#endif  // !_MSC_VER

RequestUseChartletCommand::RequestUseChartletCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUseChartletCommand::InitAsDefaultInstance() {
}

RequestUseChartletCommand::RequestUseChartletCommand(const RequestUseChartletCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUseChartletCommand::SharedCtor() {
  _cached_size_ = 0;
  chartletid_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUseChartletCommand::~RequestUseChartletCommand() {
  SharedDtor();
}

void RequestUseChartletCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestUseChartletCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUseChartletCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUseChartletCommand_descriptor_;
}

const RequestUseChartletCommand& RequestUseChartletCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestUseChartletCommand* RequestUseChartletCommand::default_instance_ = NULL;

RequestUseChartletCommand* RequestUseChartletCommand::New() const {
  return new RequestUseChartletCommand;
}

void RequestUseChartletCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chartletid_ = 0;
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUseChartletCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 chartletId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chartletid_)));
          set_has_chartletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carId;
        break;
      }
      
      // required string carId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUseChartletCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 chartletId = 1;
  if (has_chartletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chartletid(), output);
  }
  
  // required string carId = 2;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->carid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUseChartletCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 chartletId = 1;
  if (has_chartletid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chartletid(), target);
  }
  
  // required string carId = 2;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->carid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUseChartletCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 chartletId = 1;
    if (has_chartletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chartletid());
    }
    
    // required string carId = 2;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUseChartletCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUseChartletCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUseChartletCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUseChartletCommand::MergeFrom(const RequestUseChartletCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chartletid()) {
      set_chartletid(from.chartletid());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUseChartletCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUseChartletCommand::CopyFrom(const RequestUseChartletCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUseChartletCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestUseChartletCommand::Swap(RequestUseChartletCommand* other) {
  if (other != this) {
    std::swap(chartletid_, other->chartletid_);
    std::swap(carid_, other->carid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUseChartletCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUseChartletCommand_descriptor_;
  metadata.reflection = RequestUseChartletCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUseChartletCommand::kSuccessFieldNumber;
const int ResponseUseChartletCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ResponseUseChartletCommand::ResponseUseChartletCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseUseChartletCommand::InitAsDefaultInstance() {
}

ResponseUseChartletCommand::ResponseUseChartletCommand(const ResponseUseChartletCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUseChartletCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUseChartletCommand::~ResponseUseChartletCommand() {
  SharedDtor();
}

void ResponseUseChartletCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseUseChartletCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUseChartletCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUseChartletCommand_descriptor_;
}

const ResponseUseChartletCommand& ResponseUseChartletCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseUseChartletCommand* ResponseUseChartletCommand::default_instance_ = NULL;

ResponseUseChartletCommand* ResponseUseChartletCommand::New() const {
  return new ResponseUseChartletCommand;
}

void ResponseUseChartletCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseUseChartletCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUseChartletCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseUseChartletCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseUseChartletCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUseChartletCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseUseChartletCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseUseChartletCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseUseChartletCommand::MergeFrom(const ResponseUseChartletCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseUseChartletCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUseChartletCommand::CopyFrom(const ResponseUseChartletCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUseChartletCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResponseUseChartletCommand::Swap(ResponseUseChartletCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseUseChartletCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUseChartletCommand_descriptor_;
  metadata.reflection = ResponseUseChartletCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestChallengeMathInfoCommand::kRequestFieldNumber;
#endif  // !_MSC_VER

RequestChallengeMathInfoCommand::RequestChallengeMathInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestChallengeMathInfoCommand::InitAsDefaultInstance() {
}

RequestChallengeMathInfoCommand::RequestChallengeMathInfoCommand(const RequestChallengeMathInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestChallengeMathInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  request_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestChallengeMathInfoCommand::~RequestChallengeMathInfoCommand() {
  SharedDtor();
}

void RequestChallengeMathInfoCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestChallengeMathInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestChallengeMathInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestChallengeMathInfoCommand_descriptor_;
}

const RequestChallengeMathInfoCommand& RequestChallengeMathInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestChallengeMathInfoCommand* RequestChallengeMathInfoCommand::default_instance_ = NULL;

RequestChallengeMathInfoCommand* RequestChallengeMathInfoCommand::New() const {
  return new RequestChallengeMathInfoCommand;
}

void RequestChallengeMathInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestChallengeMathInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestChallengeMathInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestChallengeMathInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestChallengeMathInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool request = 1;
    if (has_request()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestChallengeMathInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestChallengeMathInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestChallengeMathInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestChallengeMathInfoCommand::MergeFrom(const RequestChallengeMathInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestChallengeMathInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestChallengeMathInfoCommand::CopyFrom(const RequestChallengeMathInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestChallengeMathInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestChallengeMathInfoCommand::Swap(RequestChallengeMathInfoCommand* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestChallengeMathInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestChallengeMathInfoCommand_descriptor_;
  metadata.reflection = RequestChallengeMathInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseChallengeMatchInfoCommand::kModeIdFieldNumber;
const int ResponseChallengeMatchInfoCommand::kChallengeDaysFieldNumber;
const int ResponseChallengeMatchInfoCommand::kRewardFieldNumber;
const int ResponseChallengeMatchInfoCommand::kCarIdFieldNumber;
const int ResponseChallengeMatchInfoCommand::kRemainTimesFieldNumber;
const int ResponseChallengeMatchInfoCommand::kPassTimeFieldNumber;
const int ResponseChallengeMatchInfoCommand::kEventNameFieldNumber;
const int ResponseChallengeMatchInfoCommand::kCarLimitDisplayStringFieldNumber;
const int ResponseChallengeMatchInfoCommand::kExpireSecondsFieldNumber;
#endif  // !_MSC_VER

ResponseChallengeMatchInfoCommand::ResponseChallengeMatchInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseChallengeMatchInfoCommand::InitAsDefaultInstance() {
  reward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
}

ResponseChallengeMatchInfoCommand::ResponseChallengeMatchInfoCommand(const ResponseChallengeMatchInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseChallengeMatchInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  modeid_ = 0;
  challengedays_ = 0;
  reward_ = NULL;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remaintimes_ = 0;
  passtime_ = 0;
  eventname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carlimitdisplaystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expireseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseChallengeMatchInfoCommand::~ResponseChallengeMatchInfoCommand() {
  SharedDtor();
}

void ResponseChallengeMatchInfoCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (eventname_ != &::google::protobuf::internal::kEmptyString) {
    delete eventname_;
  }
  if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
    delete carlimitdisplaystring_;
  }
  if (this != default_instance_) {
    delete reward_;
  }
}

void ResponseChallengeMatchInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseChallengeMatchInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseChallengeMatchInfoCommand_descriptor_;
}

const ResponseChallengeMatchInfoCommand& ResponseChallengeMatchInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseChallengeMatchInfoCommand* ResponseChallengeMatchInfoCommand::default_instance_ = NULL;

ResponseChallengeMatchInfoCommand* ResponseChallengeMatchInfoCommand::New() const {
  return new ResponseChallengeMatchInfoCommand;
}

void ResponseChallengeMatchInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modeid_ = 0;
    challengedays_ = 0;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    remaintimes_ = 0;
    passtime_ = 0;
    if (has_eventname()) {
      if (eventname_ != &::google::protobuf::internal::kEmptyString) {
        eventname_->clear();
      }
    }
    if (has_carlimitdisplaystring()) {
      if (carlimitdisplaystring_ != &::google::protobuf::internal::kEmptyString) {
        carlimitdisplaystring_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    expireseconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseChallengeMatchInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challengeDays;
        break;
      }
      
      // required int32 challengeDays = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengedays_)));
          set_has_challengedays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }
      
      // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_carId;
        break;
      }
      
      // required string carId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remainTimes;
        break;
      }
      
      // required int32 remainTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintimes_)));
          set_has_remaintimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_passTime;
        break;
      }
      
      // required float passTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_passTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eventName;
        break;
      }
      
      // required string eventName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventname().data(), this->eventname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_carLimitDisplayString;
        break;
      }
      
      // required string carLimitDisplayString = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carLimitDisplayString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carlimitdisplaystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_expireSeconds;
        break;
      }
      
      // optional int32 expireSeconds = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireSeconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expireseconds_)));
          set_has_expireseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseChallengeMatchInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modeid(), output);
  }
  
  // required int32 challengeDays = 2;
  if (has_challengedays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->challengedays(), output);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward(), output);
  }
  
  // required string carId = 4;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->carid(), output);
  }
  
  // required int32 remainTimes = 5;
  if (has_remaintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remaintimes(), output);
  }
  
  // required float passTime = 6;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->passtime(), output);
  }
  
  // required string eventName = 7;
  if (has_eventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventname().data(), this->eventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->eventname(), output);
  }
  
  // required string carLimitDisplayString = 8;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->carlimitdisplaystring(), output);
  }
  
  // optional int32 expireSeconds = 9;
  if (has_expireseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->expireseconds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseChallengeMatchInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modeid(), target);
  }
  
  // required int32 challengeDays = 2;
  if (has_challengedays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->challengedays(), target);
  }
  
  // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward(), target);
  }
  
  // required string carId = 4;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->carid(), target);
  }
  
  // required int32 remainTimes = 5;
  if (has_remaintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remaintimes(), target);
  }
  
  // required float passTime = 6;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->passtime(), target);
  }
  
  // required string eventName = 7;
  if (has_eventname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventname().data(), this->eventname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->eventname(), target);
  }
  
  // required string carLimitDisplayString = 8;
  if (has_carlimitdisplaystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carlimitdisplaystring().data(), this->carlimitdisplaystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->carlimitdisplaystring(), target);
  }
  
  // optional int32 expireSeconds = 9;
  if (has_expireseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->expireseconds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseChallengeMatchInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modeId = 1;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required int32 challengeDays = 2;
    if (has_challengedays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengedays());
    }
    
    // required .com.ea.eamobile.nfsmw.protoc.Reward reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
    // required string carId = 4;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 remainTimes = 5;
    if (has_remaintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintimes());
    }
    
    // required float passTime = 6;
    if (has_passtime()) {
      total_size += 1 + 4;
    }
    
    // required string eventName = 7;
    if (has_eventname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventname());
    }
    
    // required string carLimitDisplayString = 8;
    if (has_carlimitdisplaystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carlimitdisplaystring());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 expireSeconds = 9;
    if (has_expireseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expireseconds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseChallengeMatchInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseChallengeMatchInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseChallengeMatchInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseChallengeMatchInfoCommand::MergeFrom(const ResponseChallengeMatchInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_challengedays()) {
      set_challengedays(from.challengedays());
    }
    if (from.has_reward()) {
      mutable_reward()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.reward());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_remaintimes()) {
      set_remaintimes(from.remaintimes());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_eventname()) {
      set_eventname(from.eventname());
    }
    if (from.has_carlimitdisplaystring()) {
      set_carlimitdisplaystring(from.carlimitdisplaystring());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expireseconds()) {
      set_expireseconds(from.expireseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseChallengeMatchInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseChallengeMatchInfoCommand::CopyFrom(const ResponseChallengeMatchInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseChallengeMatchInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void ResponseChallengeMatchInfoCommand::Swap(ResponseChallengeMatchInfoCommand* other) {
  if (other != this) {
    std::swap(modeid_, other->modeid_);
    std::swap(challengedays_, other->challengedays_);
    std::swap(reward_, other->reward_);
    std::swap(carid_, other->carid_);
    std::swap(remaintimes_, other->remaintimes_);
    std::swap(passtime_, other->passtime_);
    std::swap(eventname_, other->eventname_);
    std::swap(carlimitdisplaystring_, other->carlimitdisplaystring_);
    std::swap(expireseconds_, other->expireseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseChallengeMatchInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseChallengeMatchInfoCommand_descriptor_;
  metadata.reflection = ResponseChallengeMatchInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFeedCommand::kFeedContentFieldNumber;
#endif  // !_MSC_VER

ResponseFeedCommand::ResponseFeedCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFeedCommand::InitAsDefaultInstance() {
}

ResponseFeedCommand::ResponseFeedCommand(const ResponseFeedCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFeedCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFeedCommand::~ResponseFeedCommand() {
  SharedDtor();
}

void ResponseFeedCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseFeedCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFeedCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFeedCommand_descriptor_;
}

const ResponseFeedCommand& ResponseFeedCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFeedCommand* ResponseFeedCommand::default_instance_ = NULL;

ResponseFeedCommand* ResponseFeedCommand::New() const {
  return new ResponseFeedCommand;
}

void ResponseFeedCommand::Clear() {
  feedcontent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFeedCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string feedContent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feedContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feedcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feedcontent(0).data(), this->feedcontent(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_feedContent;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFeedCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string feedContent = 1;
  for (int i = 0; i < this->feedcontent_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->feedcontent(i).data(), this->feedcontent(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feedcontent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFeedCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string feedContent = 1;
  for (int i = 0; i < this->feedcontent_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feedcontent(i).data(), this->feedcontent(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->feedcontent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFeedCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated string feedContent = 1;
  total_size += 1 * this->feedcontent_size();
  for (int i = 0; i < this->feedcontent_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feedcontent(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFeedCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFeedCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFeedCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFeedCommand::MergeFrom(const ResponseFeedCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  feedcontent_.MergeFrom(from.feedcontent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFeedCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFeedCommand::CopyFrom(const ResponseFeedCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFeedCommand::IsInitialized() const {
  
  return true;
}

void ResponseFeedCommand::Swap(ResponseFeedCommand* other) {
  if (other != this) {
    feedcontent_.Swap(&other->feedcontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFeedCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFeedCommand_descriptor_;
  metadata.reflection = ResponseFeedCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemMessage::kNameFieldNumber;
const int ItemMessage::kPriceTypeFieldNumber;
const int ItemMessage::kPriceFieldNumber;
const int ItemMessage::kDiscountFieldNumber;
const int ItemMessage::kDiscountNumFieldNumber;
const int ItemMessage::kDiscountPriceFieldNumber;
const int ItemMessage::kBuyCountFieldNumber;
const int ItemMessage::kBuyTimeLimitFieldNumber;
const int ItemMessage::kItemTypeFieldNumber;
const int ItemMessage::kItemIdFieldNumber;
const int ItemMessage::kSellFlagFieldNumber;
#endif  // !_MSC_VER

ItemMessage::ItemMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemMessage::InitAsDefaultInstance() {
}

ItemMessage::ItemMessage(const ItemMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemMessage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricetype_ = 0;
  price_ = 0;
  discount_ = false;
  discountnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  discountprice_ = 0;
  buycount_ = 0;
  buytimelimit_ = GOOGLE_LONGLONG(0);
  itemtype_ = 0;
  itemid_ = 0;
  sellflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemMessage::~ItemMessage() {
  SharedDtor();
}

void ItemMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (discountnum_ != &::google::protobuf::internal::kEmptyString) {
    delete discountnum_;
  }
  if (this != default_instance_) {
  }
}

void ItemMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemMessage_descriptor_;
}

const ItemMessage& ItemMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ItemMessage* ItemMessage::default_instance_ = NULL;

ItemMessage* ItemMessage::New() const {
  return new ItemMessage;
}

void ItemMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pricetype_ = 0;
    price_ = 0;
    discount_ = false;
    if (has_discountnum()) {
      if (discountnum_ != &::google::protobuf::internal::kEmptyString) {
        discountnum_->clear();
      }
    }
    discountprice_ = 0;
    buycount_ = 0;
    buytimelimit_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    itemtype_ = 0;
    itemid_ = 0;
    sellflag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_priceType;
        break;
      }
      
      // required int32 priceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricetype_)));
          set_has_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_price;
        break;
      }
      
      // required float price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_discount;
        break;
      }
      
      // required bool discount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_discountNum;
        break;
      }
      
      // required string discountNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discountNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_discountnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->discountnum().data(), this->discountnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_discountPrice;
        break;
      }
      
      // required float discountPrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_discountPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &discountprice_)));
          set_has_discountprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buyCount;
        break;
      }
      
      // required int32 buyCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buyTimeLimit;
        break;
      }
      
      // required int64 buyTimeLimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyTimeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buytimelimit_)));
          set_has_buytimelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_itemType;
        break;
      }
      
      // required int32 itemType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_itemId;
        break;
      }
      
      // required int32 itemId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sellFlag;
        break;
      }
      
      // optional int32 sellFlag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellflag_)));
          set_has_sellflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 priceType = 2;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pricetype(), output);
  }
  
  // required float price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->price(), output);
  }
  
  // required bool discount = 4;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->discount(), output);
  }
  
  // required string discountNum = 5;
  if (has_discountnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->discountnum().data(), this->discountnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->discountnum(), output);
  }
  
  // required float discountPrice = 6;
  if (has_discountprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->discountprice(), output);
  }
  
  // required int32 buyCount = 7;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buycount(), output);
  }
  
  // required int64 buyTimeLimit = 8;
  if (has_buytimelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->buytimelimit(), output);
  }
  
  // required int32 itemType = 9;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->itemtype(), output);
  }
  
  // required int32 itemId = 10;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->itemid(), output);
  }
  
  // optional int32 sellFlag = 11;
  if (has_sellflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sellflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 priceType = 2;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pricetype(), target);
  }
  
  // required float price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->price(), target);
  }
  
  // required bool discount = 4;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->discount(), target);
  }
  
  // required string discountNum = 5;
  if (has_discountnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->discountnum().data(), this->discountnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->discountnum(), target);
  }
  
  // required float discountPrice = 6;
  if (has_discountprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->discountprice(), target);
  }
  
  // required int32 buyCount = 7;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buycount(), target);
  }
  
  // required int64 buyTimeLimit = 8;
  if (has_buytimelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->buytimelimit(), target);
  }
  
  // required int32 itemType = 9;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->itemtype(), target);
  }
  
  // required int32 itemId = 10;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->itemid(), target);
  }
  
  // optional int32 sellFlag = 11;
  if (has_sellflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sellflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 priceType = 2;
    if (has_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricetype());
    }
    
    // required float price = 3;
    if (has_price()) {
      total_size += 1 + 4;
    }
    
    // required bool discount = 4;
    if (has_discount()) {
      total_size += 1 + 1;
    }
    
    // required string discountNum = 5;
    if (has_discountnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->discountnum());
    }
    
    // required float discountPrice = 6;
    if (has_discountprice()) {
      total_size += 1 + 4;
    }
    
    // required int32 buyCount = 7;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }
    
    // required int64 buyTimeLimit = 8;
    if (has_buytimelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buytimelimit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 itemType = 9;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemtype());
    }
    
    // required int32 itemId = 10;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
    // optional int32 sellFlag = 11;
    if (has_sellflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellflag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemMessage::MergeFrom(const ItemMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_discountnum()) {
      set_discountnum(from.discountnum());
    }
    if (from.has_discountprice()) {
      set_discountprice(from.discountprice());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
    if (from.has_buytimelimit()) {
      set_buytimelimit(from.buytimelimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_sellflag()) {
      set_sellflag(from.sellflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemMessage::CopyFrom(const ItemMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void ItemMessage::Swap(ItemMessage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(discount_, other->discount_);
    std::swap(discountnum_, other->discountnum_);
    std::swap(discountprice_, other->discountprice_);
    std::swap(buycount_, other->buycount_);
    std::swap(buytimelimit_, other->buytimelimit_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(sellflag_, other->sellflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemMessage_descriptor_;
  metadata.reflection = ItemMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestStoreDetailCommand::RequestStoreDetailCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestStoreDetailCommand::InitAsDefaultInstance() {
}

RequestStoreDetailCommand::RequestStoreDetailCommand(const RequestStoreDetailCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestStoreDetailCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStoreDetailCommand::~RequestStoreDetailCommand() {
  SharedDtor();
}

void RequestStoreDetailCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStoreDetailCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStoreDetailCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStoreDetailCommand_descriptor_;
}

const RequestStoreDetailCommand& RequestStoreDetailCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestStoreDetailCommand* RequestStoreDetailCommand::default_instance_ = NULL;

RequestStoreDetailCommand* RequestStoreDetailCommand::New() const {
  return new RequestStoreDetailCommand;
}

void RequestStoreDetailCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestStoreDetailCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestStoreDetailCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestStoreDetailCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestStoreDetailCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStoreDetailCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestStoreDetailCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestStoreDetailCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestStoreDetailCommand::MergeFrom(const RequestStoreDetailCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestStoreDetailCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStoreDetailCommand::CopyFrom(const RequestStoreDetailCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStoreDetailCommand::IsInitialized() const {
  
  return true;
}

void RequestStoreDetailCommand::Swap(RequestStoreDetailCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestStoreDetailCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStoreDetailCommand_descriptor_;
  metadata.reflection = RequestStoreDetailCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseStoreDetailCommand::kItemsFieldNumber;
#endif  // !_MSC_VER

ResponseStoreDetailCommand::ResponseStoreDetailCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseStoreDetailCommand::InitAsDefaultInstance() {
}

ResponseStoreDetailCommand::ResponseStoreDetailCommand(const ResponseStoreDetailCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseStoreDetailCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseStoreDetailCommand::~ResponseStoreDetailCommand() {
  SharedDtor();
}

void ResponseStoreDetailCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseStoreDetailCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseStoreDetailCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStoreDetailCommand_descriptor_;
}

const ResponseStoreDetailCommand& ResponseStoreDetailCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseStoreDetailCommand* ResponseStoreDetailCommand::default_instance_ = NULL;

ResponseStoreDetailCommand* ResponseStoreDetailCommand::New() const {
  return new ResponseStoreDetailCommand;
}

void ResponseStoreDetailCommand::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseStoreDetailCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.ItemMessage items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseStoreDetailCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.ItemMessage items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseStoreDetailCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.ItemMessage items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseStoreDetailCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ItemMessage items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStoreDetailCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseStoreDetailCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseStoreDetailCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseStoreDetailCommand::MergeFrom(const ResponseStoreDetailCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseStoreDetailCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStoreDetailCommand::CopyFrom(const ResponseStoreDetailCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStoreDetailCommand::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseStoreDetailCommand::Swap(ResponseStoreDetailCommand* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseStoreDetailCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseStoreDetailCommand_descriptor_;
  metadata.reflection = ResponseStoreDetailCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestBuyItemCommand::kItemIdFieldNumber;
#endif  // !_MSC_VER

RequestBuyItemCommand::RequestBuyItemCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestBuyItemCommand::InitAsDefaultInstance() {
}

RequestBuyItemCommand::RequestBuyItemCommand(const RequestBuyItemCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestBuyItemCommand::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestBuyItemCommand::~RequestBuyItemCommand() {
  SharedDtor();
}

void RequestBuyItemCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestBuyItemCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestBuyItemCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestBuyItemCommand_descriptor_;
}

const RequestBuyItemCommand& RequestBuyItemCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestBuyItemCommand* RequestBuyItemCommand::default_instance_ = NULL;

RequestBuyItemCommand* RequestBuyItemCommand::New() const {
  return new RequestBuyItemCommand;
}

void RequestBuyItemCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestBuyItemCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestBuyItemCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestBuyItemCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestBuyItemCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestBuyItemCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestBuyItemCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestBuyItemCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestBuyItemCommand::MergeFrom(const RequestBuyItemCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestBuyItemCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBuyItemCommand::CopyFrom(const RequestBuyItemCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBuyItemCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestBuyItemCommand::Swap(RequestBuyItemCommand* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestBuyItemCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestBuyItemCommand_descriptor_;
  metadata.reflection = RequestBuyItemCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseBuyItemCommand::kSuccessFieldNumber;
const int ResponseBuyItemCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ResponseBuyItemCommand::ResponseBuyItemCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseBuyItemCommand::InitAsDefaultInstance() {
}

ResponseBuyItemCommand::ResponseBuyItemCommand(const ResponseBuyItemCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseBuyItemCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseBuyItemCommand::~ResponseBuyItemCommand() {
  SharedDtor();
}

void ResponseBuyItemCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseBuyItemCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseBuyItemCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseBuyItemCommand_descriptor_;
}

const ResponseBuyItemCommand& ResponseBuyItemCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseBuyItemCommand* ResponseBuyItemCommand::default_instance_ = NULL;

ResponseBuyItemCommand* ResponseBuyItemCommand::New() const {
  return new ResponseBuyItemCommand;
}

void ResponseBuyItemCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseBuyItemCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseBuyItemCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseBuyItemCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseBuyItemCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseBuyItemCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseBuyItemCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseBuyItemCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseBuyItemCommand::MergeFrom(const ResponseBuyItemCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseBuyItemCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseBuyItemCommand::CopyFrom(const ResponseBuyItemCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseBuyItemCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseBuyItemCommand::Swap(ResponseBuyItemCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseBuyItemCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseBuyItemCommand_descriptor_;
  metadata.reflection = ResponseBuyItemCommand_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RequestSystemCommand_SystemConfigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSystemCommand_SystemConfigType_descriptor_;
}
bool RequestSystemCommand_SystemConfigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RequestSystemCommand_SystemConfigType RequestSystemCommand::UserLanguage;
const RequestSystemCommand_SystemConfigType RequestSystemCommand::SynergyUID;
const RequestSystemCommand_SystemConfigType RequestSystemCommand::SystemConfigType_MIN;
const RequestSystemCommand_SystemConfigType RequestSystemCommand::SystemConfigType_MAX;
const int RequestSystemCommand::SystemConfigType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RequestSystemCommand::kTypeFieldNumber;
const int RequestSystemCommand::kContentFieldNumber;
#endif  // !_MSC_VER

RequestSystemCommand::RequestSystemCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestSystemCommand::InitAsDefaultInstance() {
}

RequestSystemCommand::RequestSystemCommand(const RequestSystemCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestSystemCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSystemCommand::~RequestSystemCommand() {
  SharedDtor();
}

void RequestSystemCommand::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void RequestSystemCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSystemCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSystemCommand_descriptor_;
}

const RequestSystemCommand& RequestSystemCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestSystemCommand* RequestSystemCommand::default_instance_ = NULL;

RequestSystemCommand* RequestSystemCommand::New() const {
  return new RequestSystemCommand;
}

void RequestSystemCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestSystemCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand.SystemConfigType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::ea::eamobile::nfsmw::protoc::RequestSystemCommand_SystemConfigType_IsValid(value)) {
            set_type(static_cast< ::com::ea::eamobile::nfsmw::protoc::RequestSystemCommand_SystemConfigType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestSystemCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand.SystemConfigType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestSystemCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand.SystemConfigType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestSystemCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand.SystemConfigType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSystemCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestSystemCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestSystemCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestSystemCommand::MergeFrom(const RequestSystemCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestSystemCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSystemCommand::CopyFrom(const RequestSystemCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSystemCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestSystemCommand::Swap(RequestSystemCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestSystemCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSystemCommand_descriptor_;
  metadata.reflection = RequestSystemCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseSystemCommand::kEventOptionFieldNumber;
const int ResponseSystemCommand::kCtaParamFieldNumber;
const int ResponseSystemCommand::kMessageUrlFieldNumber;
const int ResponseSystemCommand::kSpeedFactorFieldNumber;
const int ResponseSystemCommand::kIPSPFailedMessageUrlFieldNumber;
const int ResponseSystemCommand::kRentJaguarUrlFieldNumber;
const int ResponseSystemCommand::kGetJaguarUrlFieldNumber;
const int ResponseSystemCommand::kJaguarInfoUrlFieldNumber;
const int ResponseSystemCommand::kServersFieldNumber;
const int ResponseSystemCommand::kPopMODFieldNumber;
const int ResponseSystemCommand::kEnergyRecoveringStartTimeFieldNumber;
const int ResponseSystemCommand::kEnergyRecoveringPeriodFieldNumber;
const int ResponseSystemCommand::kEnergyRecoveringNumFieldNumber;
const int ResponseSystemCommand::kIpspPurchaseItemCallBackTypeFieldNumber;
const int ResponseSystemCommand::kEnergyMaxNumFieldNumber;
const int ResponseSystemCommand::kNewMODFieldNumber;
#endif  // !_MSC_VER

ResponseSystemCommand::ResponseSystemCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseSystemCommand::InitAsDefaultInstance() {
}

ResponseSystemCommand::ResponseSystemCommand(const ResponseSystemCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseSystemCommand::SharedCtor() {
  _cached_size_ = 0;
  messageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipspfailedmessageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rentjaguarurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getjaguarurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jaguarinfourl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  popmod_ = false;
  energyrecoveringstarttime_ = 0;
  energyrecoveringperiod_ = 0;
  energyrecoveringnum_ = 0;
  ipsppurchaseitemcallbacktype_ = 0;
  energymaxnum_ = 0;
  newmod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSystemCommand::~ResponseSystemCommand() {
  SharedDtor();
}

void ResponseSystemCommand::SharedDtor() {
  if (messageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete messageurl_;
  }
  if (ipspfailedmessageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete ipspfailedmessageurl_;
  }
  if (rentjaguarurl_ != &::google::protobuf::internal::kEmptyString) {
    delete rentjaguarurl_;
  }
  if (getjaguarurl_ != &::google::protobuf::internal::kEmptyString) {
    delete getjaguarurl_;
  }
  if (jaguarinfourl_ != &::google::protobuf::internal::kEmptyString) {
    delete jaguarinfourl_;
  }
  if (this != default_instance_) {
  }
}

void ResponseSystemCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSystemCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSystemCommand_descriptor_;
}

const ResponseSystemCommand& ResponseSystemCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseSystemCommand* ResponseSystemCommand::default_instance_ = NULL;

ResponseSystemCommand* ResponseSystemCommand::New() const {
  return new ResponseSystemCommand;
}

void ResponseSystemCommand::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_messageurl()) {
      if (messageurl_ != &::google::protobuf::internal::kEmptyString) {
        messageurl_->clear();
      }
    }
    if (has_ipspfailedmessageurl()) {
      if (ipspfailedmessageurl_ != &::google::protobuf::internal::kEmptyString) {
        ipspfailedmessageurl_->clear();
      }
    }
    if (has_rentjaguarurl()) {
      if (rentjaguarurl_ != &::google::protobuf::internal::kEmptyString) {
        rentjaguarurl_->clear();
      }
    }
    if (has_getjaguarurl()) {
      if (getjaguarurl_ != &::google::protobuf::internal::kEmptyString) {
        getjaguarurl_->clear();
      }
    }
    if (has_jaguarinfourl()) {
      if (jaguarinfourl_ != &::google::protobuf::internal::kEmptyString) {
        jaguarinfourl_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    popmod_ = false;
    energyrecoveringstarttime_ = 0;
    energyrecoveringperiod_ = 0;
    energyrecoveringnum_ = 0;
    ipsppurchaseitemcallbacktype_ = 0;
    energymaxnum_ = 0;
    newmod_ = 0;
  }
  eventoption_.Clear();
  ctaparam_.Clear();
  speedfactor_.Clear();
  servers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseSystemCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.EventOptionMessage EventOption = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EventOption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventoption()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_EventOption;
        if (input->ExpectTag(16)) goto parse_CtaParam;
        break;
      }
      
      // repeated int32 CtaParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CtaParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ctaparam())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ctaparam())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CtaParam;
        if (input->ExpectTag(26)) goto parse_messageUrl;
        break;
      }
      
      // optional string messageUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageurl().data(), this->messageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_speedFactor;
        break;
      }
      
      // repeated float speedFactor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speedFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_speedfactor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_speedfactor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_speedFactor;
        if (input->ExpectTag(42)) goto parse_IPSPFailedMessageUrl;
        break;
      }
      
      // optional string IPSPFailedMessageUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IPSPFailedMessageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipspfailedmessageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipspfailedmessageurl().data(), this->ipspfailedmessageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rentJaguarUrl;
        break;
      }
      
      // optional string rentJaguarUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rentJaguarUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rentjaguarurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rentjaguarurl().data(), this->rentjaguarurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_getJaguarUrl;
        break;
      }
      
      // optional string getJaguarUrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getJaguarUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_getjaguarurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->getjaguarurl().data(), this->getjaguarurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_jaguarInfoUrl;
        break;
      }
      
      // optional string jaguarInfoUrl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jaguarInfoUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jaguarinfourl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jaguarinfourl().data(), this->jaguarinfourl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_servers;
        break;
      }
      
      // repeated string servers = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_servers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servers(0).data(), this->servers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_servers;
        if (input->ExpectTag(80)) goto parse_popMOD;
        break;
      }
      
      // optional bool popMOD = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_popMOD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &popmod_)));
          set_has_popmod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_energyRecoveringStartTime;
        break;
      }
      
      // optional int32 energyRecoveringStartTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyRecoveringStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energyrecoveringstarttime_)));
          set_has_energyrecoveringstarttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_energyRecoveringPeriod;
        break;
      }
      
      // optional int32 energyRecoveringPeriod = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyRecoveringPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energyrecoveringperiod_)));
          set_has_energyrecoveringperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_energyRecoveringNum;
        break;
      }
      
      // optional int32 energyRecoveringNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyRecoveringNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energyrecoveringnum_)));
          set_has_energyrecoveringnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ipspPurchaseItemCallBackType;
        break;
      }
      
      // optional int32 ipspPurchaseItemCallBackType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ipspPurchaseItemCallBackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipsppurchaseitemcallbacktype_)));
          set_has_ipsppurchaseitemcallbacktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_energyMaxNum;
        break;
      }
      
      // optional int32 energyMaxNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyMaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energymaxnum_)));
          set_has_energymaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_newMOD;
        break;
      }
      
      // optional int32 newMOD = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newMOD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newmod_)));
          set_has_newmod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseSystemCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.EventOptionMessage EventOption = 1;
  for (int i = 0; i < this->eventoption_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->eventoption(i), output);
  }
  
  // repeated int32 CtaParam = 2;
  for (int i = 0; i < this->ctaparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ctaparam(i), output);
  }
  
  // optional string messageUrl = 3;
  if (has_messageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageurl().data(), this->messageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->messageurl(), output);
  }
  
  // repeated float speedFactor = 4;
  for (int i = 0; i < this->speedfactor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->speedfactor(i), output);
  }
  
  // optional string IPSPFailedMessageUrl = 5;
  if (has_ipspfailedmessageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipspfailedmessageurl().data(), this->ipspfailedmessageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ipspfailedmessageurl(), output);
  }
  
  // optional string rentJaguarUrl = 6;
  if (has_rentjaguarurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rentjaguarurl().data(), this->rentjaguarurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rentjaguarurl(), output);
  }
  
  // optional string getJaguarUrl = 7;
  if (has_getjaguarurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->getjaguarurl().data(), this->getjaguarurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->getjaguarurl(), output);
  }
  
  // optional string jaguarInfoUrl = 8;
  if (has_jaguarinfourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jaguarinfourl().data(), this->jaguarinfourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->jaguarinfourl(), output);
  }
  
  // repeated string servers = 9;
  for (int i = 0; i < this->servers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->servers(i).data(), this->servers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->servers(i), output);
  }
  
  // optional bool popMOD = 10;
  if (has_popmod()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->popmod(), output);
  }
  
  // optional int32 energyRecoveringStartTime = 11;
  if (has_energyrecoveringstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->energyrecoveringstarttime(), output);
  }
  
  // optional int32 energyRecoveringPeriod = 12;
  if (has_energyrecoveringperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->energyrecoveringperiod(), output);
  }
  
  // optional int32 energyRecoveringNum = 13;
  if (has_energyrecoveringnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->energyrecoveringnum(), output);
  }
  
  // optional int32 ipspPurchaseItemCallBackType = 14;
  if (has_ipsppurchaseitemcallbacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ipsppurchaseitemcallbacktype(), output);
  }
  
  // optional int32 energyMaxNum = 15;
  if (has_energymaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->energymaxnum(), output);
  }
  
  // optional int32 newMOD = 16;
  if (has_newmod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->newmod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseSystemCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.EventOptionMessage EventOption = 1;
  for (int i = 0; i < this->eventoption_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->eventoption(i), target);
  }
  
  // repeated int32 CtaParam = 2;
  for (int i = 0; i < this->ctaparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ctaparam(i), target);
  }
  
  // optional string messageUrl = 3;
  if (has_messageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageurl().data(), this->messageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messageurl(), target);
  }
  
  // repeated float speedFactor = 4;
  for (int i = 0; i < this->speedfactor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->speedfactor(i), target);
  }
  
  // optional string IPSPFailedMessageUrl = 5;
  if (has_ipspfailedmessageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipspfailedmessageurl().data(), this->ipspfailedmessageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipspfailedmessageurl(), target);
  }
  
  // optional string rentJaguarUrl = 6;
  if (has_rentjaguarurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rentjaguarurl().data(), this->rentjaguarurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rentjaguarurl(), target);
  }
  
  // optional string getJaguarUrl = 7;
  if (has_getjaguarurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->getjaguarurl().data(), this->getjaguarurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->getjaguarurl(), target);
  }
  
  // optional string jaguarInfoUrl = 8;
  if (has_jaguarinfourl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jaguarinfourl().data(), this->jaguarinfourl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->jaguarinfourl(), target);
  }
  
  // repeated string servers = 9;
  for (int i = 0; i < this->servers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servers(i).data(), this->servers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->servers(i), target);
  }
  
  // optional bool popMOD = 10;
  if (has_popmod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->popmod(), target);
  }
  
  // optional int32 energyRecoveringStartTime = 11;
  if (has_energyrecoveringstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->energyrecoveringstarttime(), target);
  }
  
  // optional int32 energyRecoveringPeriod = 12;
  if (has_energyrecoveringperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->energyrecoveringperiod(), target);
  }
  
  // optional int32 energyRecoveringNum = 13;
  if (has_energyrecoveringnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->energyrecoveringnum(), target);
  }
  
  // optional int32 ipspPurchaseItemCallBackType = 14;
  if (has_ipsppurchaseitemcallbacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->ipsppurchaseitemcallbacktype(), target);
  }
  
  // optional int32 energyMaxNum = 15;
  if (has_energymaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->energymaxnum(), target);
  }
  
  // optional int32 newMOD = 16;
  if (has_newmod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->newmod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseSystemCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string messageUrl = 3;
    if (has_messageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageurl());
    }
    
    // optional string IPSPFailedMessageUrl = 5;
    if (has_ipspfailedmessageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipspfailedmessageurl());
    }
    
    // optional string rentJaguarUrl = 6;
    if (has_rentjaguarurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rentjaguarurl());
    }
    
    // optional string getJaguarUrl = 7;
    if (has_getjaguarurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->getjaguarurl());
    }
    
    // optional string jaguarInfoUrl = 8;
    if (has_jaguarinfourl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jaguarinfourl());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool popMOD = 10;
    if (has_popmod()) {
      total_size += 1 + 1;
    }
    
    // optional int32 energyRecoveringStartTime = 11;
    if (has_energyrecoveringstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energyrecoveringstarttime());
    }
    
    // optional int32 energyRecoveringPeriod = 12;
    if (has_energyrecoveringperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energyrecoveringperiod());
    }
    
    // optional int32 energyRecoveringNum = 13;
    if (has_energyrecoveringnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energyrecoveringnum());
    }
    
    // optional int32 ipspPurchaseItemCallBackType = 14;
    if (has_ipsppurchaseitemcallbacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipsppurchaseitemcallbacktype());
    }
    
    // optional int32 energyMaxNum = 15;
    if (has_energymaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energymaxnum());
    }
    
    // optional int32 newMOD = 16;
    if (has_newmod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newmod());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.EventOptionMessage EventOption = 1;
  total_size += 1 * this->eventoption_size();
  for (int i = 0; i < this->eventoption_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventoption(i));
  }
  
  // repeated int32 CtaParam = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ctaparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ctaparam(i));
    }
    total_size += 1 * this->ctaparam_size() + data_size;
  }
  
  // repeated float speedFactor = 4;
  {
    int data_size = 0;
    data_size = 4 * this->speedfactor_size();
    total_size += 1 * this->speedfactor_size() + data_size;
  }
  
  // repeated string servers = 9;
  total_size += 1 * this->servers_size();
  for (int i = 0; i < this->servers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->servers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSystemCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseSystemCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseSystemCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseSystemCommand::MergeFrom(const ResponseSystemCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventoption_.MergeFrom(from.eventoption_);
  ctaparam_.MergeFrom(from.ctaparam_);
  speedfactor_.MergeFrom(from.speedfactor_);
  servers_.MergeFrom(from.servers_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_messageurl()) {
      set_messageurl(from.messageurl());
    }
    if (from.has_ipspfailedmessageurl()) {
      set_ipspfailedmessageurl(from.ipspfailedmessageurl());
    }
    if (from.has_rentjaguarurl()) {
      set_rentjaguarurl(from.rentjaguarurl());
    }
    if (from.has_getjaguarurl()) {
      set_getjaguarurl(from.getjaguarurl());
    }
    if (from.has_jaguarinfourl()) {
      set_jaguarinfourl(from.jaguarinfourl());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_popmod()) {
      set_popmod(from.popmod());
    }
    if (from.has_energyrecoveringstarttime()) {
      set_energyrecoveringstarttime(from.energyrecoveringstarttime());
    }
    if (from.has_energyrecoveringperiod()) {
      set_energyrecoveringperiod(from.energyrecoveringperiod());
    }
    if (from.has_energyrecoveringnum()) {
      set_energyrecoveringnum(from.energyrecoveringnum());
    }
    if (from.has_ipsppurchaseitemcallbacktype()) {
      set_ipsppurchaseitemcallbacktype(from.ipsppurchaseitemcallbacktype());
    }
    if (from.has_energymaxnum()) {
      set_energymaxnum(from.energymaxnum());
    }
    if (from.has_newmod()) {
      set_newmod(from.newmod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseSystemCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSystemCommand::CopyFrom(const ResponseSystemCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSystemCommand::IsInitialized() const {
  
  for (int i = 0; i < eventoption_size(); i++) {
    if (!this->eventoption(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseSystemCommand::Swap(ResponseSystemCommand* other) {
  if (other != this) {
    eventoption_.Swap(&other->eventoption_);
    ctaparam_.Swap(&other->ctaparam_);
    std::swap(messageurl_, other->messageurl_);
    speedfactor_.Swap(&other->speedfactor_);
    std::swap(ipspfailedmessageurl_, other->ipspfailedmessageurl_);
    std::swap(rentjaguarurl_, other->rentjaguarurl_);
    std::swap(getjaguarurl_, other->getjaguarurl_);
    std::swap(jaguarinfourl_, other->jaguarinfourl_);
    servers_.Swap(&other->servers_);
    std::swap(popmod_, other->popmod_);
    std::swap(energyrecoveringstarttime_, other->energyrecoveringstarttime_);
    std::swap(energyrecoveringperiod_, other->energyrecoveringperiod_);
    std::swap(energyrecoveringnum_, other->energyrecoveringnum_);
    std::swap(ipsppurchaseitemcallbacktype_, other->ipsppurchaseitemcallbacktype_);
    std::swap(energymaxnum_, other->energymaxnum_);
    std::swap(newmod_, other->newmod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseSystemCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSystemCommand_descriptor_;
  metadata.reflection = ResponseSystemCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventOptionMessage::kCashRewardFieldNumber;
const int EventOptionMessage::kOpponentCollectionFieldNumber;
const int EventOptionMessage::kRaceEventFieldNumber;
const int EventOptionMessage::kTrafficFlowFieldNumber;
const int EventOptionMessage::kModeIdFieldNumber;
const int EventOptionMessage::kMedalPositionFieldNumber;
const int EventOptionMessage::kFileNameFieldNumber;
const int EventOptionMessage::kMedalScoreFieldNumber;
const int EventOptionMessage::kMedalTimeFieldNumber;
const int EventOptionMessage::kInitialTimeFieldNumber;
const int EventOptionMessage::kPenaltyTimeFieldNumber;
#endif  // !_MSC_VER

EventOptionMessage::EventOptionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventOptionMessage::InitAsDefaultInstance() {
  cashreward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::CashRewardMessage*>(&::com::ea::eamobile::nfsmw::protoc::CashRewardMessage::default_instance());
  opponentcollection_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::OpponentCollectionMessage*>(&::com::ea::eamobile::nfsmw::protoc::OpponentCollectionMessage::default_instance());
  raceevent_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RaceEventMessage*>(&::com::ea::eamobile::nfsmw::protoc::RaceEventMessage::default_instance());
  trafficflow_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::TrafficFlowMessage*>(&::com::ea::eamobile::nfsmw::protoc::TrafficFlowMessage::default_instance());
  medalposition_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::MedalPositionMessage*>(&::com::ea::eamobile::nfsmw::protoc::MedalPositionMessage::default_instance());
  medalscore_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::MedalScoreMessage*>(&::com::ea::eamobile::nfsmw::protoc::MedalScoreMessage::default_instance());
  medaltime_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::MedalTimeMessage*>(&::com::ea::eamobile::nfsmw::protoc::MedalTimeMessage::default_instance());
  initialtime_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::CountdownInitialTimeMessage*>(&::com::ea::eamobile::nfsmw::protoc::CountdownInitialTimeMessage::default_instance());
  penaltytime_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::PenaltyTimeMessage*>(&::com::ea::eamobile::nfsmw::protoc::PenaltyTimeMessage::default_instance());
}

EventOptionMessage::EventOptionMessage(const EventOptionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventOptionMessage::SharedCtor() {
  _cached_size_ = 0;
  cashreward_ = NULL;
  opponentcollection_ = NULL;
  raceevent_ = NULL;
  trafficflow_ = NULL;
  modeid_ = 0;
  medalposition_ = NULL;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  medalscore_ = NULL;
  medaltime_ = NULL;
  initialtime_ = NULL;
  penaltytime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventOptionMessage::~EventOptionMessage() {
  SharedDtor();
}

void EventOptionMessage::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete cashreward_;
    delete opponentcollection_;
    delete raceevent_;
    delete trafficflow_;
    delete medalposition_;
    delete medalscore_;
    delete medaltime_;
    delete initialtime_;
    delete penaltytime_;
  }
}

void EventOptionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventOptionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventOptionMessage_descriptor_;
}

const EventOptionMessage& EventOptionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

EventOptionMessage* EventOptionMessage::default_instance_ = NULL;

EventOptionMessage* EventOptionMessage::New() const {
  return new EventOptionMessage;
}

void EventOptionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cashreward()) {
      if (cashreward_ != NULL) cashreward_->::com::ea::eamobile::nfsmw::protoc::CashRewardMessage::Clear();
    }
    if (has_opponentcollection()) {
      if (opponentcollection_ != NULL) opponentcollection_->::com::ea::eamobile::nfsmw::protoc::OpponentCollectionMessage::Clear();
    }
    if (has_raceevent()) {
      if (raceevent_ != NULL) raceevent_->::com::ea::eamobile::nfsmw::protoc::RaceEventMessage::Clear();
    }
    if (has_trafficflow()) {
      if (trafficflow_ != NULL) trafficflow_->::com::ea::eamobile::nfsmw::protoc::TrafficFlowMessage::Clear();
    }
    modeid_ = 0;
    if (has_medalposition()) {
      if (medalposition_ != NULL) medalposition_->::com::ea::eamobile::nfsmw::protoc::MedalPositionMessage::Clear();
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_medalscore()) {
      if (medalscore_ != NULL) medalscore_->::com::ea::eamobile::nfsmw::protoc::MedalScoreMessage::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_medaltime()) {
      if (medaltime_ != NULL) medaltime_->::com::ea::eamobile::nfsmw::protoc::MedalTimeMessage::Clear();
    }
    if (has_initialtime()) {
      if (initialtime_ != NULL) initialtime_->::com::ea::eamobile::nfsmw::protoc::CountdownInitialTimeMessage::Clear();
    }
    if (has_penaltytime()) {
      if (penaltytime_ != NULL) penaltytime_->::com::ea::eamobile::nfsmw::protoc::PenaltyTimeMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventOptionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.ea.eamobile.nfsmw.protoc.CashRewardMessage cashReward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cashreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opponentCollection;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.OpponentCollectionMessage opponentCollection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opponentCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponentcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_raceEvent;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RaceEventMessage raceEvent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raceevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trafficFlow;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.TrafficFlowMessage trafficFlow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trafficFlow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trafficflow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_modeId;
        break;
      }
      
      // required int32 modeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MedalPosition;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.MedalPositionMessage MedalPosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MedalPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medalposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_FileName;
        break;
      }
      
      // required string FileName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_MedalScore;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.MedalScoreMessage MedalScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MedalScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medalscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_MedalTime;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.MedalTimeMessage MedalTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MedalTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_medaltime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_InitialTime;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.CountdownInitialTimeMessage InitialTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InitialTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initialtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PenaltyTime;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.PenaltyTimeMessage PenaltyTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PenaltyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_penaltytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventOptionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .com.ea.eamobile.nfsmw.protoc.CashRewardMessage cashReward = 1;
  if (has_cashreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cashreward(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.OpponentCollectionMessage opponentCollection = 2;
  if (has_opponentcollection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->opponentcollection(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RaceEventMessage raceEvent = 3;
  if (has_raceevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->raceevent(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.TrafficFlowMessage trafficFlow = 4;
  if (has_trafficflow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trafficflow(), output);
  }
  
  // required int32 modeId = 5;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->modeid(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.MedalPositionMessage MedalPosition = 6;
  if (has_medalposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->medalposition(), output);
  }
  
  // required string FileName = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->filename(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.MedalScoreMessage MedalScore = 8;
  if (has_medalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->medalscore(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.MedalTimeMessage MedalTime = 9;
  if (has_medaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->medaltime(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.CountdownInitialTimeMessage InitialTime = 10;
  if (has_initialtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->initialtime(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.PenaltyTimeMessage PenaltyTime = 11;
  if (has_penaltytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->penaltytime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventOptionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .com.ea.eamobile.nfsmw.protoc.CashRewardMessage cashReward = 1;
  if (has_cashreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cashreward(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.OpponentCollectionMessage opponentCollection = 2;
  if (has_opponentcollection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->opponentcollection(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RaceEventMessage raceEvent = 3;
  if (has_raceevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->raceevent(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.TrafficFlowMessage trafficFlow = 4;
  if (has_trafficflow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->trafficflow(), target);
  }
  
  // required int32 modeId = 5;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->modeid(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.MedalPositionMessage MedalPosition = 6;
  if (has_medalposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->medalposition(), target);
  }
  
  // required string FileName = 7;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.MedalScoreMessage MedalScore = 8;
  if (has_medalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->medalscore(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.MedalTimeMessage MedalTime = 9;
  if (has_medaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->medaltime(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.CountdownInitialTimeMessage InitialTime = 10;
  if (has_initialtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->initialtime(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.PenaltyTimeMessage PenaltyTime = 11;
  if (has_penaltytime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->penaltytime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventOptionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.CashRewardMessage cashReward = 1;
    if (has_cashreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cashreward());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.OpponentCollectionMessage opponentCollection = 2;
    if (has_opponentcollection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponentcollection());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RaceEventMessage raceEvent = 3;
    if (has_raceevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raceevent());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.TrafficFlowMessage trafficFlow = 4;
    if (has_trafficflow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trafficflow());
    }
    
    // required int32 modeId = 5;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.MedalPositionMessage MedalPosition = 6;
    if (has_medalposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medalposition());
    }
    
    // required string FileName = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.MedalScoreMessage MedalScore = 8;
    if (has_medalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medalscore());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.MedalTimeMessage MedalTime = 9;
    if (has_medaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medaltime());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.CountdownInitialTimeMessage InitialTime = 10;
    if (has_initialtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initialtime());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.PenaltyTimeMessage PenaltyTime = 11;
    if (has_penaltytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->penaltytime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventOptionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventOptionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventOptionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventOptionMessage::MergeFrom(const EventOptionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cashreward()) {
      mutable_cashreward()->::com::ea::eamobile::nfsmw::protoc::CashRewardMessage::MergeFrom(from.cashreward());
    }
    if (from.has_opponentcollection()) {
      mutable_opponentcollection()->::com::ea::eamobile::nfsmw::protoc::OpponentCollectionMessage::MergeFrom(from.opponentcollection());
    }
    if (from.has_raceevent()) {
      mutable_raceevent()->::com::ea::eamobile::nfsmw::protoc::RaceEventMessage::MergeFrom(from.raceevent());
    }
    if (from.has_trafficflow()) {
      mutable_trafficflow()->::com::ea::eamobile::nfsmw::protoc::TrafficFlowMessage::MergeFrom(from.trafficflow());
    }
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_medalposition()) {
      mutable_medalposition()->::com::ea::eamobile::nfsmw::protoc::MedalPositionMessage::MergeFrom(from.medalposition());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_medalscore()) {
      mutable_medalscore()->::com::ea::eamobile::nfsmw::protoc::MedalScoreMessage::MergeFrom(from.medalscore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_medaltime()) {
      mutable_medaltime()->::com::ea::eamobile::nfsmw::protoc::MedalTimeMessage::MergeFrom(from.medaltime());
    }
    if (from.has_initialtime()) {
      mutable_initialtime()->::com::ea::eamobile::nfsmw::protoc::CountdownInitialTimeMessage::MergeFrom(from.initialtime());
    }
    if (from.has_penaltytime()) {
      mutable_penaltytime()->::com::ea::eamobile::nfsmw::protoc::PenaltyTimeMessage::MergeFrom(from.penaltytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventOptionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventOptionMessage::CopyFrom(const EventOptionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventOptionMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000050) != 0x00000050) return false;
  
  return true;
}

void EventOptionMessage::Swap(EventOptionMessage* other) {
  if (other != this) {
    std::swap(cashreward_, other->cashreward_);
    std::swap(opponentcollection_, other->opponentcollection_);
    std::swap(raceevent_, other->raceevent_);
    std::swap(trafficflow_, other->trafficflow_);
    std::swap(modeid_, other->modeid_);
    std::swap(medalposition_, other->medalposition_);
    std::swap(filename_, other->filename_);
    std::swap(medalscore_, other->medalscore_);
    std::swap(medaltime_, other->medaltime_);
    std::swap(initialtime_, other->initialtime_);
    std::swap(penaltytime_, other->penaltytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventOptionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventOptionMessage_descriptor_;
  metadata.reflection = EventOptionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CashRewardMessage::kBronzeFieldNumber;
const int CashRewardMessage::kSilverFieldNumber;
const int CashRewardMessage::kGoldFieldNumber;
#endif  // !_MSC_VER

CashRewardMessage::CashRewardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CashRewardMessage::InitAsDefaultInstance() {
}

CashRewardMessage::CashRewardMessage(const CashRewardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CashRewardMessage::SharedCtor() {
  _cached_size_ = 0;
  bronze_ = 0;
  silver_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CashRewardMessage::~CashRewardMessage() {
  SharedDtor();
}

void CashRewardMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CashRewardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashRewardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashRewardMessage_descriptor_;
}

const CashRewardMessage& CashRewardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

CashRewardMessage* CashRewardMessage::default_instance_ = NULL;

CashRewardMessage* CashRewardMessage::New() const {
  return new CashRewardMessage;
}

void CashRewardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bronze_ = 0;
    silver_ = 0;
    gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CashRewardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bronze = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bronze_)));
          set_has_bronze();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_silver;
        break;
      }
      
      // optional int32 silver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &silver_)));
          set_has_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }
      
      // optional int32 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CashRewardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bronze = 1;
  if (has_bronze()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bronze(), output);
  }
  
  // optional int32 silver = 2;
  if (has_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->silver(), output);
  }
  
  // optional int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CashRewardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bronze = 1;
  if (has_bronze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bronze(), target);
  }
  
  // optional int32 silver = 2;
  if (has_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->silver(), target);
  }
  
  // optional int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CashRewardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bronze = 1;
    if (has_bronze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bronze());
    }
    
    // optional int32 silver = 2;
    if (has_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->silver());
    }
    
    // optional int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CashRewardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CashRewardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CashRewardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CashRewardMessage::MergeFrom(const CashRewardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bronze()) {
      set_bronze(from.bronze());
    }
    if (from.has_silver()) {
      set_silver(from.silver());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CashRewardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CashRewardMessage::CopyFrom(const CashRewardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CashRewardMessage::IsInitialized() const {
  
  return true;
}

void CashRewardMessage::Swap(CashRewardMessage* other) {
  if (other != this) {
    std::swap(bronze_, other->bronze_);
    std::swap(silver_, other->silver_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CashRewardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashRewardMessage_descriptor_;
  metadata.reflection = CashRewardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedalPositionMessage::kPositionBronzeFieldNumber;
const int MedalPositionMessage::kPositionSilverFieldNumber;
const int MedalPositionMessage::kPositionGoldFieldNumber;
#endif  // !_MSC_VER

MedalPositionMessage::MedalPositionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedalPositionMessage::InitAsDefaultInstance() {
}

MedalPositionMessage::MedalPositionMessage(const MedalPositionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedalPositionMessage::SharedCtor() {
  _cached_size_ = 0;
  positionbronze_ = 0;
  positionsilver_ = 0;
  positiongold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedalPositionMessage::~MedalPositionMessage() {
  SharedDtor();
}

void MedalPositionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedalPositionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedalPositionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedalPositionMessage_descriptor_;
}

const MedalPositionMessage& MedalPositionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

MedalPositionMessage* MedalPositionMessage::default_instance_ = NULL;

MedalPositionMessage* MedalPositionMessage::New() const {
  return new MedalPositionMessage;
}

void MedalPositionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    positionbronze_ = 0;
    positionsilver_ = 0;
    positiongold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedalPositionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PositionBronze = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionbronze_)));
          set_has_positionbronze();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PositionSilver;
        break;
      }
      
      // optional int32 PositionSilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PositionSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionsilver_)));
          set_has_positionsilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PositionGold;
        break;
      }
      
      // optional int32 PositionGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PositionGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiongold_)));
          set_has_positiongold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedalPositionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PositionBronze = 1;
  if (has_positionbronze()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->positionbronze(), output);
  }
  
  // optional int32 PositionSilver = 2;
  if (has_positionsilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->positionsilver(), output);
  }
  
  // optional int32 PositionGold = 3;
  if (has_positiongold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->positiongold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedalPositionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PositionBronze = 1;
  if (has_positionbronze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->positionbronze(), target);
  }
  
  // optional int32 PositionSilver = 2;
  if (has_positionsilver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->positionsilver(), target);
  }
  
  // optional int32 PositionGold = 3;
  if (has_positiongold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->positiongold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedalPositionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PositionBronze = 1;
    if (has_positionbronze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionbronze());
    }
    
    // optional int32 PositionSilver = 2;
    if (has_positionsilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionsilver());
    }
    
    // optional int32 PositionGold = 3;
    if (has_positiongold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiongold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedalPositionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedalPositionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedalPositionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedalPositionMessage::MergeFrom(const MedalPositionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positionbronze()) {
      set_positionbronze(from.positionbronze());
    }
    if (from.has_positionsilver()) {
      set_positionsilver(from.positionsilver());
    }
    if (from.has_positiongold()) {
      set_positiongold(from.positiongold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedalPositionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedalPositionMessage::CopyFrom(const MedalPositionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedalPositionMessage::IsInitialized() const {
  
  return true;
}

void MedalPositionMessage::Swap(MedalPositionMessage* other) {
  if (other != this) {
    std::swap(positionbronze_, other->positionbronze_);
    std::swap(positionsilver_, other->positionsilver_);
    std::swap(positiongold_, other->positiongold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedalPositionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedalPositionMessage_descriptor_;
  metadata.reflection = MedalPositionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedalScoreMessage::kScoreBronzeFieldNumber;
const int MedalScoreMessage::kScoreSilverFieldNumber;
const int MedalScoreMessage::kScoreGoldFieldNumber;
#endif  // !_MSC_VER

MedalScoreMessage::MedalScoreMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedalScoreMessage::InitAsDefaultInstance() {
}

MedalScoreMessage::MedalScoreMessage(const MedalScoreMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedalScoreMessage::SharedCtor() {
  _cached_size_ = 0;
  scorebronze_ = 0;
  scoresilver_ = 0;
  scoregold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedalScoreMessage::~MedalScoreMessage() {
  SharedDtor();
}

void MedalScoreMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedalScoreMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedalScoreMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedalScoreMessage_descriptor_;
}

const MedalScoreMessage& MedalScoreMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

MedalScoreMessage* MedalScoreMessage::default_instance_ = NULL;

MedalScoreMessage* MedalScoreMessage::New() const {
  return new MedalScoreMessage;
}

void MedalScoreMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scorebronze_ = 0;
    scoresilver_ = 0;
    scoregold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedalScoreMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ScoreBronze = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorebronze_)));
          set_has_scorebronze();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ScoreSilver;
        break;
      }
      
      // optional int32 ScoreSilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScoreSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoresilver_)));
          set_has_scoresilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ScoreGold;
        break;
      }
      
      // optional int32 ScoreGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScoreGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoregold_)));
          set_has_scoregold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedalScoreMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ScoreBronze = 1;
  if (has_scorebronze()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scorebronze(), output);
  }
  
  // optional int32 ScoreSilver = 2;
  if (has_scoresilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scoresilver(), output);
  }
  
  // optional int32 ScoreGold = 3;
  if (has_scoregold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scoregold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedalScoreMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ScoreBronze = 1;
  if (has_scorebronze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scorebronze(), target);
  }
  
  // optional int32 ScoreSilver = 2;
  if (has_scoresilver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scoresilver(), target);
  }
  
  // optional int32 ScoreGold = 3;
  if (has_scoregold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scoregold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedalScoreMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ScoreBronze = 1;
    if (has_scorebronze()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scorebronze());
    }
    
    // optional int32 ScoreSilver = 2;
    if (has_scoresilver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoresilver());
    }
    
    // optional int32 ScoreGold = 3;
    if (has_scoregold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoregold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedalScoreMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedalScoreMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedalScoreMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedalScoreMessage::MergeFrom(const MedalScoreMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scorebronze()) {
      set_scorebronze(from.scorebronze());
    }
    if (from.has_scoresilver()) {
      set_scoresilver(from.scoresilver());
    }
    if (from.has_scoregold()) {
      set_scoregold(from.scoregold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedalScoreMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedalScoreMessage::CopyFrom(const MedalScoreMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedalScoreMessage::IsInitialized() const {
  
  return true;
}

void MedalScoreMessage::Swap(MedalScoreMessage* other) {
  if (other != this) {
    std::swap(scorebronze_, other->scorebronze_);
    std::swap(scoresilver_, other->scoresilver_);
    std::swap(scoregold_, other->scoregold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedalScoreMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedalScoreMessage_descriptor_;
  metadata.reflection = MedalScoreMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedalTimeMessage::kTimeBronzeFieldNumber;
const int MedalTimeMessage::kTimeSilverFieldNumber;
const int MedalTimeMessage::kTimeGoldFieldNumber;
#endif  // !_MSC_VER

MedalTimeMessage::MedalTimeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MedalTimeMessage::InitAsDefaultInstance() {
}

MedalTimeMessage::MedalTimeMessage(const MedalTimeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MedalTimeMessage::SharedCtor() {
  _cached_size_ = 0;
  timebronze_ = 0;
  timesilver_ = 0;
  timegold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedalTimeMessage::~MedalTimeMessage() {
  SharedDtor();
}

void MedalTimeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MedalTimeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MedalTimeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedalTimeMessage_descriptor_;
}

const MedalTimeMessage& MedalTimeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

MedalTimeMessage* MedalTimeMessage::default_instance_ = NULL;

MedalTimeMessage* MedalTimeMessage::New() const {
  return new MedalTimeMessage;
}

void MedalTimeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timebronze_ = 0;
    timesilver_ = 0;
    timegold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedalTimeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float TimeBronze = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timebronze_)));
          set_has_timebronze();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_TimeSilver;
        break;
      }
      
      // optional float TimeSilver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TimeSilver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timesilver_)));
          set_has_timesilver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_TimeGold;
        break;
      }
      
      // optional float TimeGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_TimeGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timegold_)));
          set_has_timegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedalTimeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float TimeBronze = 1;
  if (has_timebronze()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->timebronze(), output);
  }
  
  // optional float TimeSilver = 2;
  if (has_timesilver()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->timesilver(), output);
  }
  
  // optional float TimeGold = 3;
  if (has_timegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->timegold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedalTimeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float TimeBronze = 1;
  if (has_timebronze()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->timebronze(), target);
  }
  
  // optional float TimeSilver = 2;
  if (has_timesilver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->timesilver(), target);
  }
  
  // optional float TimeGold = 3;
  if (has_timegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->timegold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedalTimeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float TimeBronze = 1;
    if (has_timebronze()) {
      total_size += 1 + 4;
    }
    
    // optional float TimeSilver = 2;
    if (has_timesilver()) {
      total_size += 1 + 4;
    }
    
    // optional float TimeGold = 3;
    if (has_timegold()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MedalTimeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedalTimeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedalTimeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedalTimeMessage::MergeFrom(const MedalTimeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timebronze()) {
      set_timebronze(from.timebronze());
    }
    if (from.has_timesilver()) {
      set_timesilver(from.timesilver());
    }
    if (from.has_timegold()) {
      set_timegold(from.timegold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedalTimeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedalTimeMessage::CopyFrom(const MedalTimeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedalTimeMessage::IsInitialized() const {
  
  return true;
}

void MedalTimeMessage::Swap(MedalTimeMessage* other) {
  if (other != this) {
    std::swap(timebronze_, other->timebronze_);
    std::swap(timesilver_, other->timesilver_);
    std::swap(timegold_, other->timegold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedalTimeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedalTimeMessage_descriptor_;
  metadata.reflection = MedalTimeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountdownInitialTimeMessage::kInitialTimeFieldNumber;
#endif  // !_MSC_VER

CountdownInitialTimeMessage::CountdownInitialTimeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountdownInitialTimeMessage::InitAsDefaultInstance() {
}

CountdownInitialTimeMessage::CountdownInitialTimeMessage(const CountdownInitialTimeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountdownInitialTimeMessage::SharedCtor() {
  _cached_size_ = 0;
  initialtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountdownInitialTimeMessage::~CountdownInitialTimeMessage() {
  SharedDtor();
}

void CountdownInitialTimeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountdownInitialTimeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountdownInitialTimeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountdownInitialTimeMessage_descriptor_;
}

const CountdownInitialTimeMessage& CountdownInitialTimeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

CountdownInitialTimeMessage* CountdownInitialTimeMessage::default_instance_ = NULL;

CountdownInitialTimeMessage* CountdownInitialTimeMessage::New() const {
  return new CountdownInitialTimeMessage;
}

void CountdownInitialTimeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    initialtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountdownInitialTimeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float InitialTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initialtime_)));
          set_has_initialtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountdownInitialTimeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float InitialTime = 1;
  if (has_initialtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->initialtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountdownInitialTimeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float InitialTime = 1;
  if (has_initialtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->initialtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountdownInitialTimeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float InitialTime = 1;
    if (has_initialtime()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountdownInitialTimeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountdownInitialTimeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountdownInitialTimeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountdownInitialTimeMessage::MergeFrom(const CountdownInitialTimeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initialtime()) {
      set_initialtime(from.initialtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountdownInitialTimeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountdownInitialTimeMessage::CopyFrom(const CountdownInitialTimeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountdownInitialTimeMessage::IsInitialized() const {
  
  return true;
}

void CountdownInitialTimeMessage::Swap(CountdownInitialTimeMessage* other) {
  if (other != this) {
    std::swap(initialtime_, other->initialtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountdownInitialTimeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountdownInitialTimeMessage_descriptor_;
  metadata.reflection = CountdownInitialTimeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PenaltyTimeMessage::kMaximumTimeFieldNumber;
#endif  // !_MSC_VER

PenaltyTimeMessage::PenaltyTimeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PenaltyTimeMessage::InitAsDefaultInstance() {
}

PenaltyTimeMessage::PenaltyTimeMessage(const PenaltyTimeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PenaltyTimeMessage::SharedCtor() {
  _cached_size_ = 0;
  maximumtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PenaltyTimeMessage::~PenaltyTimeMessage() {
  SharedDtor();
}

void PenaltyTimeMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PenaltyTimeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PenaltyTimeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PenaltyTimeMessage_descriptor_;
}

const PenaltyTimeMessage& PenaltyTimeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

PenaltyTimeMessage* PenaltyTimeMessage::default_instance_ = NULL;

PenaltyTimeMessage* PenaltyTimeMessage::New() const {
  return new PenaltyTimeMessage;
}

void PenaltyTimeMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maximumtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PenaltyTimeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float MaximumTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maximumtime_)));
          set_has_maximumtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PenaltyTimeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float MaximumTime = 1;
  if (has_maximumtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->maximumtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PenaltyTimeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float MaximumTime = 1;
  if (has_maximumtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->maximumtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PenaltyTimeMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float MaximumTime = 1;
    if (has_maximumtime()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PenaltyTimeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PenaltyTimeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PenaltyTimeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PenaltyTimeMessage::MergeFrom(const PenaltyTimeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maximumtime()) {
      set_maximumtime(from.maximumtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PenaltyTimeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PenaltyTimeMessage::CopyFrom(const PenaltyTimeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PenaltyTimeMessage::IsInitialized() const {
  
  return true;
}

void PenaltyTimeMessage::Swap(PenaltyTimeMessage* other) {
  if (other != this) {
    std::swap(maximumtime_, other->maximumtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PenaltyTimeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PenaltyTimeMessage_descriptor_;
  metadata.reflection = PenaltyTimeMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpponentCollectionMessage::kOpponentFieldNumber;
#endif  // !_MSC_VER

OpponentCollectionMessage::OpponentCollectionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpponentCollectionMessage::InitAsDefaultInstance() {
}

OpponentCollectionMessage::OpponentCollectionMessage(const OpponentCollectionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpponentCollectionMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpponentCollectionMessage::~OpponentCollectionMessage() {
  SharedDtor();
}

void OpponentCollectionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpponentCollectionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpponentCollectionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpponentCollectionMessage_descriptor_;
}

const OpponentCollectionMessage& OpponentCollectionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

OpponentCollectionMessage* OpponentCollectionMessage::default_instance_ = NULL;

OpponentCollectionMessage* OpponentCollectionMessage::New() const {
  return new OpponentCollectionMessage;
}

void OpponentCollectionMessage::Clear() {
  opponent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpponentCollectionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.OpponentMessage opponent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opponent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opponent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_opponent;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpponentCollectionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.OpponentMessage opponent = 1;
  for (int i = 0; i < this->opponent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opponent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpponentCollectionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.OpponentMessage opponent = 1;
  for (int i = 0; i < this->opponent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opponent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpponentCollectionMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.OpponentMessage opponent = 1;
  total_size += 1 * this->opponent_size();
  for (int i = 0; i < this->opponent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opponent(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpponentCollectionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpponentCollectionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpponentCollectionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpponentCollectionMessage::MergeFrom(const OpponentCollectionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  opponent_.MergeFrom(from.opponent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpponentCollectionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpponentCollectionMessage::CopyFrom(const OpponentCollectionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpponentCollectionMessage::IsInitialized() const {
  
  return true;
}

void OpponentCollectionMessage::Swap(OpponentCollectionMessage* other) {
  if (other != this) {
    opponent_.Swap(&other->opponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpponentCollectionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpponentCollectionMessage_descriptor_;
  metadata.reflection = OpponentCollectionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpponentMessage::kDriverNameFieldNumber;
const int OpponentMessage::kCarDescriptionNameFieldNumber;
const int OpponentMessage::kColourIndexFieldNumber;
const int OpponentMessage::kStationaryFieldNumber;
const int OpponentMessage::kAiSettingsFieldNumber;
#endif  // !_MSC_VER

OpponentMessage::OpponentMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpponentMessage::InitAsDefaultInstance() {
  aisettings_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::AiSettingsMessage*>(&::com::ea::eamobile::nfsmw::protoc::AiSettingsMessage::default_instance());
}

OpponentMessage::OpponentMessage(const OpponentMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpponentMessage::SharedCtor() {
  _cached_size_ = 0;
  drivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cardescriptionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colourindex_ = 0;
  stationary_ = false;
  aisettings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpponentMessage::~OpponentMessage() {
  SharedDtor();
}

void OpponentMessage::SharedDtor() {
  if (drivername_ != &::google::protobuf::internal::kEmptyString) {
    delete drivername_;
  }
  if (cardescriptionname_ != &::google::protobuf::internal::kEmptyString) {
    delete cardescriptionname_;
  }
  if (this != default_instance_) {
    delete aisettings_;
  }
}

void OpponentMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpponentMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpponentMessage_descriptor_;
}

const OpponentMessage& OpponentMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

OpponentMessage* OpponentMessage::default_instance_ = NULL;

OpponentMessage* OpponentMessage::New() const {
  return new OpponentMessage;
}

void OpponentMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_drivername()) {
      if (drivername_ != &::google::protobuf::internal::kEmptyString) {
        drivername_->clear();
      }
    }
    if (has_cardescriptionname()) {
      if (cardescriptionname_ != &::google::protobuf::internal::kEmptyString) {
        cardescriptionname_->clear();
      }
    }
    colourindex_ = 0;
    stationary_ = false;
    if (has_aisettings()) {
      if (aisettings_ != NULL) aisettings_->::com::ea::eamobile::nfsmw::protoc::AiSettingsMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpponentMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string driverName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drivername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->drivername().data(), this->drivername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carDescriptionName;
        break;
      }
      
      // optional string carDescriptionName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carDescriptionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cardescriptionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cardescriptionname().data(), this->cardescriptionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_colourIndex;
        break;
      }
      
      // optional int32 colourIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colourIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colourindex_)));
          set_has_colourindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stationary;
        break;
      }
      
      // optional bool stationary = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stationary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stationary_)));
          set_has_stationary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_aiSettings;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.AiSettingsMessage aiSettings = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aiSettings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aisettings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpponentMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string driverName = 1;
  if (has_drivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->drivername().data(), this->drivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->drivername(), output);
  }
  
  // optional string carDescriptionName = 2;
  if (has_cardescriptionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardescriptionname().data(), this->cardescriptionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cardescriptionname(), output);
  }
  
  // optional int32 colourIndex = 3;
  if (has_colourindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->colourindex(), output);
  }
  
  // optional bool stationary = 4;
  if (has_stationary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stationary(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.AiSettingsMessage aiSettings = 5;
  if (has_aisettings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->aisettings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpponentMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string driverName = 1;
  if (has_drivername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->drivername().data(), this->drivername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->drivername(), target);
  }
  
  // optional string carDescriptionName = 2;
  if (has_cardescriptionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cardescriptionname().data(), this->cardescriptionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cardescriptionname(), target);
  }
  
  // optional int32 colourIndex = 3;
  if (has_colourindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->colourindex(), target);
  }
  
  // optional bool stationary = 4;
  if (has_stationary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stationary(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.AiSettingsMessage aiSettings = 5;
  if (has_aisettings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->aisettings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpponentMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string driverName = 1;
    if (has_drivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->drivername());
    }
    
    // optional string carDescriptionName = 2;
    if (has_cardescriptionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cardescriptionname());
    }
    
    // optional int32 colourIndex = 3;
    if (has_colourindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colourindex());
    }
    
    // optional bool stationary = 4;
    if (has_stationary()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.AiSettingsMessage aiSettings = 5;
    if (has_aisettings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aisettings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpponentMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpponentMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpponentMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpponentMessage::MergeFrom(const OpponentMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drivername()) {
      set_drivername(from.drivername());
    }
    if (from.has_cardescriptionname()) {
      set_cardescriptionname(from.cardescriptionname());
    }
    if (from.has_colourindex()) {
      set_colourindex(from.colourindex());
    }
    if (from.has_stationary()) {
      set_stationary(from.stationary());
    }
    if (from.has_aisettings()) {
      mutable_aisettings()->::com::ea::eamobile::nfsmw::protoc::AiSettingsMessage::MergeFrom(from.aisettings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpponentMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpponentMessage::CopyFrom(const OpponentMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpponentMessage::IsInitialized() const {
  
  return true;
}

void OpponentMessage::Swap(OpponentMessage* other) {
  if (other != this) {
    std::swap(drivername_, other->drivername_);
    std::swap(cardescriptionname_, other->cardescriptionname_);
    std::swap(colourindex_, other->colourindex_);
    std::swap(stationary_, other->stationary_);
    std::swap(aisettings_, other->aisettings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpponentMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpponentMessage_descriptor_;
  metadata.reflection = OpponentMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AiSettingsMessage::kSpeedFactorFieldNumber;
const int AiSettingsMessage::kCorneringFactorFieldNumber;
const int AiSettingsMessage::kRacingLineScaleFieldNumber;
const int AiSettingsMessage::kRubberBandingTweaksToUseFieldNumber;
const int AiSettingsMessage::kRubberBandingDifficultyFieldNumber;
const int AiSettingsMessage::kRubberBandingTargetDifficultyFieldNumber;
const int AiSettingsMessage::kPathfindingSkillFieldNumber;
const int AiSettingsMessage::kNitroSkillFieldNumber;
const int AiSettingsMessage::kMaxHealthFieldNumber;
#endif  // !_MSC_VER

AiSettingsMessage::AiSettingsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AiSettingsMessage::InitAsDefaultInstance() {
}

AiSettingsMessage::AiSettingsMessage(const AiSettingsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AiSettingsMessage::SharedCtor() {
  _cached_size_ = 0;
  speedfactor_ = 0;
  corneringfactor_ = 0;
  racinglinescale_ = 0;
  rubberbandingtweakstouse_ = 0;
  rubberbandingdifficulty_ = 0;
  rubberbandingtargetdifficulty_ = 0;
  pathfindingskill_ = 0;
  nitroskill_ = 0;
  maxhealth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AiSettingsMessage::~AiSettingsMessage() {
  SharedDtor();
}

void AiSettingsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AiSettingsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AiSettingsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AiSettingsMessage_descriptor_;
}

const AiSettingsMessage& AiSettingsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

AiSettingsMessage* AiSettingsMessage::default_instance_ = NULL;

AiSettingsMessage* AiSettingsMessage::New() const {
  return new AiSettingsMessage;
}

void AiSettingsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    speedfactor_ = 0;
    corneringfactor_ = 0;
    racinglinescale_ = 0;
    rubberbandingtweakstouse_ = 0;
    rubberbandingdifficulty_ = 0;
    rubberbandingtargetdifficulty_ = 0;
    pathfindingskill_ = 0;
    nitroskill_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxhealth_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AiSettingsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float speedFactor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedfactor_)));
          set_has_speedfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_corneringFactor;
        break;
      }
      
      // optional float corneringFactor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_corneringFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &corneringfactor_)));
          set_has_corneringfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_racingLineScale;
        break;
      }
      
      // optional float racingLineScale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_racingLineScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &racinglinescale_)));
          set_has_racinglinescale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rubberBandingTweaksToUse;
        break;
      }
      
      // optional int32 rubberBandingTweaksToUse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rubberBandingTweaksToUse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rubberbandingtweakstouse_)));
          set_has_rubberbandingtweakstouse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rubberBandingDifficulty;
        break;
      }
      
      // optional float rubberBandingDifficulty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rubberBandingDifficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rubberbandingdifficulty_)));
          set_has_rubberbandingdifficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rubberBandingTargetDifficulty;
        break;
      }
      
      // optional float rubberBandingTargetDifficulty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rubberBandingTargetDifficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rubberbandingtargetdifficulty_)));
          set_has_rubberbandingtargetdifficulty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_pathfindingSkill;
        break;
      }
      
      // optional float pathfindingSkill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pathfindingSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pathfindingskill_)));
          set_has_pathfindingskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_nitroSkill;
        break;
      }
      
      // optional float nitroSkill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nitroSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nitroskill_)));
          set_has_nitroskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_maxHealth;
        break;
      }
      
      // optional float maxHealth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxHealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxhealth_)));
          set_has_maxhealth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AiSettingsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float speedFactor = 1;
  if (has_speedfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->speedfactor(), output);
  }
  
  // optional float corneringFactor = 2;
  if (has_corneringfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->corneringfactor(), output);
  }
  
  // optional float racingLineScale = 3;
  if (has_racinglinescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->racinglinescale(), output);
  }
  
  // optional int32 rubberBandingTweaksToUse = 4;
  if (has_rubberbandingtweakstouse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rubberbandingtweakstouse(), output);
  }
  
  // optional float rubberBandingDifficulty = 5;
  if (has_rubberbandingdifficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rubberbandingdifficulty(), output);
  }
  
  // optional float rubberBandingTargetDifficulty = 6;
  if (has_rubberbandingtargetdifficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rubberbandingtargetdifficulty(), output);
  }
  
  // optional float pathfindingSkill = 7;
  if (has_pathfindingskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pathfindingskill(), output);
  }
  
  // optional float nitroSkill = 8;
  if (has_nitroskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->nitroskill(), output);
  }
  
  // optional float maxHealth = 9;
  if (has_maxhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->maxhealth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AiSettingsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float speedFactor = 1;
  if (has_speedfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->speedfactor(), target);
  }
  
  // optional float corneringFactor = 2;
  if (has_corneringfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->corneringfactor(), target);
  }
  
  // optional float racingLineScale = 3;
  if (has_racinglinescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->racinglinescale(), target);
  }
  
  // optional int32 rubberBandingTweaksToUse = 4;
  if (has_rubberbandingtweakstouse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rubberbandingtweakstouse(), target);
  }
  
  // optional float rubberBandingDifficulty = 5;
  if (has_rubberbandingdifficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rubberbandingdifficulty(), target);
  }
  
  // optional float rubberBandingTargetDifficulty = 6;
  if (has_rubberbandingtargetdifficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rubberbandingtargetdifficulty(), target);
  }
  
  // optional float pathfindingSkill = 7;
  if (has_pathfindingskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pathfindingskill(), target);
  }
  
  // optional float nitroSkill = 8;
  if (has_nitroskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->nitroskill(), target);
  }
  
  // optional float maxHealth = 9;
  if (has_maxhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->maxhealth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AiSettingsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float speedFactor = 1;
    if (has_speedfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float corneringFactor = 2;
    if (has_corneringfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float racingLineScale = 3;
    if (has_racinglinescale()) {
      total_size += 1 + 4;
    }
    
    // optional int32 rubberBandingTweaksToUse = 4;
    if (has_rubberbandingtweakstouse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rubberbandingtweakstouse());
    }
    
    // optional float rubberBandingDifficulty = 5;
    if (has_rubberbandingdifficulty()) {
      total_size += 1 + 4;
    }
    
    // optional float rubberBandingTargetDifficulty = 6;
    if (has_rubberbandingtargetdifficulty()) {
      total_size += 1 + 4;
    }
    
    // optional float pathfindingSkill = 7;
    if (has_pathfindingskill()) {
      total_size += 1 + 4;
    }
    
    // optional float nitroSkill = 8;
    if (has_nitroskill()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float maxHealth = 9;
    if (has_maxhealth()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AiSettingsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AiSettingsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AiSettingsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AiSettingsMessage::MergeFrom(const AiSettingsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speedfactor()) {
      set_speedfactor(from.speedfactor());
    }
    if (from.has_corneringfactor()) {
      set_corneringfactor(from.corneringfactor());
    }
    if (from.has_racinglinescale()) {
      set_racinglinescale(from.racinglinescale());
    }
    if (from.has_rubberbandingtweakstouse()) {
      set_rubberbandingtweakstouse(from.rubberbandingtweakstouse());
    }
    if (from.has_rubberbandingdifficulty()) {
      set_rubberbandingdifficulty(from.rubberbandingdifficulty());
    }
    if (from.has_rubberbandingtargetdifficulty()) {
      set_rubberbandingtargetdifficulty(from.rubberbandingtargetdifficulty());
    }
    if (from.has_pathfindingskill()) {
      set_pathfindingskill(from.pathfindingskill());
    }
    if (from.has_nitroskill()) {
      set_nitroskill(from.nitroskill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxhealth()) {
      set_maxhealth(from.maxhealth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AiSettingsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AiSettingsMessage::CopyFrom(const AiSettingsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AiSettingsMessage::IsInitialized() const {
  
  return true;
}

void AiSettingsMessage::Swap(AiSettingsMessage* other) {
  if (other != this) {
    std::swap(speedfactor_, other->speedfactor_);
    std::swap(corneringfactor_, other->corneringfactor_);
    std::swap(racinglinescale_, other->racinglinescale_);
    std::swap(rubberbandingtweakstouse_, other->rubberbandingtweakstouse_);
    std::swap(rubberbandingdifficulty_, other->rubberbandingdifficulty_);
    std::swap(rubberbandingtargetdifficulty_, other->rubberbandingtargetdifficulty_);
    std::swap(pathfindingskill_, other->pathfindingskill_);
    std::swap(nitroskill_, other->nitroskill_);
    std::swap(maxhealth_, other->maxhealth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AiSettingsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AiSettingsMessage_descriptor_;
  metadata.reflection = AiSettingsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceEventMessage::kRaceTypeFieldNumber;
const int RaceEventMessage::kRaceFSMPrefabOverrideFieldNumber;
const int RaceEventMessage::kCarRestrictionFieldNumber;
const int RaceEventMessage::kTrackNameFieldNumber;
const int RaceEventMessage::kNameFieldNumber;
const int RaceEventMessage::kLocationFieldNumber;
const int RaceEventMessage::kBlacklistEventFieldNumber;
const int RaceEventMessage::kClassRestrictionFieldNumber;
const int RaceEventMessage::kEnvironmentPrefabFieldNumber;
const int RaceEventMessage::kTrafficCarCountFieldNumber;
const int RaceEventMessage::kOpenWorldTrackFieldNumber;
const int RaceEventMessage::kAutoLogIdFieldNumber;
const int RaceEventMessage::kPursuitTypeFieldNumber;
const int RaceEventMessage::kStartLineNoSpawnZoneFieldNumber;
const int RaceEventMessage::kFinishLineNoSpawnZoneFieldNumber;
const int RaceEventMessage::kSpawnDistanceFieldNumber;
const int RaceEventMessage::kStartLineFieldNumber;
const int RaceEventMessage::kFinishLineFieldNumber;
const int RaceEventMessage::kEndOfTrackFieldNumber;
const int RaceEventMessage::kCheckpointCollectionFieldNumber;
#endif  // !_MSC_VER

RaceEventMessage::RaceEventMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceEventMessage::InitAsDefaultInstance() {
}

RaceEventMessage::RaceEventMessage(const RaceEventMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceEventMessage::SharedCtor() {
  _cached_size_ = 0;
  racetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  racefsmprefaboverride_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carrestriction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trackname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blacklistevent_ = false;
  classrestriction_ = 0;
  environmentprefab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trafficcarcount_ = 0;
  openworldtrack_ = false;
  autologid_ = 0;
  pursuittype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startlinenospawnzone_ = 0;
  finishlinenospawnzone_ = 0;
  spawndistance_ = 0;
  startline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finishline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endoftrack_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checkpointcollection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceEventMessage::~RaceEventMessage() {
  SharedDtor();
}

void RaceEventMessage::SharedDtor() {
  if (racetype_ != &::google::protobuf::internal::kEmptyString) {
    delete racetype_;
  }
  if (racefsmprefaboverride_ != &::google::protobuf::internal::kEmptyString) {
    delete racefsmprefaboverride_;
  }
  if (carrestriction_ != &::google::protobuf::internal::kEmptyString) {
    delete carrestriction_;
  }
  if (trackname_ != &::google::protobuf::internal::kEmptyString) {
    delete trackname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (environmentprefab_ != &::google::protobuf::internal::kEmptyString) {
    delete environmentprefab_;
  }
  if (pursuittype_ != &::google::protobuf::internal::kEmptyString) {
    delete pursuittype_;
  }
  if (startline_ != &::google::protobuf::internal::kEmptyString) {
    delete startline_;
  }
  if (finishline_ != &::google::protobuf::internal::kEmptyString) {
    delete finishline_;
  }
  if (endoftrack_ != &::google::protobuf::internal::kEmptyString) {
    delete endoftrack_;
  }
  if (checkpointcollection_ != &::google::protobuf::internal::kEmptyString) {
    delete checkpointcollection_;
  }
  if (this != default_instance_) {
  }
}

void RaceEventMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceEventMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceEventMessage_descriptor_;
}

const RaceEventMessage& RaceEventMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RaceEventMessage* RaceEventMessage::default_instance_ = NULL;

RaceEventMessage* RaceEventMessage::New() const {
  return new RaceEventMessage;
}

void RaceEventMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_racetype()) {
      if (racetype_ != &::google::protobuf::internal::kEmptyString) {
        racetype_->clear();
      }
    }
    if (has_racefsmprefaboverride()) {
      if (racefsmprefaboverride_ != &::google::protobuf::internal::kEmptyString) {
        racefsmprefaboverride_->clear();
      }
    }
    if (has_carrestriction()) {
      if (carrestriction_ != &::google::protobuf::internal::kEmptyString) {
        carrestriction_->clear();
      }
    }
    if (has_trackname()) {
      if (trackname_ != &::google::protobuf::internal::kEmptyString) {
        trackname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    blacklistevent_ = false;
    classrestriction_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_environmentprefab()) {
      if (environmentprefab_ != &::google::protobuf::internal::kEmptyString) {
        environmentprefab_->clear();
      }
    }
    trafficcarcount_ = 0;
    openworldtrack_ = false;
    autologid_ = 0;
    if (has_pursuittype()) {
      if (pursuittype_ != &::google::protobuf::internal::kEmptyString) {
        pursuittype_->clear();
      }
    }
    startlinenospawnzone_ = 0;
    finishlinenospawnzone_ = 0;
    spawndistance_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_startline()) {
      if (startline_ != &::google::protobuf::internal::kEmptyString) {
        startline_->clear();
      }
    }
    if (has_finishline()) {
      if (finishline_ != &::google::protobuf::internal::kEmptyString) {
        finishline_->clear();
      }
    }
    if (has_endoftrack()) {
      if (endoftrack_ != &::google::protobuf::internal::kEmptyString) {
        endoftrack_->clear();
      }
    }
    if (has_checkpointcollection()) {
      if (checkpointcollection_ != &::google::protobuf::internal::kEmptyString) {
        checkpointcollection_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceEventMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string raceType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_racetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->racetype().data(), this->racetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raceFSMPrefabOverride;
        break;
      }
      
      // optional string raceFSMPrefabOverride = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceFSMPrefabOverride:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_racefsmprefaboverride()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->racefsmprefaboverride().data(), this->racefsmprefaboverride().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_carRestriction;
        break;
      }
      
      // optional string carRestriction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carRestriction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrestriction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carrestriction().data(), this->carrestriction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trackName;
        break;
      }
      
      // optional string trackName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trackname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trackname().data(), this->trackname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }
      
      // optional string location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_blacklistEvent;
        break;
      }
      
      // optional bool blacklistEvent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blacklistEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklistevent_)));
          set_has_blacklistevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_classRestriction;
        break;
      }
      
      // optional int32 classRestriction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classRestriction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classrestriction_)));
          set_has_classrestriction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_environmentPrefab;
        break;
      }
      
      // optional string environmentPrefab = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_environmentPrefab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_environmentprefab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->environmentprefab().data(), this->environmentprefab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_trafficCarCount;
        break;
      }
      
      // optional int32 trafficCarCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trafficCarCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trafficcarcount_)));
          set_has_trafficcarcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_openWorldTrack;
        break;
      }
      
      // optional bool openWorldTrack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openWorldTrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openworldtrack_)));
          set_has_openworldtrack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_autoLogId;
        break;
      }
      
      // optional int32 autoLogId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoLogId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autologid_)));
          set_has_autologid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pursuitType;
        break;
      }
      
      // optional string pursuitType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pursuitType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pursuittype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pursuittype().data(), this->pursuittype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_startLineNoSpawnZone;
        break;
      }
      
      // optional float startLineNoSpawnZone = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startLineNoSpawnZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startlinenospawnzone_)));
          set_has_startlinenospawnzone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_finishLineNoSpawnZone;
        break;
      }
      
      // optional float finishLineNoSpawnZone = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_finishLineNoSpawnZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &finishlinenospawnzone_)));
          set_has_finishlinenospawnzone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_spawnDistance;
        break;
      }
      
      // optional float spawnDistance = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spawnDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spawndistance_)));
          set_has_spawndistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_startLine;
        break;
      }
      
      // optional string startLine = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startline().data(), this->startline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_finishLine;
        break;
      }
      
      // optional string finishLine = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finishLine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_finishline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->finishline().data(), this->finishline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_endOfTrack;
        break;
      }
      
      // optional string endOfTrack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endOfTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endoftrack()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endoftrack().data(), this->endoftrack().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_checkpointCollection;
        break;
      }
      
      // optional string checkpointCollection = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkpointCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpointcollection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checkpointcollection().data(), this->checkpointcollection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceEventMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string raceType = 1;
  if (has_racetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->racetype().data(), this->racetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->racetype(), output);
  }
  
  // optional string raceFSMPrefabOverride = 2;
  if (has_racefsmprefaboverride()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->racefsmprefaboverride().data(), this->racefsmprefaboverride().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->racefsmprefaboverride(), output);
  }
  
  // optional string carRestriction = 3;
  if (has_carrestriction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrestriction().data(), this->carrestriction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->carrestriction(), output);
  }
  
  // optional string trackName = 4;
  if (has_trackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackname().data(), this->trackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->trackname(), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->location(), output);
  }
  
  // optional bool blacklistEvent = 7;
  if (has_blacklistevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->blacklistevent(), output);
  }
  
  // optional int32 classRestriction = 8;
  if (has_classrestriction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->classrestriction(), output);
  }
  
  // optional string environmentPrefab = 9;
  if (has_environmentprefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->environmentprefab().data(), this->environmentprefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->environmentprefab(), output);
  }
  
  // optional int32 trafficCarCount = 10;
  if (has_trafficcarcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->trafficcarcount(), output);
  }
  
  // optional bool openWorldTrack = 11;
  if (has_openworldtrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->openworldtrack(), output);
  }
  
  // optional int32 autoLogId = 12;
  if (has_autologid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->autologid(), output);
  }
  
  // optional string pursuitType = 13;
  if (has_pursuittype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pursuittype().data(), this->pursuittype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->pursuittype(), output);
  }
  
  // optional float startLineNoSpawnZone = 14;
  if (has_startlinenospawnzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->startlinenospawnzone(), output);
  }
  
  // optional float finishLineNoSpawnZone = 15;
  if (has_finishlinenospawnzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->finishlinenospawnzone(), output);
  }
  
  // optional float spawnDistance = 16;
  if (has_spawndistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->spawndistance(), output);
  }
  
  // optional string startLine = 17;
  if (has_startline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startline().data(), this->startline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->startline(), output);
  }
  
  // optional string finishLine = 18;
  if (has_finishline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishline().data(), this->finishline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->finishline(), output);
  }
  
  // optional string endOfTrack = 19;
  if (has_endoftrack()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endoftrack().data(), this->endoftrack().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->endoftrack(), output);
  }
  
  // optional string checkpointCollection = 20;
  if (has_checkpointcollection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpointcollection().data(), this->checkpointcollection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->checkpointcollection(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceEventMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string raceType = 1;
  if (has_racetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->racetype().data(), this->racetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->racetype(), target);
  }
  
  // optional string raceFSMPrefabOverride = 2;
  if (has_racefsmprefaboverride()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->racefsmprefaboverride().data(), this->racefsmprefaboverride().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->racefsmprefaboverride(), target);
  }
  
  // optional string carRestriction = 3;
  if (has_carrestriction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrestriction().data(), this->carrestriction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->carrestriction(), target);
  }
  
  // optional string trackName = 4;
  if (has_trackname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trackname().data(), this->trackname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->trackname(), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }
  
  // optional bool blacklistEvent = 7;
  if (has_blacklistevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->blacklistevent(), target);
  }
  
  // optional int32 classRestriction = 8;
  if (has_classrestriction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->classrestriction(), target);
  }
  
  // optional string environmentPrefab = 9;
  if (has_environmentprefab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->environmentprefab().data(), this->environmentprefab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->environmentprefab(), target);
  }
  
  // optional int32 trafficCarCount = 10;
  if (has_trafficcarcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->trafficcarcount(), target);
  }
  
  // optional bool openWorldTrack = 11;
  if (has_openworldtrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->openworldtrack(), target);
  }
  
  // optional int32 autoLogId = 12;
  if (has_autologid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->autologid(), target);
  }
  
  // optional string pursuitType = 13;
  if (has_pursuittype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pursuittype().data(), this->pursuittype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->pursuittype(), target);
  }
  
  // optional float startLineNoSpawnZone = 14;
  if (has_startlinenospawnzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->startlinenospawnzone(), target);
  }
  
  // optional float finishLineNoSpawnZone = 15;
  if (has_finishlinenospawnzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->finishlinenospawnzone(), target);
  }
  
  // optional float spawnDistance = 16;
  if (has_spawndistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->spawndistance(), target);
  }
  
  // optional string startLine = 17;
  if (has_startline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startline().data(), this->startline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->startline(), target);
  }
  
  // optional string finishLine = 18;
  if (has_finishline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->finishline().data(), this->finishline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->finishline(), target);
  }
  
  // optional string endOfTrack = 19;
  if (has_endoftrack()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endoftrack().data(), this->endoftrack().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->endoftrack(), target);
  }
  
  // optional string checkpointCollection = 20;
  if (has_checkpointcollection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checkpointcollection().data(), this->checkpointcollection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->checkpointcollection(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceEventMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string raceType = 1;
    if (has_racetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->racetype());
    }
    
    // optional string raceFSMPrefabOverride = 2;
    if (has_racefsmprefaboverride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->racefsmprefaboverride());
    }
    
    // optional string carRestriction = 3;
    if (has_carrestriction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrestriction());
    }
    
    // optional string trackName = 4;
    if (has_trackname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trackname());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }
    
    // optional bool blacklistEvent = 7;
    if (has_blacklistevent()) {
      total_size += 1 + 1;
    }
    
    // optional int32 classRestriction = 8;
    if (has_classrestriction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classrestriction());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string environmentPrefab = 9;
    if (has_environmentprefab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->environmentprefab());
    }
    
    // optional int32 trafficCarCount = 10;
    if (has_trafficcarcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trafficcarcount());
    }
    
    // optional bool openWorldTrack = 11;
    if (has_openworldtrack()) {
      total_size += 1 + 1;
    }
    
    // optional int32 autoLogId = 12;
    if (has_autologid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autologid());
    }
    
    // optional string pursuitType = 13;
    if (has_pursuittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pursuittype());
    }
    
    // optional float startLineNoSpawnZone = 14;
    if (has_startlinenospawnzone()) {
      total_size += 1 + 4;
    }
    
    // optional float finishLineNoSpawnZone = 15;
    if (has_finishlinenospawnzone()) {
      total_size += 1 + 4;
    }
    
    // optional float spawnDistance = 16;
    if (has_spawndistance()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string startLine = 17;
    if (has_startline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startline());
    }
    
    // optional string finishLine = 18;
    if (has_finishline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->finishline());
    }
    
    // optional string endOfTrack = 19;
    if (has_endoftrack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endoftrack());
    }
    
    // optional string checkpointCollection = 20;
    if (has_checkpointcollection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checkpointcollection());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceEventMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceEventMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceEventMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceEventMessage::MergeFrom(const RaceEventMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_racetype()) {
      set_racetype(from.racetype());
    }
    if (from.has_racefsmprefaboverride()) {
      set_racefsmprefaboverride(from.racefsmprefaboverride());
    }
    if (from.has_carrestriction()) {
      set_carrestriction(from.carrestriction());
    }
    if (from.has_trackname()) {
      set_trackname(from.trackname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_blacklistevent()) {
      set_blacklistevent(from.blacklistevent());
    }
    if (from.has_classrestriction()) {
      set_classrestriction(from.classrestriction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_environmentprefab()) {
      set_environmentprefab(from.environmentprefab());
    }
    if (from.has_trafficcarcount()) {
      set_trafficcarcount(from.trafficcarcount());
    }
    if (from.has_openworldtrack()) {
      set_openworldtrack(from.openworldtrack());
    }
    if (from.has_autologid()) {
      set_autologid(from.autologid());
    }
    if (from.has_pursuittype()) {
      set_pursuittype(from.pursuittype());
    }
    if (from.has_startlinenospawnzone()) {
      set_startlinenospawnzone(from.startlinenospawnzone());
    }
    if (from.has_finishlinenospawnzone()) {
      set_finishlinenospawnzone(from.finishlinenospawnzone());
    }
    if (from.has_spawndistance()) {
      set_spawndistance(from.spawndistance());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_startline()) {
      set_startline(from.startline());
    }
    if (from.has_finishline()) {
      set_finishline(from.finishline());
    }
    if (from.has_endoftrack()) {
      set_endoftrack(from.endoftrack());
    }
    if (from.has_checkpointcollection()) {
      set_checkpointcollection(from.checkpointcollection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceEventMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceEventMessage::CopyFrom(const RaceEventMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceEventMessage::IsInitialized() const {
  
  return true;
}

void RaceEventMessage::Swap(RaceEventMessage* other) {
  if (other != this) {
    std::swap(racetype_, other->racetype_);
    std::swap(racefsmprefaboverride_, other->racefsmprefaboverride_);
    std::swap(carrestriction_, other->carrestriction_);
    std::swap(trackname_, other->trackname_);
    std::swap(name_, other->name_);
    std::swap(location_, other->location_);
    std::swap(blacklistevent_, other->blacklistevent_);
    std::swap(classrestriction_, other->classrestriction_);
    std::swap(environmentprefab_, other->environmentprefab_);
    std::swap(trafficcarcount_, other->trafficcarcount_);
    std::swap(openworldtrack_, other->openworldtrack_);
    std::swap(autologid_, other->autologid_);
    std::swap(pursuittype_, other->pursuittype_);
    std::swap(startlinenospawnzone_, other->startlinenospawnzone_);
    std::swap(finishlinenospawnzone_, other->finishlinenospawnzone_);
    std::swap(spawndistance_, other->spawndistance_);
    std::swap(startline_, other->startline_);
    std::swap(finishline_, other->finishline_);
    std::swap(endoftrack_, other->endoftrack_);
    std::swap(checkpointcollection_, other->checkpointcollection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceEventMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceEventMessage_descriptor_;
  metadata.reflection = RaceEventMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficFlowMessage::kMaxIncomingCarsOverrideFieldNumber;
const int TrafficFlowMessage::kMaxOutcomingCarsOverrideFieldNumber;
const int TrafficFlowMessage::kOutgoingLightMinDistanceFieldNumber;
const int TrafficFlowMessage::kOutgoingLightMaxDistanceFieldNumber;
const int TrafficFlowMessage::kOutgoingHeavyMinDistanceFieldNumber;
const int TrafficFlowMessage::kOutgoingHeavyMaxDistanceFieldNumber;
const int TrafficFlowMessage::kIncomingLightMinDistanceFieldNumber;
const int TrafficFlowMessage::kIncomingLightMaxDistanceFieldNumber;
const int TrafficFlowMessage::kIncomingHeavyMinDistanceFieldNumber;
const int TrafficFlowMessage::kIncomingHeavyMaxDistanceFieldNumber;
const int TrafficFlowMessage::kIntialNoTrafficDistanceFieldNumber;
const int TrafficFlowMessage::kRaceTrafficCongestionFieldNumber;
const int TrafficFlowMessage::kTrfficCarSpawnDescsFieldNumber;
#endif  // !_MSC_VER

TrafficFlowMessage::TrafficFlowMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficFlowMessage::InitAsDefaultInstance() {
  trfficcarspawndescs_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::TrafficCarSpawnDescsMessage*>(&::com::ea::eamobile::nfsmw::protoc::TrafficCarSpawnDescsMessage::default_instance());
}

TrafficFlowMessage::TrafficFlowMessage(const TrafficFlowMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficFlowMessage::SharedCtor() {
  _cached_size_ = 0;
  maxincomingcarsoverride_ = 0;
  maxoutcomingcarsoverride_ = 0;
  outgoinglightmindistance_ = 0;
  outgoinglightmaxdistance_ = 0;
  outgoingheavymindistance_ = 0;
  outgoingheavymaxdistance_ = 0;
  incominglightmindistance_ = 0;
  incominglightmaxdistance_ = 0;
  incomingheavymindistance_ = 0;
  incomingheavymaxdistance_ = 0;
  intialnotrafficdistance_ = 0;
  trfficcarspawndescs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficFlowMessage::~TrafficFlowMessage() {
  SharedDtor();
}

void TrafficFlowMessage::SharedDtor() {
  if (this != default_instance_) {
    delete trfficcarspawndescs_;
  }
}

void TrafficFlowMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficFlowMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficFlowMessage_descriptor_;
}

const TrafficFlowMessage& TrafficFlowMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TrafficFlowMessage* TrafficFlowMessage::default_instance_ = NULL;

TrafficFlowMessage* TrafficFlowMessage::New() const {
  return new TrafficFlowMessage;
}

void TrafficFlowMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxincomingcarsoverride_ = 0;
    maxoutcomingcarsoverride_ = 0;
    outgoinglightmindistance_ = 0;
    outgoinglightmaxdistance_ = 0;
    outgoingheavymindistance_ = 0;
    outgoingheavymaxdistance_ = 0;
    incominglightmindistance_ = 0;
    incominglightmaxdistance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    incomingheavymindistance_ = 0;
    incomingheavymaxdistance_ = 0;
    intialnotrafficdistance_ = 0;
    if (has_trfficcarspawndescs()) {
      if (trfficcarspawndescs_ != NULL) trfficcarspawndescs_->::com::ea::eamobile::nfsmw::protoc::TrafficCarSpawnDescsMessage::Clear();
    }
  }
  racetrafficcongestion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficFlowMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxIncomingCarsOverride = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxincomingcarsoverride_)));
          set_has_maxincomingcarsoverride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxOutcomingCarsOverride;
        break;
      }
      
      // optional int32 maxOutcomingCarsOverride = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxOutcomingCarsOverride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxoutcomingcarsoverride_)));
          set_has_maxoutcomingcarsoverride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_outgoingLightMinDistance;
        break;
      }
      
      // optional float outgoingLightMinDistance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outgoingLightMinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outgoinglightmindistance_)));
          set_has_outgoinglightmindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_outgoingLightMaxDistance;
        break;
      }
      
      // optional float outgoingLightMaxDistance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outgoingLightMaxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outgoinglightmaxdistance_)));
          set_has_outgoinglightmaxdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_outgoingHeavyMinDistance;
        break;
      }
      
      // optional float outgoingHeavyMinDistance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outgoingHeavyMinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outgoingheavymindistance_)));
          set_has_outgoingheavymindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_outgoingHeavyMaxDistance;
        break;
      }
      
      // optional float outgoingHeavyMaxDistance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outgoingHeavyMaxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outgoingheavymaxdistance_)));
          set_has_outgoingheavymaxdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_incomingLightMinDistance;
        break;
      }
      
      // optional float incomingLightMinDistance = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_incomingLightMinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &incominglightmindistance_)));
          set_has_incominglightmindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_incomingLightMaxDistance;
        break;
      }
      
      // optional float incomingLightMaxDistance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_incomingLightMaxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &incominglightmaxdistance_)));
          set_has_incominglightmaxdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_incomingHeavyMinDistance;
        break;
      }
      
      // optional float incomingHeavyMinDistance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_incomingHeavyMinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &incomingheavymindistance_)));
          set_has_incomingheavymindistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_incomingHeavyMaxDistance;
        break;
      }
      
      // optional float incomingHeavyMaxDistance = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_incomingHeavyMaxDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &incomingheavymaxdistance_)));
          set_has_incomingheavymaxdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_intialNoTrafficDistance;
        break;
      }
      
      // optional float intialNoTrafficDistance = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intialNoTrafficDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intialnotrafficdistance_)));
          set_has_intialnotrafficdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_raceTrafficCongestion;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RaceTrafficCongestionMessage raceTrafficCongestion = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceTrafficCongestion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_racetrafficcongestion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_raceTrafficCongestion;
        if (input->ExpectTag(106)) goto parse_trfficCarSpawnDescs;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.TrafficCarSpawnDescsMessage trfficCarSpawnDescs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trfficCarSpawnDescs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trfficcarspawndescs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficFlowMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 maxIncomingCarsOverride = 1;
  if (has_maxincomingcarsoverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxincomingcarsoverride(), output);
  }
  
  // optional int32 maxOutcomingCarsOverride = 2;
  if (has_maxoutcomingcarsoverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxoutcomingcarsoverride(), output);
  }
  
  // optional float outgoingLightMinDistance = 3;
  if (has_outgoinglightmindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->outgoinglightmindistance(), output);
  }
  
  // optional float outgoingLightMaxDistance = 4;
  if (has_outgoinglightmaxdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->outgoinglightmaxdistance(), output);
  }
  
  // optional float outgoingHeavyMinDistance = 5;
  if (has_outgoingheavymindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->outgoingheavymindistance(), output);
  }
  
  // optional float outgoingHeavyMaxDistance = 6;
  if (has_outgoingheavymaxdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->outgoingheavymaxdistance(), output);
  }
  
  // optional float incomingLightMinDistance = 7;
  if (has_incominglightmindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->incominglightmindistance(), output);
  }
  
  // optional float incomingLightMaxDistance = 8;
  if (has_incominglightmaxdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->incominglightmaxdistance(), output);
  }
  
  // optional float incomingHeavyMinDistance = 9;
  if (has_incomingheavymindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->incomingheavymindistance(), output);
  }
  
  // optional float incomingHeavyMaxDistance = 10;
  if (has_incomingheavymaxdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->incomingheavymaxdistance(), output);
  }
  
  // optional float intialNoTrafficDistance = 11;
  if (has_intialnotrafficdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->intialnotrafficdistance(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RaceTrafficCongestionMessage raceTrafficCongestion = 12;
  for (int i = 0; i < this->racetrafficcongestion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->racetrafficcongestion(i), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.TrafficCarSpawnDescsMessage trfficCarSpawnDescs = 13;
  if (has_trfficcarspawndescs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->trfficcarspawndescs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficFlowMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 maxIncomingCarsOverride = 1;
  if (has_maxincomingcarsoverride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxincomingcarsoverride(), target);
  }
  
  // optional int32 maxOutcomingCarsOverride = 2;
  if (has_maxoutcomingcarsoverride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxoutcomingcarsoverride(), target);
  }
  
  // optional float outgoingLightMinDistance = 3;
  if (has_outgoinglightmindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->outgoinglightmindistance(), target);
  }
  
  // optional float outgoingLightMaxDistance = 4;
  if (has_outgoinglightmaxdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->outgoinglightmaxdistance(), target);
  }
  
  // optional float outgoingHeavyMinDistance = 5;
  if (has_outgoingheavymindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->outgoingheavymindistance(), target);
  }
  
  // optional float outgoingHeavyMaxDistance = 6;
  if (has_outgoingheavymaxdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->outgoingheavymaxdistance(), target);
  }
  
  // optional float incomingLightMinDistance = 7;
  if (has_incominglightmindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->incominglightmindistance(), target);
  }
  
  // optional float incomingLightMaxDistance = 8;
  if (has_incominglightmaxdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->incominglightmaxdistance(), target);
  }
  
  // optional float incomingHeavyMinDistance = 9;
  if (has_incomingheavymindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->incomingheavymindistance(), target);
  }
  
  // optional float incomingHeavyMaxDistance = 10;
  if (has_incomingheavymaxdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->incomingheavymaxdistance(), target);
  }
  
  // optional float intialNoTrafficDistance = 11;
  if (has_intialnotrafficdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->intialnotrafficdistance(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RaceTrafficCongestionMessage raceTrafficCongestion = 12;
  for (int i = 0; i < this->racetrafficcongestion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->racetrafficcongestion(i), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.TrafficCarSpawnDescsMessage trfficCarSpawnDescs = 13;
  if (has_trfficcarspawndescs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->trfficcarspawndescs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficFlowMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxIncomingCarsOverride = 1;
    if (has_maxincomingcarsoverride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxincomingcarsoverride());
    }
    
    // optional int32 maxOutcomingCarsOverride = 2;
    if (has_maxoutcomingcarsoverride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxoutcomingcarsoverride());
    }
    
    // optional float outgoingLightMinDistance = 3;
    if (has_outgoinglightmindistance()) {
      total_size += 1 + 4;
    }
    
    // optional float outgoingLightMaxDistance = 4;
    if (has_outgoinglightmaxdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float outgoingHeavyMinDistance = 5;
    if (has_outgoingheavymindistance()) {
      total_size += 1 + 4;
    }
    
    // optional float outgoingHeavyMaxDistance = 6;
    if (has_outgoingheavymaxdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float incomingLightMinDistance = 7;
    if (has_incominglightmindistance()) {
      total_size += 1 + 4;
    }
    
    // optional float incomingLightMaxDistance = 8;
    if (has_incominglightmaxdistance()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float incomingHeavyMinDistance = 9;
    if (has_incomingheavymindistance()) {
      total_size += 1 + 4;
    }
    
    // optional float incomingHeavyMaxDistance = 10;
    if (has_incomingheavymaxdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float intialNoTrafficDistance = 11;
    if (has_intialnotrafficdistance()) {
      total_size += 1 + 4;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.TrafficCarSpawnDescsMessage trfficCarSpawnDescs = 13;
    if (has_trfficcarspawndescs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trfficcarspawndescs());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.RaceTrafficCongestionMessage raceTrafficCongestion = 12;
  total_size += 1 * this->racetrafficcongestion_size();
  for (int i = 0; i < this->racetrafficcongestion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->racetrafficcongestion(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficFlowMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficFlowMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficFlowMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficFlowMessage::MergeFrom(const TrafficFlowMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  racetrafficcongestion_.MergeFrom(from.racetrafficcongestion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxincomingcarsoverride()) {
      set_maxincomingcarsoverride(from.maxincomingcarsoverride());
    }
    if (from.has_maxoutcomingcarsoverride()) {
      set_maxoutcomingcarsoverride(from.maxoutcomingcarsoverride());
    }
    if (from.has_outgoinglightmindistance()) {
      set_outgoinglightmindistance(from.outgoinglightmindistance());
    }
    if (from.has_outgoinglightmaxdistance()) {
      set_outgoinglightmaxdistance(from.outgoinglightmaxdistance());
    }
    if (from.has_outgoingheavymindistance()) {
      set_outgoingheavymindistance(from.outgoingheavymindistance());
    }
    if (from.has_outgoingheavymaxdistance()) {
      set_outgoingheavymaxdistance(from.outgoingheavymaxdistance());
    }
    if (from.has_incominglightmindistance()) {
      set_incominglightmindistance(from.incominglightmindistance());
    }
    if (from.has_incominglightmaxdistance()) {
      set_incominglightmaxdistance(from.incominglightmaxdistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_incomingheavymindistance()) {
      set_incomingheavymindistance(from.incomingheavymindistance());
    }
    if (from.has_incomingheavymaxdistance()) {
      set_incomingheavymaxdistance(from.incomingheavymaxdistance());
    }
    if (from.has_intialnotrafficdistance()) {
      set_intialnotrafficdistance(from.intialnotrafficdistance());
    }
    if (from.has_trfficcarspawndescs()) {
      mutable_trfficcarspawndescs()->::com::ea::eamobile::nfsmw::protoc::TrafficCarSpawnDescsMessage::MergeFrom(from.trfficcarspawndescs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficFlowMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficFlowMessage::CopyFrom(const TrafficFlowMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficFlowMessage::IsInitialized() const {
  
  return true;
}

void TrafficFlowMessage::Swap(TrafficFlowMessage* other) {
  if (other != this) {
    std::swap(maxincomingcarsoverride_, other->maxincomingcarsoverride_);
    std::swap(maxoutcomingcarsoverride_, other->maxoutcomingcarsoverride_);
    std::swap(outgoinglightmindistance_, other->outgoinglightmindistance_);
    std::swap(outgoinglightmaxdistance_, other->outgoinglightmaxdistance_);
    std::swap(outgoingheavymindistance_, other->outgoingheavymindistance_);
    std::swap(outgoingheavymaxdistance_, other->outgoingheavymaxdistance_);
    std::swap(incominglightmindistance_, other->incominglightmindistance_);
    std::swap(incominglightmaxdistance_, other->incominglightmaxdistance_);
    std::swap(incomingheavymindistance_, other->incomingheavymindistance_);
    std::swap(incomingheavymaxdistance_, other->incomingheavymaxdistance_);
    std::swap(intialnotrafficdistance_, other->intialnotrafficdistance_);
    racetrafficcongestion_.Swap(&other->racetrafficcongestion_);
    std::swap(trfficcarspawndescs_, other->trfficcarspawndescs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficFlowMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficFlowMessage_descriptor_;
  metadata.reflection = TrafficFlowMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceTrafficCongestionMessage::kRaceCompletetionFactorFieldNumber;
const int RaceTrafficCongestionMessage::kOutgoingTrafficCongestionFactorFieldNumber;
const int RaceTrafficCongestionMessage::kOncomingTrafficCongestionFactorFieldNumber;
#endif  // !_MSC_VER

RaceTrafficCongestionMessage::RaceTrafficCongestionMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceTrafficCongestionMessage::InitAsDefaultInstance() {
}

RaceTrafficCongestionMessage::RaceTrafficCongestionMessage(const RaceTrafficCongestionMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceTrafficCongestionMessage::SharedCtor() {
  _cached_size_ = 0;
  racecompletetionfactor_ = 0;
  outgoingtrafficcongestionfactor_ = 0;
  oncomingtrafficcongestionfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceTrafficCongestionMessage::~RaceTrafficCongestionMessage() {
  SharedDtor();
}

void RaceTrafficCongestionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceTrafficCongestionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceTrafficCongestionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceTrafficCongestionMessage_descriptor_;
}

const RaceTrafficCongestionMessage& RaceTrafficCongestionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RaceTrafficCongestionMessage* RaceTrafficCongestionMessage::default_instance_ = NULL;

RaceTrafficCongestionMessage* RaceTrafficCongestionMessage::New() const {
  return new RaceTrafficCongestionMessage;
}

void RaceTrafficCongestionMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    racecompletetionfactor_ = 0;
    outgoingtrafficcongestionfactor_ = 0;
    oncomingtrafficcongestionfactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceTrafficCongestionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float raceCompletetionFactor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &racecompletetionfactor_)));
          set_has_racecompletetionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_outgoingTrafficCongestionFactor;
        break;
      }
      
      // optional float outgoingTrafficCongestionFactor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_outgoingTrafficCongestionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &outgoingtrafficcongestionfactor_)));
          set_has_outgoingtrafficcongestionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_oncomingTrafficCongestionFactor;
        break;
      }
      
      // optional float oncomingTrafficCongestionFactor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_oncomingTrafficCongestionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &oncomingtrafficcongestionfactor_)));
          set_has_oncomingtrafficcongestionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceTrafficCongestionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float raceCompletetionFactor = 1;
  if (has_racecompletetionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->racecompletetionfactor(), output);
  }
  
  // optional float outgoingTrafficCongestionFactor = 2;
  if (has_outgoingtrafficcongestionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->outgoingtrafficcongestionfactor(), output);
  }
  
  // optional float oncomingTrafficCongestionFactor = 3;
  if (has_oncomingtrafficcongestionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->oncomingtrafficcongestionfactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceTrafficCongestionMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float raceCompletetionFactor = 1;
  if (has_racecompletetionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->racecompletetionfactor(), target);
  }
  
  // optional float outgoingTrafficCongestionFactor = 2;
  if (has_outgoingtrafficcongestionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->outgoingtrafficcongestionfactor(), target);
  }
  
  // optional float oncomingTrafficCongestionFactor = 3;
  if (has_oncomingtrafficcongestionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->oncomingtrafficcongestionfactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceTrafficCongestionMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float raceCompletetionFactor = 1;
    if (has_racecompletetionfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float outgoingTrafficCongestionFactor = 2;
    if (has_outgoingtrafficcongestionfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float oncomingTrafficCongestionFactor = 3;
    if (has_oncomingtrafficcongestionfactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceTrafficCongestionMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceTrafficCongestionMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceTrafficCongestionMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceTrafficCongestionMessage::MergeFrom(const RaceTrafficCongestionMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_racecompletetionfactor()) {
      set_racecompletetionfactor(from.racecompletetionfactor());
    }
    if (from.has_outgoingtrafficcongestionfactor()) {
      set_outgoingtrafficcongestionfactor(from.outgoingtrafficcongestionfactor());
    }
    if (from.has_oncomingtrafficcongestionfactor()) {
      set_oncomingtrafficcongestionfactor(from.oncomingtrafficcongestionfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceTrafficCongestionMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceTrafficCongestionMessage::CopyFrom(const RaceTrafficCongestionMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceTrafficCongestionMessage::IsInitialized() const {
  
  return true;
}

void RaceTrafficCongestionMessage::Swap(RaceTrafficCongestionMessage* other) {
  if (other != this) {
    std::swap(racecompletetionfactor_, other->racecompletetionfactor_);
    std::swap(outgoingtrafficcongestionfactor_, other->outgoingtrafficcongestionfactor_);
    std::swap(oncomingtrafficcongestionfactor_, other->oncomingtrafficcongestionfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceTrafficCongestionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceTrafficCongestionMessage_descriptor_;
  metadata.reflection = RaceTrafficCongestionMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrafficCarSpawnDescsMessage::kPrefabldFieldNumber;
#endif  // !_MSC_VER

TrafficCarSpawnDescsMessage::TrafficCarSpawnDescsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrafficCarSpawnDescsMessage::InitAsDefaultInstance() {
}

TrafficCarSpawnDescsMessage::TrafficCarSpawnDescsMessage(const TrafficCarSpawnDescsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrafficCarSpawnDescsMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrafficCarSpawnDescsMessage::~TrafficCarSpawnDescsMessage() {
  SharedDtor();
}

void TrafficCarSpawnDescsMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrafficCarSpawnDescsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficCarSpawnDescsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrafficCarSpawnDescsMessage_descriptor_;
}

const TrafficCarSpawnDescsMessage& TrafficCarSpawnDescsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

TrafficCarSpawnDescsMessage* TrafficCarSpawnDescsMessage::default_instance_ = NULL;

TrafficCarSpawnDescsMessage* TrafficCarSpawnDescsMessage::New() const {
  return new TrafficCarSpawnDescsMessage;
}

void TrafficCarSpawnDescsMessage::Clear() {
  prefabld_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrafficCarSpawnDescsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string prefabld = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefabld:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_prefabld()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefabld(0).data(), this->prefabld(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prefabld;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrafficCarSpawnDescsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string prefabld = 1;
  for (int i = 0; i < this->prefabld_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->prefabld(i).data(), this->prefabld(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prefabld(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrafficCarSpawnDescsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string prefabld = 1;
  for (int i = 0; i < this->prefabld_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefabld(i).data(), this->prefabld(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->prefabld(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrafficCarSpawnDescsMessage::ByteSize() const {
  int total_size = 0;
  
  // repeated string prefabld = 1;
  total_size += 1 * this->prefabld_size();
  for (int i = 0; i < this->prefabld_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->prefabld(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficCarSpawnDescsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrafficCarSpawnDescsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrafficCarSpawnDescsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrafficCarSpawnDescsMessage::MergeFrom(const TrafficCarSpawnDescsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  prefabld_.MergeFrom(from.prefabld_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrafficCarSpawnDescsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficCarSpawnDescsMessage::CopyFrom(const TrafficCarSpawnDescsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficCarSpawnDescsMessage::IsInitialized() const {
  
  return true;
}

void TrafficCarSpawnDescsMessage::Swap(TrafficCarSpawnDescsMessage* other) {
  if (other != this) {
    prefabld_.Swap(&other->prefabld_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrafficCarSpawnDescsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrafficCarSpawnDescsMessage_descriptor_;
  metadata.reflection = TrafficCarSpawnDescsMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRegistJaguarCommand::kJaguarTypeFieldNumber;
#endif  // !_MSC_VER

RequestRegistJaguarCommand::RequestRegistJaguarCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegistJaguarCommand::InitAsDefaultInstance() {
}

RequestRegistJaguarCommand::RequestRegistJaguarCommand(const RequestRegistJaguarCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegistJaguarCommand::SharedCtor() {
  _cached_size_ = 0;
  jaguartype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegistJaguarCommand::~RequestRegistJaguarCommand() {
  SharedDtor();
}

void RequestRegistJaguarCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRegistJaguarCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegistJaguarCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegistJaguarCommand_descriptor_;
}

const RequestRegistJaguarCommand& RequestRegistJaguarCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestRegistJaguarCommand* RequestRegistJaguarCommand::default_instance_ = NULL;

RequestRegistJaguarCommand* RequestRegistJaguarCommand::New() const {
  return new RequestRegistJaguarCommand;
}

void RequestRegistJaguarCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jaguartype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegistJaguarCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jaguarType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jaguartype_)));
          set_has_jaguartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegistJaguarCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 jaguarType = 1;
  if (has_jaguartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jaguartype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegistJaguarCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 jaguarType = 1;
  if (has_jaguartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jaguartype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegistJaguarCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jaguarType = 1;
    if (has_jaguartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jaguartype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegistJaguarCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegistJaguarCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegistJaguarCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegistJaguarCommand::MergeFrom(const RequestRegistJaguarCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jaguartype()) {
      set_jaguartype(from.jaguartype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegistJaguarCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegistJaguarCommand::CopyFrom(const RequestRegistJaguarCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegistJaguarCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestRegistJaguarCommand::Swap(RequestRegistJaguarCommand* other) {
  if (other != this) {
    std::swap(jaguartype_, other->jaguartype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegistJaguarCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegistJaguarCommand_descriptor_;
  metadata.reflection = RequestRegistJaguarCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegistJaguarCommand::kLevelRaceCanUseFieldNumber;
#endif  // !_MSC_VER

ResponseRegistJaguarCommand::ResponseRegistJaguarCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegistJaguarCommand::InitAsDefaultInstance() {
}

ResponseRegistJaguarCommand::ResponseRegistJaguarCommand(const ResponseRegistJaguarCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegistJaguarCommand::SharedCtor() {
  _cached_size_ = 0;
  levelracecanuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegistJaguarCommand::~ResponseRegistJaguarCommand() {
  SharedDtor();
}

void ResponseRegistJaguarCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseRegistJaguarCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegistJaguarCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegistJaguarCommand_descriptor_;
}

const ResponseRegistJaguarCommand& ResponseRegistJaguarCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseRegistJaguarCommand* ResponseRegistJaguarCommand::default_instance_ = NULL;

ResponseRegistJaguarCommand* ResponseRegistJaguarCommand::New() const {
  return new ResponseRegistJaguarCommand;
}

void ResponseRegistJaguarCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelracecanuse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegistJaguarCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool levelRaceCanUse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &levelracecanuse_)));
          set_has_levelracecanuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegistJaguarCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool levelRaceCanUse = 1;
  if (has_levelracecanuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->levelracecanuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegistJaguarCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool levelRaceCanUse = 1;
  if (has_levelracecanuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->levelracecanuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegistJaguarCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool levelRaceCanUse = 1;
    if (has_levelracecanuse()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegistJaguarCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegistJaguarCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegistJaguarCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegistJaguarCommand::MergeFrom(const ResponseRegistJaguarCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelracecanuse()) {
      set_levelracecanuse(from.levelracecanuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegistJaguarCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegistJaguarCommand::CopyFrom(const ResponseRegistJaguarCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegistJaguarCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseRegistJaguarCommand::Swap(ResponseRegistJaguarCommand* other) {
  if (other != this) {
    std::swap(levelracecanuse_, other->levelracecanuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegistJaguarCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegistJaguarCommand_descriptor_;
  metadata.reflection = ResponseRegistJaguarCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRpLeaderboardCommand::kTypeFieldNumber;
const int RequestRpLeaderboardCommand::kHasProfileUIFieldNumber;
#endif  // !_MSC_VER

RequestRpLeaderboardCommand::RequestRpLeaderboardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRpLeaderboardCommand::InitAsDefaultInstance() {
}

RequestRpLeaderboardCommand::RequestRpLeaderboardCommand(const RequestRpLeaderboardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRpLeaderboardCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  hasprofileui_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRpLeaderboardCommand::~RequestRpLeaderboardCommand() {
  SharedDtor();
}

void RequestRpLeaderboardCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRpLeaderboardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRpLeaderboardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRpLeaderboardCommand_descriptor_;
}

const RequestRpLeaderboardCommand& RequestRpLeaderboardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestRpLeaderboardCommand* RequestRpLeaderboardCommand::default_instance_ = NULL;

RequestRpLeaderboardCommand* RequestRpLeaderboardCommand::New() const {
  return new RequestRpLeaderboardCommand;
}

void RequestRpLeaderboardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    hasprofileui_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRpLeaderboardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasProfileUI;
        break;
      }
      
      // optional bool hasProfileUI = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasProfileUI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasprofileui_)));
          set_has_hasprofileui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRpLeaderboardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional bool hasProfileUI = 2;
  if (has_hasprofileui()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasprofileui(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRpLeaderboardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional bool hasProfileUI = 2;
  if (has_hasprofileui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasprofileui(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRpLeaderboardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional bool hasProfileUI = 2;
    if (has_hasprofileui()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRpLeaderboardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRpLeaderboardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRpLeaderboardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRpLeaderboardCommand::MergeFrom(const RequestRpLeaderboardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hasprofileui()) {
      set_hasprofileui(from.hasprofileui());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRpLeaderboardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRpLeaderboardCommand::CopyFrom(const RequestRpLeaderboardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRpLeaderboardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestRpLeaderboardCommand::Swap(RequestRpLeaderboardCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(hasprofileui_, other->hasprofileui_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRpLeaderboardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRpLeaderboardCommand_descriptor_;
  metadata.reflection = RequestRpLeaderboardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRpLeaderboardCommand::kTypeFieldNumber;
const int ResponseRpLeaderboardCommand::kRpLeaderboardFieldNumber;
const int ResponseRpLeaderboardCommand::kSelfRankFieldNumber;
const int ResponseRpLeaderboardCommand::kSelfHeadIndexFieldNumber;
const int ResponseRpLeaderboardCommand::kSelfHeadUrlFieldNumber;
const int ResponseRpLeaderboardCommand::kSelfNameFieldNumber;
const int ResponseRpLeaderboardCommand::kSelfRpLevelFieldNumber;
const int ResponseRpLeaderboardCommand::kSelfRpNumFieldNumber;
#endif  // !_MSC_VER

ResponseRpLeaderboardCommand::ResponseRpLeaderboardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRpLeaderboardCommand::InitAsDefaultInstance() {
}

ResponseRpLeaderboardCommand::ResponseRpLeaderboardCommand(const ResponseRpLeaderboardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRpLeaderboardCommand::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  selfrank_ = 0;
  selfheadindex_ = 0;
  selfheadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfrplevel_ = 0;
  selfrpnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRpLeaderboardCommand::~ResponseRpLeaderboardCommand() {
  SharedDtor();
}

void ResponseRpLeaderboardCommand::SharedDtor() {
  if (selfheadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete selfheadurl_;
  }
  if (selfname_ != &::google::protobuf::internal::kEmptyString) {
    delete selfname_;
  }
  if (this != default_instance_) {
  }
}

void ResponseRpLeaderboardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRpLeaderboardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRpLeaderboardCommand_descriptor_;
}

const ResponseRpLeaderboardCommand& ResponseRpLeaderboardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseRpLeaderboardCommand* ResponseRpLeaderboardCommand::default_instance_ = NULL;

ResponseRpLeaderboardCommand* ResponseRpLeaderboardCommand::New() const {
  return new ResponseRpLeaderboardCommand;
}

void ResponseRpLeaderboardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    selfrank_ = 0;
    selfheadindex_ = 0;
    if (has_selfheadurl()) {
      if (selfheadurl_ != &::google::protobuf::internal::kEmptyString) {
        selfheadurl_->clear();
      }
    }
    if (has_selfname()) {
      if (selfname_ != &::google::protobuf::internal::kEmptyString) {
        selfname_->clear();
      }
    }
    selfrplevel_ = 0;
    selfrpnum_ = 0;
  }
  rpleaderboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRpLeaderboardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rpLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rpLeaderboard;
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }
      
      // required int32 selfRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selfHeadIndex;
        break;
      }
      
      // required int32 selfHeadIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfHeadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfheadindex_)));
          set_has_selfheadindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selfHeadUrl;
        break;
      }
      
      // optional string selfHeadUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfHeadUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfheadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfheadurl().data(), this->selfheadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_selfName;
        break;
      }
      
      // required string selfName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfname().data(), this->selfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_selfRpLevel;
        break;
      }
      
      // required int32 selfRpLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrplevel_)));
          set_has_selfrplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_selfRpNum;
        break;
      }
      
      // required int32 selfRpNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrpnum_)));
          set_has_selfrpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRpLeaderboardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
  for (int i = 0; i < this->rpleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rpleaderboard(i), output);
  }
  
  // required int32 selfRank = 3;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfrank(), output);
  }
  
  // required int32 selfHeadIndex = 4;
  if (has_selfheadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->selfheadindex(), output);
  }
  
  // optional string selfHeadUrl = 5;
  if (has_selfheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfheadurl().data(), this->selfheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->selfheadurl(), output);
  }
  
  // required string selfName = 6;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->selfname(), output);
  }
  
  // required int32 selfRpLevel = 7;
  if (has_selfrplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->selfrplevel(), output);
  }
  
  // required int32 selfRpNum = 8;
  if (has_selfrpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->selfrpnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRpLeaderboardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
  for (int i = 0; i < this->rpleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rpleaderboard(i), target);
  }
  
  // required int32 selfRank = 3;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfrank(), target);
  }
  
  // required int32 selfHeadIndex = 4;
  if (has_selfheadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->selfheadindex(), target);
  }
  
  // optional string selfHeadUrl = 5;
  if (has_selfheadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfheadurl().data(), this->selfheadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->selfheadurl(), target);
  }
  
  // required string selfName = 6;
  if (has_selfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfname().data(), this->selfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->selfname(), target);
  }
  
  // required int32 selfRpLevel = 7;
  if (has_selfrplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->selfrplevel(), target);
  }
  
  // required int32 selfRpNum = 8;
  if (has_selfrpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->selfrpnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRpLeaderboardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 selfRank = 3;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }
    
    // required int32 selfHeadIndex = 4;
    if (has_selfheadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfheadindex());
    }
    
    // optional string selfHeadUrl = 5;
    if (has_selfheadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfheadurl());
    }
    
    // required string selfName = 6;
    if (has_selfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfname());
    }
    
    // required int32 selfRpLevel = 7;
    if (has_selfrplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrplevel());
    }
    
    // required int32 selfRpNum = 8;
    if (has_selfrpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrpnum());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
  total_size += 1 * this->rpleaderboard_size();
  for (int i = 0; i < this->rpleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpleaderboard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRpLeaderboardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRpLeaderboardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRpLeaderboardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRpLeaderboardCommand::MergeFrom(const ResponseRpLeaderboardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpleaderboard_.MergeFrom(from.rpleaderboard_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
    if (from.has_selfheadindex()) {
      set_selfheadindex(from.selfheadindex());
    }
    if (from.has_selfheadurl()) {
      set_selfheadurl(from.selfheadurl());
    }
    if (from.has_selfname()) {
      set_selfname(from.selfname());
    }
    if (from.has_selfrplevel()) {
      set_selfrplevel(from.selfrplevel());
    }
    if (from.has_selfrpnum()) {
      set_selfrpnum(from.selfrpnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRpLeaderboardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRpLeaderboardCommand::CopyFrom(const ResponseRpLeaderboardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRpLeaderboardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ed) != 0x000000ed) return false;
  
  for (int i = 0; i < rpleaderboard_size(); i++) {
    if (!this->rpleaderboard(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseRpLeaderboardCommand::Swap(ResponseRpLeaderboardCommand* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    rpleaderboard_.Swap(&other->rpleaderboard_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(selfheadindex_, other->selfheadindex_);
    std::swap(selfheadurl_, other->selfheadurl_);
    std::swap(selfname_, other->selfname_);
    std::swap(selfrplevel_, other->selfrplevel_);
    std::swap(selfrpnum_, other->selfrpnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRpLeaderboardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRpLeaderboardCommand_descriptor_;
  metadata.reflection = ResponseRpLeaderboardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpLeaderboardMessage::kRankFieldNumber;
const int RpLeaderboardMessage::kHeadIndexFieldNumber;
const int RpLeaderboardMessage::kHeadUrlFieldNumber;
const int RpLeaderboardMessage::kNameFieldNumber;
const int RpLeaderboardMessage::kRpLevelFieldNumber;
const int RpLeaderboardMessage::kRpNumFieldNumber;
const int RpLeaderboardMessage::kUserIdFieldNumber;
#endif  // !_MSC_VER

RpLeaderboardMessage::RpLeaderboardMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpLeaderboardMessage::InitAsDefaultInstance() {
}

RpLeaderboardMessage::RpLeaderboardMessage(const RpLeaderboardMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpLeaderboardMessage::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rplevel_ = 0;
  rpnum_ = 0;
  userid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpLeaderboardMessage::~RpLeaderboardMessage() {
  SharedDtor();
}

void RpLeaderboardMessage::SharedDtor() {
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RpLeaderboardMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpLeaderboardMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpLeaderboardMessage_descriptor_;
}

const RpLeaderboardMessage& RpLeaderboardMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RpLeaderboardMessage* RpLeaderboardMessage::default_instance_ = NULL;

RpLeaderboardMessage* RpLeaderboardMessage::New() const {
  return new RpLeaderboardMessage;
}

void RpLeaderboardMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rplevel_ = 0;
    rpnum_ = 0;
    userid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpLeaderboardMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpLevel;
        break;
      }
      
      // required int32 rpLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rplevel_)));
          set_has_rplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rpNum;
        break;
      }
      
      // required int32 rpNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpnum_)));
          set_has_rpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_userId;
        break;
      }
      
      // optional int64 userId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpLeaderboardMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // required int32 headIndex = 2;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headindex(), output);
  }
  
  // optional string headUrl = 3;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->headurl(), output);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // required int32 rpLevel = 5;
  if (has_rplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rplevel(), output);
  }
  
  // required int32 rpNum = 6;
  if (has_rpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rpnum(), output);
  }
  
  // optional int64 userId = 7;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpLeaderboardMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // required int32 headIndex = 2;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headindex(), target);
  }
  
  // optional string headUrl = 3;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->headurl(), target);
  }
  
  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // required int32 rpLevel = 5;
  if (has_rplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rplevel(), target);
  }
  
  // required int32 rpNum = 6;
  if (has_rpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rpnum(), target);
  }
  
  // optional int64 userId = 7;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpLeaderboardMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required int32 headIndex = 2;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 3;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 rpLevel = 5;
    if (has_rplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rplevel());
    }
    
    // required int32 rpNum = 6;
    if (has_rpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpnum());
    }
    
    // optional int64 userId = 7;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpLeaderboardMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpLeaderboardMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpLeaderboardMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpLeaderboardMessage::MergeFrom(const RpLeaderboardMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rplevel()) {
      set_rplevel(from.rplevel());
    }
    if (from.has_rpnum()) {
      set_rpnum(from.rpnum());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpLeaderboardMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpLeaderboardMessage::CopyFrom(const RpLeaderboardMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpLeaderboardMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;
  
  return true;
}

void RpLeaderboardMessage::Swap(RpLeaderboardMessage* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(name_, other->name_);
    std::swap(rplevel_, other->rplevel_);
    std::swap(rpnum_, other->rpnum_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpLeaderboardMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpLeaderboardMessage_descriptor_;
  metadata.reflection = RpLeaderboardMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfileCarInfo::kUserCarIdFieldNumber;
const int ProfileCarInfo::kCarIdFieldNumber;
const int ProfileCarInfo::kSlotLevelFieldNumber;
const int ProfileCarInfo::kCarPaintJobIndexFieldNumber;
const int ProfileCarInfo::kCarScoreFieldNumber;
const int ProfileCarInfo::kLikeNumFieldNumber;
const int ProfileCarInfo::kCanLikeFieldNumber;
#endif  // !_MSC_VER

ProfileCarInfo::ProfileCarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfileCarInfo::InitAsDefaultInstance() {
}

ProfileCarInfo::ProfileCarInfo(const ProfileCarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfileCarInfo::SharedCtor() {
  _cached_size_ = 0;
  usercarid_ = GOOGLE_LONGLONG(0);
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carpaintjobindex_ = 0;
  carscore_ = 0;
  likenum_ = GOOGLE_LONGLONG(0);
  canlike_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfileCarInfo::~ProfileCarInfo() {
  SharedDtor();
}

void ProfileCarInfo::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void ProfileCarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfileCarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfileCarInfo_descriptor_;
}

const ProfileCarInfo& ProfileCarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ProfileCarInfo* ProfileCarInfo::default_instance_ = NULL;

ProfileCarInfo* ProfileCarInfo::New() const {
  return new ProfileCarInfo;
}

void ProfileCarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usercarid_ = GOOGLE_LONGLONG(0);
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    carpaintjobindex_ = 0;
    carscore_ = 0;
    likenum_ = GOOGLE_LONGLONG(0);
    canlike_ = false;
  }
  slotlevel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfileCarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userCarId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usercarid_)));
          set_has_usercarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carId;
        break;
      }
      
      // required string carId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slotLevel;
        break;
      }
      
      // repeated int32 slotLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_slotlevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_slotlevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slotLevel;
        if (input->ExpectTag(32)) goto parse_carPaintJobIndex;
        break;
      }
      
      // required int32 carPaintJobIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carPaintJobIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carpaintjobindex_)));
          set_has_carpaintjobindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_carScore;
        break;
      }
      
      // required int32 carScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carscore_)));
          set_has_carscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_likeNum;
        break;
      }
      
      // required int64 likeNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_likeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &likenum_)));
          set_has_likenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_canLike;
        break;
      }
      
      // required bool canLike = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canLike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canlike_)));
          set_has_canlike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfileCarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userCarId = 1;
  if (has_usercarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usercarid(), output);
  }
  
  // required string carId = 2;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->carid(), output);
  }
  
  // repeated int32 slotLevel = 3;
  for (int i = 0; i < this->slotlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->slotlevel(i), output);
  }
  
  // required int32 carPaintJobIndex = 4;
  if (has_carpaintjobindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->carpaintjobindex(), output);
  }
  
  // required int32 carScore = 5;
  if (has_carscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->carscore(), output);
  }
  
  // required int64 likeNum = 6;
  if (has_likenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->likenum(), output);
  }
  
  // required bool canLike = 7;
  if (has_canlike()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->canlike(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfileCarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userCarId = 1;
  if (has_usercarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->usercarid(), target);
  }
  
  // required string carId = 2;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->carid(), target);
  }
  
  // repeated int32 slotLevel = 3;
  for (int i = 0; i < this->slotlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->slotlevel(i), target);
  }
  
  // required int32 carPaintJobIndex = 4;
  if (has_carpaintjobindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->carpaintjobindex(), target);
  }
  
  // required int32 carScore = 5;
  if (has_carscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->carscore(), target);
  }
  
  // required int64 likeNum = 6;
  if (has_likenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->likenum(), target);
  }
  
  // required bool canLike = 7;
  if (has_canlike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->canlike(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfileCarInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userCarId = 1;
    if (has_usercarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usercarid());
    }
    
    // required string carId = 2;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 carPaintJobIndex = 4;
    if (has_carpaintjobindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carpaintjobindex());
    }
    
    // required int32 carScore = 5;
    if (has_carscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carscore());
    }
    
    // required int64 likeNum = 6;
    if (has_likenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->likenum());
    }
    
    // required bool canLike = 7;
    if (has_canlike()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 slotLevel = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->slotlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->slotlevel(i));
    }
    total_size += 1 * this->slotlevel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfileCarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfileCarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfileCarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfileCarInfo::MergeFrom(const ProfileCarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotlevel_.MergeFrom(from.slotlevel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercarid()) {
      set_usercarid(from.usercarid());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_carpaintjobindex()) {
      set_carpaintjobindex(from.carpaintjobindex());
    }
    if (from.has_carscore()) {
      set_carscore(from.carscore());
    }
    if (from.has_likenum()) {
      set_likenum(from.likenum());
    }
    if (from.has_canlike()) {
      set_canlike(from.canlike());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfileCarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfileCarInfo::CopyFrom(const ProfileCarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileCarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007b) != 0x0000007b) return false;
  
  return true;
}

void ProfileCarInfo::Swap(ProfileCarInfo* other) {
  if (other != this) {
    std::swap(usercarid_, other->usercarid_);
    std::swap(carid_, other->carid_);
    slotlevel_.Swap(&other->slotlevel_);
    std::swap(carpaintjobindex_, other->carpaintjobindex_);
    std::swap(carscore_, other->carscore_);
    std::swap(likenum_, other->likenum_);
    std::swap(canlike_, other->canlike_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfileCarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfileCarInfo_descriptor_;
  metadata.reflection = ProfileCarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProfileUserDataCommand::kProfileIdFieldNumber;
const int RequestProfileUserDataCommand::kSourceTypeIdFieldNumber;
const int RequestProfileUserDataCommand::kTournamentOnlineIdFieldNumber;
const int RequestProfileUserDataCommand::kTournamentGroupIdFieldNumber;
#endif  // !_MSC_VER

RequestProfileUserDataCommand::RequestProfileUserDataCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProfileUserDataCommand::InitAsDefaultInstance() {
}

RequestProfileUserDataCommand::RequestProfileUserDataCommand(const RequestProfileUserDataCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProfileUserDataCommand::SharedCtor() {
  _cached_size_ = 0;
  profileid_ = GOOGLE_LONGLONG(0);
  sourcetypeid_ = 0;
  tournamentonlineid_ = 0;
  tournamentgroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProfileUserDataCommand::~RequestProfileUserDataCommand() {
  SharedDtor();
}

void RequestProfileUserDataCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestProfileUserDataCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProfileUserDataCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProfileUserDataCommand_descriptor_;
}

const RequestProfileUserDataCommand& RequestProfileUserDataCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestProfileUserDataCommand* RequestProfileUserDataCommand::default_instance_ = NULL;

RequestProfileUserDataCommand* RequestProfileUserDataCommand::New() const {
  return new RequestProfileUserDataCommand;
}

void RequestProfileUserDataCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    profileid_ = GOOGLE_LONGLONG(0);
    sourcetypeid_ = 0;
    tournamentonlineid_ = 0;
    tournamentgroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProfileUserDataCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 profileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profileid_)));
          set_has_profileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sourceTypeId;
        break;
      }
      
      // required int32 sourceTypeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceTypeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourcetypeid_)));
          set_has_sourcetypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tournamentOnlineId;
        break;
      }
      
      // required int32 tournamentOnlineId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentOnlineId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentonlineid_)));
          set_has_tournamentonlineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tournamentGroupId;
        break;
      }
      
      // required int32 tournamentGroupId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tournamentGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tournamentgroupid_)));
          set_has_tournamentgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProfileUserDataCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 profileId = 1;
  if (has_profileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->profileid(), output);
  }
  
  // required int32 sourceTypeId = 2;
  if (has_sourcetypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sourcetypeid(), output);
  }
  
  // required int32 tournamentOnlineId = 3;
  if (has_tournamentonlineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tournamentonlineid(), output);
  }
  
  // required int32 tournamentGroupId = 4;
  if (has_tournamentgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tournamentgroupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProfileUserDataCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 profileId = 1;
  if (has_profileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->profileid(), target);
  }
  
  // required int32 sourceTypeId = 2;
  if (has_sourcetypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sourcetypeid(), target);
  }
  
  // required int32 tournamentOnlineId = 3;
  if (has_tournamentonlineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tournamentonlineid(), target);
  }
  
  // required int32 tournamentGroupId = 4;
  if (has_tournamentgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tournamentgroupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProfileUserDataCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 profileId = 1;
    if (has_profileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profileid());
    }
    
    // required int32 sourceTypeId = 2;
    if (has_sourcetypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourcetypeid());
    }
    
    // required int32 tournamentOnlineId = 3;
    if (has_tournamentonlineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentonlineid());
    }
    
    // required int32 tournamentGroupId = 4;
    if (has_tournamentgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tournamentgroupid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProfileUserDataCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProfileUserDataCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProfileUserDataCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProfileUserDataCommand::MergeFrom(const RequestProfileUserDataCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_profileid()) {
      set_profileid(from.profileid());
    }
    if (from.has_sourcetypeid()) {
      set_sourcetypeid(from.sourcetypeid());
    }
    if (from.has_tournamentonlineid()) {
      set_tournamentonlineid(from.tournamentonlineid());
    }
    if (from.has_tournamentgroupid()) {
      set_tournamentgroupid(from.tournamentgroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProfileUserDataCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProfileUserDataCommand::CopyFrom(const RequestProfileUserDataCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProfileUserDataCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RequestProfileUserDataCommand::Swap(RequestProfileUserDataCommand* other) {
  if (other != this) {
    std::swap(profileid_, other->profileid_);
    std::swap(sourcetypeid_, other->sourcetypeid_);
    std::swap(tournamentonlineid_, other->tournamentonlineid_);
    std::swap(tournamentgroupid_, other->tournamentgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProfileUserDataCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProfileUserDataCommand_descriptor_;
  metadata.reflection = RequestProfileUserDataCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseProfileUserDataCommand::kNicknameFieldNumber;
const int ResponseProfileUserDataCommand::kHeadUrlFieldNumber;
const int ResponseProfileUserDataCommand::kHeadIndexFieldNumber;
const int ResponseProfileUserDataCommand::kRpLevelFieldNumber;
const int ResponseProfileUserDataCommand::kRpExpFieldNumber;
const int ResponseProfileUserDataCommand::kMostwantedNumFieldNumber;
const int ResponseProfileUserDataCommand::kCarNumFieldNumber;
const int ResponseProfileUserDataCommand::kGarageScoreFieldNumber;
const int ResponseProfileUserDataCommand::kCanReportFieldNumber;
const int ResponseProfileUserDataCommand::kCarInfoFieldNumber;
const int ResponseProfileUserDataCommand::kOwnedCarIdFieldNumber;
const int ResponseProfileUserDataCommand::kOwnedUserCarIdFieldNumber;
#endif  // !_MSC_VER

ResponseProfileUserDataCommand::ResponseProfileUserDataCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseProfileUserDataCommand::InitAsDefaultInstance() {
  carinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo*>(&::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo::default_instance());
}

ResponseProfileUserDataCommand::ResponseProfileUserDataCommand(const ResponseProfileUserDataCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseProfileUserDataCommand::SharedCtor() {
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headindex_ = 0;
  rplevel_ = 0;
  rpexp_ = 0;
  mostwantednum_ = 0;
  carnum_ = 0;
  garagescore_ = 0;
  canreport_ = false;
  carinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseProfileUserDataCommand::~ResponseProfileUserDataCommand() {
  SharedDtor();
}

void ResponseProfileUserDataCommand::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (this != default_instance_) {
    delete carinfo_;
  }
}

void ResponseProfileUserDataCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseProfileUserDataCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseProfileUserDataCommand_descriptor_;
}

const ResponseProfileUserDataCommand& ResponseProfileUserDataCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseProfileUserDataCommand* ResponseProfileUserDataCommand::default_instance_ = NULL;

ResponseProfileUserDataCommand* ResponseProfileUserDataCommand::New() const {
  return new ResponseProfileUserDataCommand;
}

void ResponseProfileUserDataCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    headindex_ = 0;
    rplevel_ = 0;
    rpexp_ = 0;
    mostwantednum_ = 0;
    carnum_ = 0;
    garagescore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    canreport_ = false;
    if (has_carinfo()) {
      if (carinfo_ != NULL) carinfo_->::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo::Clear();
    }
  }
  ownedcarid_.Clear();
  ownedusercarid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseProfileUserDataCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_headUrl;
        break;
      }
      
      // required string headUrl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rpLevel;
        break;
      }
      
      // required int32 rpLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rplevel_)));
          set_has_rplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rpExp;
        break;
      }
      
      // required int32 rpExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpexp_)));
          set_has_rpexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mostwantedNum;
        break;
      }
      
      // required int32 mostwantedNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mostwantedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mostwantednum_)));
          set_has_mostwantednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_carNum;
        break;
      }
      
      // required int32 carNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carnum_)));
          set_has_carnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_garageScore;
        break;
      }
      
      // required int32 garageScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_garageScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &garagescore_)));
          set_has_garagescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_canReport;
        break;
      }
      
      // required bool canReport = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canreport_)));
          set_has_canreport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_carInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ownedCarId;
        break;
      }
      
      // repeated string ownedCarId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownedCarId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ownedcarid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownedcarid(0).data(), this->ownedcarid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ownedCarId;
        if (input->ExpectTag(96)) goto parse_ownedUserCarId;
        break;
      }
      
      // repeated int64 ownedUserCarId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownedUserCarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 96, input, this->mutable_ownedusercarid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ownedusercarid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ownedUserCarId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseProfileUserDataCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nickname(), output);
  }
  
  // required string headUrl = 2;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->headurl(), output);
  }
  
  // required int32 headIndex = 3;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->headindex(), output);
  }
  
  // required int32 rpLevel = 4;
  if (has_rplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rplevel(), output);
  }
  
  // required int32 rpExp = 5;
  if (has_rpexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rpexp(), output);
  }
  
  // required int32 mostwantedNum = 6;
  if (has_mostwantednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mostwantednum(), output);
  }
  
  // required int32 carNum = 7;
  if (has_carnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->carnum(), output);
  }
  
  // required int32 garageScore = 8;
  if (has_garagescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->garagescore(), output);
  }
  
  // required bool canReport = 9;
  if (has_canreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->canreport(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 10;
  if (has_carinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->carinfo(), output);
  }
  
  // repeated string ownedCarId = 11;
  for (int i = 0; i < this->ownedcarid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ownedcarid(i).data(), this->ownedcarid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->ownedcarid(i), output);
  }
  
  // repeated int64 ownedUserCarId = 12;
  for (int i = 0; i < this->ownedusercarid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      12, this->ownedusercarid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseProfileUserDataCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }
  
  // required string headUrl = 2;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->headurl(), target);
  }
  
  // required int32 headIndex = 3;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->headindex(), target);
  }
  
  // required int32 rpLevel = 4;
  if (has_rplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rplevel(), target);
  }
  
  // required int32 rpExp = 5;
  if (has_rpexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rpexp(), target);
  }
  
  // required int32 mostwantedNum = 6;
  if (has_mostwantednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mostwantednum(), target);
  }
  
  // required int32 carNum = 7;
  if (has_carnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->carnum(), target);
  }
  
  // required int32 garageScore = 8;
  if (has_garagescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->garagescore(), target);
  }
  
  // required bool canReport = 9;
  if (has_canreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->canreport(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 10;
  if (has_carinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->carinfo(), target);
  }
  
  // repeated string ownedCarId = 11;
  for (int i = 0; i < this->ownedcarid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownedcarid(i).data(), this->ownedcarid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->ownedcarid(i), target);
  }
  
  // repeated int64 ownedUserCarId = 12;
  for (int i = 0; i < this->ownedusercarid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(12, this->ownedusercarid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseProfileUserDataCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }
    
    // required string headUrl = 2;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // required int32 headIndex = 3;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // required int32 rpLevel = 4;
    if (has_rplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rplevel());
    }
    
    // required int32 rpExp = 5;
    if (has_rpexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpexp());
    }
    
    // required int32 mostwantedNum = 6;
    if (has_mostwantednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mostwantednum());
    }
    
    // required int32 carNum = 7;
    if (has_carnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->carnum());
    }
    
    // required int32 garageScore = 8;
    if (has_garagescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->garagescore());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool canReport = 9;
    if (has_canreport()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 10;
    if (has_carinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carinfo());
    }
    
  }
  // repeated string ownedCarId = 11;
  total_size += 1 * this->ownedcarid_size();
  for (int i = 0; i < this->ownedcarid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ownedcarid(i));
  }
  
  // repeated int64 ownedUserCarId = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->ownedusercarid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ownedusercarid(i));
    }
    total_size += 1 * this->ownedusercarid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseProfileUserDataCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseProfileUserDataCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseProfileUserDataCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseProfileUserDataCommand::MergeFrom(const ResponseProfileUserDataCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  ownedcarid_.MergeFrom(from.ownedcarid_);
  ownedusercarid_.MergeFrom(from.ownedusercarid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_rplevel()) {
      set_rplevel(from.rplevel());
    }
    if (from.has_rpexp()) {
      set_rpexp(from.rpexp());
    }
    if (from.has_mostwantednum()) {
      set_mostwantednum(from.mostwantednum());
    }
    if (from.has_carnum()) {
      set_carnum(from.carnum());
    }
    if (from.has_garagescore()) {
      set_garagescore(from.garagescore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_canreport()) {
      set_canreport(from.canreport());
    }
    if (from.has_carinfo()) {
      mutable_carinfo()->::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo::MergeFrom(from.carinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseProfileUserDataCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseProfileUserDataCommand::CopyFrom(const ResponseProfileUserDataCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseProfileUserDataCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  if (has_carinfo()) {
    if (!this->carinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseProfileUserDataCommand::Swap(ResponseProfileUserDataCommand* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(headurl_, other->headurl_);
    std::swap(headindex_, other->headindex_);
    std::swap(rplevel_, other->rplevel_);
    std::swap(rpexp_, other->rpexp_);
    std::swap(mostwantednum_, other->mostwantednum_);
    std::swap(carnum_, other->carnum_);
    std::swap(garagescore_, other->garagescore_);
    std::swap(canreport_, other->canreport_);
    std::swap(carinfo_, other->carinfo_);
    ownedcarid_.Swap(&other->ownedcarid_);
    ownedusercarid_.Swap(&other->ownedusercarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseProfileUserDataCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseProfileUserDataCommand_descriptor_;
  metadata.reflection = ResponseProfileUserDataCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProfileNextCarCommand::kUserCarIdFieldNumber;
#endif  // !_MSC_VER

RequestProfileNextCarCommand::RequestProfileNextCarCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProfileNextCarCommand::InitAsDefaultInstance() {
}

RequestProfileNextCarCommand::RequestProfileNextCarCommand(const RequestProfileNextCarCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProfileNextCarCommand::SharedCtor() {
  _cached_size_ = 0;
  usercarid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProfileNextCarCommand::~RequestProfileNextCarCommand() {
  SharedDtor();
}

void RequestProfileNextCarCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestProfileNextCarCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProfileNextCarCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProfileNextCarCommand_descriptor_;
}

const RequestProfileNextCarCommand& RequestProfileNextCarCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestProfileNextCarCommand* RequestProfileNextCarCommand::default_instance_ = NULL;

RequestProfileNextCarCommand* RequestProfileNextCarCommand::New() const {
  return new RequestProfileNextCarCommand;
}

void RequestProfileNextCarCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usercarid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProfileNextCarCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userCarId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usercarid_)));
          set_has_usercarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProfileNextCarCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userCarId = 1;
  if (has_usercarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usercarid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProfileNextCarCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userCarId = 1;
  if (has_usercarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->usercarid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProfileNextCarCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userCarId = 1;
    if (has_usercarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usercarid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProfileNextCarCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProfileNextCarCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProfileNextCarCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProfileNextCarCommand::MergeFrom(const RequestProfileNextCarCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercarid()) {
      set_usercarid(from.usercarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProfileNextCarCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProfileNextCarCommand::CopyFrom(const RequestProfileNextCarCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProfileNextCarCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestProfileNextCarCommand::Swap(RequestProfileNextCarCommand* other) {
  if (other != this) {
    std::swap(usercarid_, other->usercarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProfileNextCarCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProfileNextCarCommand_descriptor_;
  metadata.reflection = RequestProfileNextCarCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseProfileNextCarCommand::kCarInfoFieldNumber;
#endif  // !_MSC_VER

ResponseProfileNextCarCommand::ResponseProfileNextCarCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseProfileNextCarCommand::InitAsDefaultInstance() {
  carinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo*>(&::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo::default_instance());
}

ResponseProfileNextCarCommand::ResponseProfileNextCarCommand(const ResponseProfileNextCarCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseProfileNextCarCommand::SharedCtor() {
  _cached_size_ = 0;
  carinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseProfileNextCarCommand::~ResponseProfileNextCarCommand() {
  SharedDtor();
}

void ResponseProfileNextCarCommand::SharedDtor() {
  if (this != default_instance_) {
    delete carinfo_;
  }
}

void ResponseProfileNextCarCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseProfileNextCarCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseProfileNextCarCommand_descriptor_;
}

const ResponseProfileNextCarCommand& ResponseProfileNextCarCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseProfileNextCarCommand* ResponseProfileNextCarCommand::default_instance_ = NULL;

ResponseProfileNextCarCommand* ResponseProfileNextCarCommand::New() const {
  return new ResponseProfileNextCarCommand;
}

void ResponseProfileNextCarCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_carinfo()) {
      if (carinfo_ != NULL) carinfo_->::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseProfileNextCarCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseProfileNextCarCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 1;
  if (has_carinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->carinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseProfileNextCarCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 1;
  if (has_carinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->carinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseProfileNextCarCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.ProfileCarInfo carInfo = 1;
    if (has_carinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseProfileNextCarCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseProfileNextCarCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseProfileNextCarCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseProfileNextCarCommand::MergeFrom(const ResponseProfileNextCarCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carinfo()) {
      mutable_carinfo()->::com::ea::eamobile::nfsmw::protoc::ProfileCarInfo::MergeFrom(from.carinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseProfileNextCarCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseProfileNextCarCommand::CopyFrom(const ResponseProfileNextCarCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseProfileNextCarCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_carinfo()) {
    if (!this->carinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseProfileNextCarCommand::Swap(ResponseProfileNextCarCommand* other) {
  if (other != this) {
    std::swap(carinfo_, other->carinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseProfileNextCarCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseProfileNextCarCommand_descriptor_;
  metadata.reflection = ResponseProfileNextCarCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProfileLikeCommand::kUserCarIdFieldNumber;
#endif  // !_MSC_VER

RequestProfileLikeCommand::RequestProfileLikeCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProfileLikeCommand::InitAsDefaultInstance() {
}

RequestProfileLikeCommand::RequestProfileLikeCommand(const RequestProfileLikeCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProfileLikeCommand::SharedCtor() {
  _cached_size_ = 0;
  usercarid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProfileLikeCommand::~RequestProfileLikeCommand() {
  SharedDtor();
}

void RequestProfileLikeCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestProfileLikeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProfileLikeCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProfileLikeCommand_descriptor_;
}

const RequestProfileLikeCommand& RequestProfileLikeCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestProfileLikeCommand* RequestProfileLikeCommand::default_instance_ = NULL;

RequestProfileLikeCommand* RequestProfileLikeCommand::New() const {
  return new RequestProfileLikeCommand;
}

void RequestProfileLikeCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usercarid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProfileLikeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 userCarId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usercarid_)));
          set_has_usercarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProfileLikeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 userCarId = 1;
  if (has_usercarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->usercarid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProfileLikeCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 userCarId = 1;
  if (has_usercarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->usercarid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProfileLikeCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 userCarId = 1;
    if (has_usercarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usercarid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProfileLikeCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProfileLikeCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProfileLikeCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProfileLikeCommand::MergeFrom(const RequestProfileLikeCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usercarid()) {
      set_usercarid(from.usercarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProfileLikeCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProfileLikeCommand::CopyFrom(const RequestProfileLikeCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProfileLikeCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestProfileLikeCommand::Swap(RequestProfileLikeCommand* other) {
  if (other != this) {
    std::swap(usercarid_, other->usercarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProfileLikeCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProfileLikeCommand_descriptor_;
  metadata.reflection = RequestProfileLikeCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseProfileLikeCommand::kLikeNumFieldNumber;
#endif  // !_MSC_VER

ResponseProfileLikeCommand::ResponseProfileLikeCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseProfileLikeCommand::InitAsDefaultInstance() {
}

ResponseProfileLikeCommand::ResponseProfileLikeCommand(const ResponseProfileLikeCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseProfileLikeCommand::SharedCtor() {
  _cached_size_ = 0;
  likenum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseProfileLikeCommand::~ResponseProfileLikeCommand() {
  SharedDtor();
}

void ResponseProfileLikeCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseProfileLikeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseProfileLikeCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseProfileLikeCommand_descriptor_;
}

const ResponseProfileLikeCommand& ResponseProfileLikeCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseProfileLikeCommand* ResponseProfileLikeCommand::default_instance_ = NULL;

ResponseProfileLikeCommand* ResponseProfileLikeCommand::New() const {
  return new ResponseProfileLikeCommand;
}

void ResponseProfileLikeCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    likenum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseProfileLikeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 likeNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &likenum_)));
          set_has_likenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseProfileLikeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 likeNum = 1;
  if (has_likenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->likenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseProfileLikeCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 likeNum = 1;
  if (has_likenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->likenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseProfileLikeCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 likeNum = 1;
    if (has_likenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->likenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseProfileLikeCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseProfileLikeCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseProfileLikeCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseProfileLikeCommand::MergeFrom(const ResponseProfileLikeCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_likenum()) {
      set_likenum(from.likenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseProfileLikeCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseProfileLikeCommand::CopyFrom(const ResponseProfileLikeCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseProfileLikeCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseProfileLikeCommand::Swap(ResponseProfileLikeCommand* other) {
  if (other != this) {
    std::swap(likenum_, other->likenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseProfileLikeCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseProfileLikeCommand_descriptor_;
  metadata.reflection = ResponseProfileLikeCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProfileReportCommand::kProfileIdFieldNumber;
#endif  // !_MSC_VER

RequestProfileReportCommand::RequestProfileReportCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProfileReportCommand::InitAsDefaultInstance() {
}

RequestProfileReportCommand::RequestProfileReportCommand(const RequestProfileReportCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProfileReportCommand::SharedCtor() {
  _cached_size_ = 0;
  profileid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProfileReportCommand::~RequestProfileReportCommand() {
  SharedDtor();
}

void RequestProfileReportCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestProfileReportCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProfileReportCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProfileReportCommand_descriptor_;
}

const RequestProfileReportCommand& RequestProfileReportCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestProfileReportCommand* RequestProfileReportCommand::default_instance_ = NULL;

RequestProfileReportCommand* RequestProfileReportCommand::New() const {
  return new RequestProfileReportCommand;
}

void RequestProfileReportCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    profileid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProfileReportCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 profileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profileid_)));
          set_has_profileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProfileReportCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 profileId = 1;
  if (has_profileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->profileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProfileReportCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 profileId = 1;
  if (has_profileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->profileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProfileReportCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 profileId = 1;
    if (has_profileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profileid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProfileReportCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProfileReportCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProfileReportCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProfileReportCommand::MergeFrom(const RequestProfileReportCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_profileid()) {
      set_profileid(from.profileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProfileReportCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProfileReportCommand::CopyFrom(const RequestProfileReportCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProfileReportCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestProfileReportCommand::Swap(RequestProfileReportCommand* other) {
  if (other != this) {
    std::swap(profileid_, other->profileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProfileReportCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProfileReportCommand_descriptor_;
  metadata.reflection = RequestProfileReportCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResponseProfileReportCommand::ResponseProfileReportCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseProfileReportCommand::InitAsDefaultInstance() {
}

ResponseProfileReportCommand::ResponseProfileReportCommand(const ResponseProfileReportCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseProfileReportCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseProfileReportCommand::~ResponseProfileReportCommand() {
  SharedDtor();
}

void ResponseProfileReportCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseProfileReportCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseProfileReportCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseProfileReportCommand_descriptor_;
}

const ResponseProfileReportCommand& ResponseProfileReportCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseProfileReportCommand* ResponseProfileReportCommand::default_instance_ = NULL;

ResponseProfileReportCommand* ResponseProfileReportCommand::New() const {
  return new ResponseProfileReportCommand;
}

void ResponseProfileReportCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseProfileReportCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ResponseProfileReportCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseProfileReportCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseProfileReportCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseProfileReportCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseProfileReportCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseProfileReportCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseProfileReportCommand::MergeFrom(const ResponseProfileReportCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseProfileReportCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseProfileReportCommand::CopyFrom(const ResponseProfileReportCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseProfileReportCommand::IsInitialized() const {
  
  return true;
}

void ResponseProfileReportCommand::Swap(ResponseProfileReportCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseProfileReportCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseProfileReportCommand_descriptor_;
  metadata.reflection = ResponseProfileReportCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserVSProfile::kTitleStrFieldNumber;
const int UserVSProfile::kPlayerValueFieldNumber;
const int UserVSProfile::kGhostValueFieldNumber;
const int UserVSProfile::kHasProgressBarFieldNumber;
const int UserVSProfile::kSubTitleStrFieldNumber;
const int UserVSProfile::kUnitsStrFieldNumber;
const int UserVSProfile::kValueTypeFieldNumber;
#endif  // !_MSC_VER

UserVSProfile::UserVSProfile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserVSProfile::InitAsDefaultInstance() {
}

UserVSProfile::UserVSProfile(const UserVSProfile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserVSProfile::SharedCtor() {
  _cached_size_ = 0;
  titlestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playervalue_ = 0;
  ghostvalue_ = 0;
  hasprogressbar_ = false;
  subtitlestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unitsstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valuetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserVSProfile::~UserVSProfile() {
  SharedDtor();
}

void UserVSProfile::SharedDtor() {
  if (titlestr_ != &::google::protobuf::internal::kEmptyString) {
    delete titlestr_;
  }
  if (subtitlestr_ != &::google::protobuf::internal::kEmptyString) {
    delete subtitlestr_;
  }
  if (unitsstr_ != &::google::protobuf::internal::kEmptyString) {
    delete unitsstr_;
  }
  if (this != default_instance_) {
  }
}

void UserVSProfile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserVSProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserVSProfile_descriptor_;
}

const UserVSProfile& UserVSProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

UserVSProfile* UserVSProfile::default_instance_ = NULL;

UserVSProfile* UserVSProfile::New() const {
  return new UserVSProfile;
}

void UserVSProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_titlestr()) {
      if (titlestr_ != &::google::protobuf::internal::kEmptyString) {
        titlestr_->clear();
      }
    }
    playervalue_ = 0;
    ghostvalue_ = 0;
    hasprogressbar_ = false;
    if (has_subtitlestr()) {
      if (subtitlestr_ != &::google::protobuf::internal::kEmptyString) {
        subtitlestr_->clear();
      }
    }
    if (has_unitsstr()) {
      if (unitsstr_ != &::google::protobuf::internal::kEmptyString) {
        unitsstr_->clear();
      }
    }
    valuetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserVSProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string titleStr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titlestr().data(), this->titlestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerValue;
        break;
      }
      
      // required int32 playerValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playervalue_)));
          set_has_playervalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ghostValue;
        break;
      }
      
      // required int32 ghostValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ghostValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ghostvalue_)));
          set_has_ghostvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasProgressBar;
        break;
      }
      
      // required bool hasProgressBar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasProgressBar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasprogressbar_)));
          set_has_hasprogressbar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subTitleStr;
        break;
      }
      
      // required string subTitleStr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subTitleStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitlestr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtitlestr().data(), this->subtitlestr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_unitsStr;
        break;
      }
      
      // required string unitsStr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitsStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitsstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitsstr().data(), this->unitsstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_valueType;
        break;
      }
      
      // required int32 valueType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuetype_)));
          set_has_valuetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserVSProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string titleStr = 1;
  if (has_titlestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlestr().data(), this->titlestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->titlestr(), output);
  }
  
  // required int32 playerValue = 2;
  if (has_playervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playervalue(), output);
  }
  
  // required int32 ghostValue = 3;
  if (has_ghostvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ghostvalue(), output);
  }
  
  // required bool hasProgressBar = 4;
  if (has_hasprogressbar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasprogressbar(), output);
  }
  
  // required string subTitleStr = 5;
  if (has_subtitlestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtitlestr().data(), this->subtitlestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subtitlestr(), output);
  }
  
  // required string unitsStr = 6;
  if (has_unitsstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsstr().data(), this->unitsstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->unitsstr(), output);
  }
  
  // required int32 valueType = 7;
  if (has_valuetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->valuetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserVSProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string titleStr = 1;
  if (has_titlestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titlestr().data(), this->titlestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->titlestr(), target);
  }
  
  // required int32 playerValue = 2;
  if (has_playervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playervalue(), target);
  }
  
  // required int32 ghostValue = 3;
  if (has_ghostvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ghostvalue(), target);
  }
  
  // required bool hasProgressBar = 4;
  if (has_hasprogressbar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasprogressbar(), target);
  }
  
  // required string subTitleStr = 5;
  if (has_subtitlestr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtitlestr().data(), this->subtitlestr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subtitlestr(), target);
  }
  
  // required string unitsStr = 6;
  if (has_unitsstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitsstr().data(), this->unitsstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unitsstr(), target);
  }
  
  // required int32 valueType = 7;
  if (has_valuetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->valuetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserVSProfile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string titleStr = 1;
    if (has_titlestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlestr());
    }
    
    // required int32 playerValue = 2;
    if (has_playervalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playervalue());
    }
    
    // required int32 ghostValue = 3;
    if (has_ghostvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ghostvalue());
    }
    
    // required bool hasProgressBar = 4;
    if (has_hasprogressbar()) {
      total_size += 1 + 1;
    }
    
    // required string subTitleStr = 5;
    if (has_subtitlestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtitlestr());
    }
    
    // required string unitsStr = 6;
    if (has_unitsstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitsstr());
    }
    
    // required int32 valueType = 7;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserVSProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserVSProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserVSProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserVSProfile::MergeFrom(const UserVSProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titlestr()) {
      set_titlestr(from.titlestr());
    }
    if (from.has_playervalue()) {
      set_playervalue(from.playervalue());
    }
    if (from.has_ghostvalue()) {
      set_ghostvalue(from.ghostvalue());
    }
    if (from.has_hasprogressbar()) {
      set_hasprogressbar(from.hasprogressbar());
    }
    if (from.has_subtitlestr()) {
      set_subtitlestr(from.subtitlestr());
    }
    if (from.has_unitsstr()) {
      set_unitsstr(from.unitsstr());
    }
    if (from.has_valuetype()) {
      set_valuetype(from.valuetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserVSProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserVSProfile::CopyFrom(const UserVSProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserVSProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void UserVSProfile::Swap(UserVSProfile* other) {
  if (other != this) {
    std::swap(titlestr_, other->titlestr_);
    std::swap(playervalue_, other->playervalue_);
    std::swap(ghostvalue_, other->ghostvalue_);
    std::swap(hasprogressbar_, other->hasprogressbar_);
    std::swap(subtitlestr_, other->subtitlestr_);
    std::swap(unitsstr_, other->unitsstr_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserVSProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserVSProfile_descriptor_;
  metadata.reflection = UserVSProfile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProfileVSCommand::kProfileIdFieldNumber;
#endif  // !_MSC_VER

RequestProfileVSCommand::RequestProfileVSCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProfileVSCommand::InitAsDefaultInstance() {
}

RequestProfileVSCommand::RequestProfileVSCommand(const RequestProfileVSCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProfileVSCommand::SharedCtor() {
  _cached_size_ = 0;
  profileid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProfileVSCommand::~RequestProfileVSCommand() {
  SharedDtor();
}

void RequestProfileVSCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestProfileVSCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProfileVSCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProfileVSCommand_descriptor_;
}

const RequestProfileVSCommand& RequestProfileVSCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestProfileVSCommand* RequestProfileVSCommand::default_instance_ = NULL;

RequestProfileVSCommand* RequestProfileVSCommand::New() const {
  return new RequestProfileVSCommand;
}

void RequestProfileVSCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    profileid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProfileVSCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 profileId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &profileid_)));
          set_has_profileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProfileVSCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 profileId = 1;
  if (has_profileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->profileid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProfileVSCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 profileId = 1;
  if (has_profileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->profileid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProfileVSCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 profileId = 1;
    if (has_profileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->profileid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProfileVSCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProfileVSCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProfileVSCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProfileVSCommand::MergeFrom(const RequestProfileVSCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_profileid()) {
      set_profileid(from.profileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProfileVSCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProfileVSCommand::CopyFrom(const RequestProfileVSCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProfileVSCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestProfileVSCommand::Swap(RequestProfileVSCommand* other) {
  if (other != this) {
    std::swap(profileid_, other->profileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProfileVSCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProfileVSCommand_descriptor_;
  metadata.reflection = RequestProfileVSCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseProfileVSCommand::kVsDataFieldNumber;
#endif  // !_MSC_VER

ResponseProfileVSCommand::ResponseProfileVSCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseProfileVSCommand::InitAsDefaultInstance() {
}

ResponseProfileVSCommand::ResponseProfileVSCommand(const ResponseProfileVSCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseProfileVSCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseProfileVSCommand::~ResponseProfileVSCommand() {
  SharedDtor();
}

void ResponseProfileVSCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseProfileVSCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseProfileVSCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseProfileVSCommand_descriptor_;
}

const ResponseProfileVSCommand& ResponseProfileVSCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseProfileVSCommand* ResponseProfileVSCommand::default_instance_ = NULL;

ResponseProfileVSCommand* ResponseProfileVSCommand::New() const {
  return new ResponseProfileVSCommand;
}

void ResponseProfileVSCommand::Clear() {
  vsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseProfileVSCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.UserVSProfile vsData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vsData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vsdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vsData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseProfileVSCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.UserVSProfile vsData = 1;
  for (int i = 0; i < this->vsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vsdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseProfileVSCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.UserVSProfile vsData = 1;
  for (int i = 0; i < this->vsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vsdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseProfileVSCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.UserVSProfile vsData = 1;
  total_size += 1 * this->vsdata_size();
  for (int i = 0; i < this->vsdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vsdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseProfileVSCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseProfileVSCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseProfileVSCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseProfileVSCommand::MergeFrom(const ResponseProfileVSCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  vsdata_.MergeFrom(from.vsdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseProfileVSCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseProfileVSCommand::CopyFrom(const ResponseProfileVSCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseProfileVSCommand::IsInitialized() const {
  
  for (int i = 0; i < vsdata_size(); i++) {
    if (!this->vsdata(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseProfileVSCommand::Swap(ResponseProfileVSCommand* other) {
  if (other != this) {
    vsdata_.Swap(&other->vsdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseProfileVSCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseProfileVSCommand_descriptor_;
  metadata.reflection = ResponseProfileVSCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRecordUserRaceActionCommand::kCopsKillFieldNumber;
const int RequestRecordUserRaceActionCommand::kConsumableFieldNumber;
const int RequestRecordUserRaceActionCommand::kDriftFieldNumber;
const int RequestRecordUserRaceActionCommand::kJumpFieldNumber;
const int RequestRecordUserRaceActionCommand::kBillBoardFieldNumber;
#endif  // !_MSC_VER

RequestRecordUserRaceActionCommand::RequestRecordUserRaceActionCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRecordUserRaceActionCommand::InitAsDefaultInstance() {
}

RequestRecordUserRaceActionCommand::RequestRecordUserRaceActionCommand(const RequestRecordUserRaceActionCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRecordUserRaceActionCommand::SharedCtor() {
  _cached_size_ = 0;
  copskill_ = 0;
  consumable_ = 0;
  drift_ = 0;
  jump_ = 0;
  billboard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRecordUserRaceActionCommand::~RequestRecordUserRaceActionCommand() {
  SharedDtor();
}

void RequestRecordUserRaceActionCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRecordUserRaceActionCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRecordUserRaceActionCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRecordUserRaceActionCommand_descriptor_;
}

const RequestRecordUserRaceActionCommand& RequestRecordUserRaceActionCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestRecordUserRaceActionCommand* RequestRecordUserRaceActionCommand::default_instance_ = NULL;

RequestRecordUserRaceActionCommand* RequestRecordUserRaceActionCommand::New() const {
  return new RequestRecordUserRaceActionCommand;
}

void RequestRecordUserRaceActionCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copskill_ = 0;
    consumable_ = 0;
    drift_ = 0;
    jump_ = 0;
    billboard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRecordUserRaceActionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 copsKill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copskill_)));
          set_has_copskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_consumable;
        break;
      }
      
      // required int32 consumable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consumable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consumable_)));
          set_has_consumable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drift;
        break;
      }
      
      // required int32 drift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drift_)));
          set_has_drift();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_jump;
        break;
      }
      
      // required int32 jump = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jump_)));
          set_has_jump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_billBoard;
        break;
      }
      
      // required int32 billBoard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_billBoard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &billboard_)));
          set_has_billboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRecordUserRaceActionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 copsKill = 1;
  if (has_copskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->copskill(), output);
  }
  
  // required int32 consumable = 2;
  if (has_consumable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->consumable(), output);
  }
  
  // required int32 drift = 3;
  if (has_drift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drift(), output);
  }
  
  // required int32 jump = 4;
  if (has_jump()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jump(), output);
  }
  
  // required int32 billBoard = 5;
  if (has_billboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->billboard(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRecordUserRaceActionCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 copsKill = 1;
  if (has_copskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->copskill(), target);
  }
  
  // required int32 consumable = 2;
  if (has_consumable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->consumable(), target);
  }
  
  // required int32 drift = 3;
  if (has_drift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drift(), target);
  }
  
  // required int32 jump = 4;
  if (has_jump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jump(), target);
  }
  
  // required int32 billBoard = 5;
  if (has_billboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->billboard(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRecordUserRaceActionCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 copsKill = 1;
    if (has_copskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copskill());
    }
    
    // required int32 consumable = 2;
    if (has_consumable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consumable());
    }
    
    // required int32 drift = 3;
    if (has_drift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drift());
    }
    
    // required int32 jump = 4;
    if (has_jump()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jump());
    }
    
    // required int32 billBoard = 5;
    if (has_billboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->billboard());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRecordUserRaceActionCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRecordUserRaceActionCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRecordUserRaceActionCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRecordUserRaceActionCommand::MergeFrom(const RequestRecordUserRaceActionCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copskill()) {
      set_copskill(from.copskill());
    }
    if (from.has_consumable()) {
      set_consumable(from.consumable());
    }
    if (from.has_drift()) {
      set_drift(from.drift());
    }
    if (from.has_jump()) {
      set_jump(from.jump());
    }
    if (from.has_billboard()) {
      set_billboard(from.billboard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRecordUserRaceActionCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRecordUserRaceActionCommand::CopyFrom(const RequestRecordUserRaceActionCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRecordUserRaceActionCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RequestRecordUserRaceActionCommand::Swap(RequestRecordUserRaceActionCommand* other) {
  if (other != this) {
    std::swap(copskill_, other->copskill_);
    std::swap(consumable_, other->consumable_);
    std::swap(drift_, other->drift_);
    std::swap(jump_, other->jump_);
    std::swap(billboard_, other->billboard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRecordUserRaceActionCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRecordUserRaceActionCommand_descriptor_;
  metadata.reflection = RequestRecordUserRaceActionCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestQuickRaceCommand::RequestQuickRaceCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestQuickRaceCommand::InitAsDefaultInstance() {
}

RequestQuickRaceCommand::RequestQuickRaceCommand(const RequestQuickRaceCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestQuickRaceCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQuickRaceCommand::~RequestQuickRaceCommand() {
  SharedDtor();
}

void RequestQuickRaceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestQuickRaceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuickRaceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQuickRaceCommand_descriptor_;
}

const RequestQuickRaceCommand& RequestQuickRaceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestQuickRaceCommand* RequestQuickRaceCommand::default_instance_ = NULL;

RequestQuickRaceCommand* RequestQuickRaceCommand::New() const {
  return new RequestQuickRaceCommand;
}

void RequestQuickRaceCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestQuickRaceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestQuickRaceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestQuickRaceCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestQuickRaceCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuickRaceCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestQuickRaceCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestQuickRaceCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestQuickRaceCommand::MergeFrom(const RequestQuickRaceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestQuickRaceCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuickRaceCommand::CopyFrom(const RequestQuickRaceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuickRaceCommand::IsInitialized() const {
  
  return true;
}

void RequestQuickRaceCommand::Swap(RequestQuickRaceCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestQuickRaceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQuickRaceCommand_descriptor_;
  metadata.reflection = RequestQuickRaceCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseQuickRaceCommand::kTrackFieldNumber;
const int ResponseQuickRaceCommand::kTrackIndexFieldNumber;
const int ResponseQuickRaceCommand::kModeIdFieldNumber;
const int ResponseQuickRaceCommand::kCheckPointInfoFieldNumber;
#endif  // !_MSC_VER

ResponseQuickRaceCommand::ResponseQuickRaceCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseQuickRaceCommand::InitAsDefaultInstance() {
  track_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::TrackInfo*>(&::com::ea::eamobile::nfsmw::protoc::TrackInfo::default_instance());
  checkpointinfo_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::CheckPointInfo*>(&::com::ea::eamobile::nfsmw::protoc::CheckPointInfo::default_instance());
}

ResponseQuickRaceCommand::ResponseQuickRaceCommand(const ResponseQuickRaceCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseQuickRaceCommand::SharedCtor() {
  _cached_size_ = 0;
  track_ = NULL;
  trackindex_ = 0;
  modeid_ = 0;
  checkpointinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQuickRaceCommand::~ResponseQuickRaceCommand() {
  SharedDtor();
}

void ResponseQuickRaceCommand::SharedDtor() {
  if (this != default_instance_) {
    delete track_;
    delete checkpointinfo_;
  }
}

void ResponseQuickRaceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuickRaceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQuickRaceCommand_descriptor_;
}

const ResponseQuickRaceCommand& ResponseQuickRaceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseQuickRaceCommand* ResponseQuickRaceCommand::default_instance_ = NULL;

ResponseQuickRaceCommand* ResponseQuickRaceCommand::New() const {
  return new ResponseQuickRaceCommand;
}

void ResponseQuickRaceCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_track()) {
      if (track_ != NULL) track_->::com::ea::eamobile::nfsmw::protoc::TrackInfo::Clear();
    }
    trackindex_ = 0;
    modeid_ = 0;
    if (has_checkpointinfo()) {
      if (checkpointinfo_ != NULL) checkpointinfo_->::com::ea::eamobile::nfsmw::protoc::CheckPointInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseQuickRaceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.TrackInfo track = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trackIndex;
        break;
      }
      
      // required int32 trackIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trackIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackindex_)));
          set_has_trackindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modeId;
        break;
      }
      
      // required int32 modeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_checkPointInfo;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkPointInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkpointinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseQuickRaceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.TrackInfo track = 1;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->track(), output);
  }
  
  // required int32 trackIndex = 2;
  if (has_trackindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trackindex(), output);
  }
  
  // required int32 modeId = 3;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->modeid(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 4;
  if (has_checkpointinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->checkpointinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseQuickRaceCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.TrackInfo track = 1;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->track(), target);
  }
  
  // required int32 trackIndex = 2;
  if (has_trackindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trackindex(), target);
  }
  
  // required int32 modeId = 3;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->modeid(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 4;
  if (has_checkpointinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->checkpointinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseQuickRaceCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.TrackInfo track = 1;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track());
    }
    
    // required int32 trackIndex = 2;
    if (has_trackindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trackindex());
    }
    
    // required int32 modeId = 3;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.CheckPointInfo checkPointInfo = 4;
    if (has_checkpointinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkpointinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuickRaceCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseQuickRaceCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseQuickRaceCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseQuickRaceCommand::MergeFrom(const ResponseQuickRaceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_track()) {
      mutable_track()->::com::ea::eamobile::nfsmw::protoc::TrackInfo::MergeFrom(from.track());
    }
    if (from.has_trackindex()) {
      set_trackindex(from.trackindex());
    }
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_checkpointinfo()) {
      mutable_checkpointinfo()->::com::ea::eamobile::nfsmw::protoc::CheckPointInfo::MergeFrom(from.checkpointinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseQuickRaceCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuickRaceCommand::CopyFrom(const ResponseQuickRaceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuickRaceCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_track()) {
    if (!this->track().IsInitialized()) return false;
  }
  if (has_checkpointinfo()) {
    if (!this->checkpointinfo().IsInitialized()) return false;
  }
  return true;
}

void ResponseQuickRaceCommand::Swap(ResponseQuickRaceCommand* other) {
  if (other != this) {
    std::swap(track_, other->track_);
    std::swap(trackindex_, other->trackindex_);
    std::swap(modeid_, other->modeid_);
    std::swap(checkpointinfo_, other->checkpointinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseQuickRaceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQuickRaceCommand_descriptor_;
  metadata.reflection = ResponseQuickRaceCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseNotificationCommand::kIconIdFieldNumber;
const int ResponseNotificationCommand::kDurationFieldNumber;
const int ResponseNotificationCommand::kContentFieldNumber;
#endif  // !_MSC_VER

ResponseNotificationCommand::ResponseNotificationCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseNotificationCommand::InitAsDefaultInstance() {
}

ResponseNotificationCommand::ResponseNotificationCommand(const ResponseNotificationCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseNotificationCommand::SharedCtor() {
  _cached_size_ = 0;
  iconid_ = 0;
  duration_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseNotificationCommand::~ResponseNotificationCommand() {
  SharedDtor();
}

void ResponseNotificationCommand::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ResponseNotificationCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseNotificationCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseNotificationCommand_descriptor_;
}

const ResponseNotificationCommand& ResponseNotificationCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseNotificationCommand* ResponseNotificationCommand::default_instance_ = NULL;

ResponseNotificationCommand* ResponseNotificationCommand::New() const {
  return new ResponseNotificationCommand;
}

void ResponseNotificationCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iconid_ = 0;
    duration_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseNotificationCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iconId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iconid_)));
          set_has_iconid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }
      
      // required float duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }
      
      // required string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseNotificationCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iconId = 1;
  if (has_iconid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iconid(), output);
  }
  
  // required float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }
  
  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseNotificationCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iconId = 1;
  if (has_iconid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iconid(), target);
  }
  
  // required float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }
  
  // required string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseNotificationCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iconId = 1;
    if (has_iconid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iconid());
    }
    
    // required float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseNotificationCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseNotificationCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseNotificationCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseNotificationCommand::MergeFrom(const ResponseNotificationCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconid()) {
      set_iconid(from.iconid());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseNotificationCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseNotificationCommand::CopyFrom(const ResponseNotificationCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseNotificationCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ResponseNotificationCommand::Swap(ResponseNotificationCommand* other) {
  if (other != this) {
    std::swap(iconid_, other->iconid_);
    std::swap(duration_, other->duration_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseNotificationCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseNotificationCommand_descriptor_;
  metadata.reflection = ResponseNotificationCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGhostRecordCommand::kModeIdFieldNumber;
const int RequestGhostRecordCommand::kRaceTimeFieldNumber;
const int RequestGhostRecordCommand::kCarIdFieldNumber;
const int RequestGhostRecordCommand::kCarModTypeFieldNumber;
const int RequestGhostRecordCommand::kCarModValueFieldNumber;
const int RequestGhostRecordCommand::kCarModLevelFieldNumber;
const int RequestGhostRecordCommand::kCarModIdFieldNumber;
const int RequestGhostRecordCommand::kSamplePeriodFieldNumber;
const int RequestGhostRecordCommand::kSampleDataFieldNumber;
#endif  // !_MSC_VER

RequestGhostRecordCommand::RequestGhostRecordCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGhostRecordCommand::InitAsDefaultInstance() {
}

RequestGhostRecordCommand::RequestGhostRecordCommand(const RequestGhostRecordCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGhostRecordCommand::SharedCtor() {
  _cached_size_ = 0;
  modeid_ = 0;
  racetime_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sampleperiod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGhostRecordCommand::~RequestGhostRecordCommand() {
  SharedDtor();
}

void RequestGhostRecordCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestGhostRecordCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGhostRecordCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGhostRecordCommand_descriptor_;
}

const RequestGhostRecordCommand& RequestGhostRecordCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestGhostRecordCommand* RequestGhostRecordCommand::default_instance_ = NULL;

RequestGhostRecordCommand* RequestGhostRecordCommand::New() const {
  return new RequestGhostRecordCommand;
}

void RequestGhostRecordCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modeid_ = 0;
    racetime_ = 0;
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    sampleperiod_ = 0;
  }
  carmodtype_.Clear();
  carmodvalue_.Clear();
  carmodlevel_.Clear();
  carmodid_.Clear();
  sampledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGhostRecordCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeid_)));
          set_has_modeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_raceTime;
        break;
      }
      
      // required float raceTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_raceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &racetime_)));
          set_has_racetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_carId;
        break;
      }
      
      // required string carId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_carModType;
        break;
      }
      
      // repeated int32 carModType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_carmodtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_carModType;
        if (input->ExpectTag(45)) goto parse_carModValue;
        break;
      }
      
      // repeated float carModValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carModValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_carmodvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_carmodvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_carModValue;
        if (input->ExpectTag(48)) goto parse_carModLevel;
        break;
      }
      
      // repeated int32 carModLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_carmodlevel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodlevel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_carModLevel;
        if (input->ExpectTag(56)) goto parse_carModId;
        break;
      }
      
      // repeated int32 carModId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carModId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_carmodid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_carmodid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_carModId;
        if (input->ExpectTag(64)) goto parse_samplePeriod;
        break;
      }
      
      // required int32 samplePeriod = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_samplePeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampleperiod_)));
          set_has_sampleperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sampleData;
        break;
      }
      
      // repeated float sampleData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sampleData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 77, input, this->mutable_sampledata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sampledata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sampleData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGhostRecordCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modeid(), output);
  }
  
  // required float raceTime = 2;
  if (has_racetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->racetime(), output);
  }
  
  // required string carId = 3;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->carid(), output);
  }
  
  // repeated int32 carModType = 4;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->carmodtype(i), output);
  }
  
  // repeated float carModValue = 5;
  for (int i = 0; i < this->carmodvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->carmodvalue(i), output);
  }
  
  // repeated int32 carModLevel = 6;
  for (int i = 0; i < this->carmodlevel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->carmodlevel(i), output);
  }
  
  // repeated int32 carModId = 7;
  for (int i = 0; i < this->carmodid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->carmodid(i), output);
  }
  
  // required int32 samplePeriod = 8;
  if (has_sampleperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sampleperiod(), output);
  }
  
  // repeated float sampleData = 9;
  for (int i = 0; i < this->sampledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      9, this->sampledata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGhostRecordCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 modeId = 1;
  if (has_modeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modeid(), target);
  }
  
  // required float raceTime = 2;
  if (has_racetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->racetime(), target);
  }
  
  // required string carId = 3;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->carid(), target);
  }
  
  // repeated int32 carModType = 4;
  for (int i = 0; i < this->carmodtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->carmodtype(i), target);
  }
  
  // repeated float carModValue = 5;
  for (int i = 0; i < this->carmodvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->carmodvalue(i), target);
  }
  
  // repeated int32 carModLevel = 6;
  for (int i = 0; i < this->carmodlevel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->carmodlevel(i), target);
  }
  
  // repeated int32 carModId = 7;
  for (int i = 0; i < this->carmodid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->carmodid(i), target);
  }
  
  // required int32 samplePeriod = 8;
  if (has_sampleperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sampleperiod(), target);
  }
  
  // repeated float sampleData = 9;
  for (int i = 0; i < this->sampledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(9, this->sampledata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGhostRecordCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modeId = 1;
    if (has_modeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeid());
    }
    
    // required float raceTime = 2;
    if (has_racetime()) {
      total_size += 1 + 4;
    }
    
    // required string carId = 3;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 samplePeriod = 8;
    if (has_sampleperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sampleperiod());
    }
    
  }
  // repeated int32 carModType = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodtype(i));
    }
    total_size += 1 * this->carmodtype_size() + data_size;
  }
  
  // repeated float carModValue = 5;
  {
    int data_size = 0;
    data_size = 4 * this->carmodvalue_size();
    total_size += 1 * this->carmodvalue_size() + data_size;
  }
  
  // repeated int32 carModLevel = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodlevel_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodlevel(i));
    }
    total_size += 1 * this->carmodlevel_size() + data_size;
  }
  
  // repeated int32 carModId = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->carmodid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->carmodid(i));
    }
    total_size += 1 * this->carmodid_size() + data_size;
  }
  
  // repeated float sampleData = 9;
  {
    int data_size = 0;
    data_size = 4 * this->sampledata_size();
    total_size += 1 * this->sampledata_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGhostRecordCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGhostRecordCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGhostRecordCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGhostRecordCommand::MergeFrom(const RequestGhostRecordCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  carmodtype_.MergeFrom(from.carmodtype_);
  carmodvalue_.MergeFrom(from.carmodvalue_);
  carmodlevel_.MergeFrom(from.carmodlevel_);
  carmodid_.MergeFrom(from.carmodid_);
  sampledata_.MergeFrom(from.sampledata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modeid()) {
      set_modeid(from.modeid());
    }
    if (from.has_racetime()) {
      set_racetime(from.racetime());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_sampleperiod()) {
      set_sampleperiod(from.sampleperiod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGhostRecordCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGhostRecordCommand::CopyFrom(const RequestGhostRecordCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGhostRecordCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000087) != 0x00000087) return false;
  
  return true;
}

void RequestGhostRecordCommand::Swap(RequestGhostRecordCommand* other) {
  if (other != this) {
    std::swap(modeid_, other->modeid_);
    std::swap(racetime_, other->racetime_);
    std::swap(carid_, other->carid_);
    carmodtype_.Swap(&other->carmodtype_);
    carmodvalue_.Swap(&other->carmodvalue_);
    carmodlevel_.Swap(&other->carmodlevel_);
    carmodid_.Swap(&other->carmodid_);
    std::swap(sampleperiod_, other->sampleperiod_);
    sampledata_.Swap(&other->sampledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGhostRecordCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGhostRecordCommand_descriptor_;
  metadata.reflection = RequestGhostRecordCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGhostRecordCommand::kSuccessFieldNumber;
const int ResponseGhostRecordCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ResponseGhostRecordCommand::ResponseGhostRecordCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseGhostRecordCommand::InitAsDefaultInstance() {
}

ResponseGhostRecordCommand::ResponseGhostRecordCommand(const ResponseGhostRecordCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGhostRecordCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGhostRecordCommand::~ResponseGhostRecordCommand() {
  SharedDtor();
}

void ResponseGhostRecordCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseGhostRecordCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGhostRecordCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGhostRecordCommand_descriptor_;
}

const ResponseGhostRecordCommand& ResponseGhostRecordCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseGhostRecordCommand* ResponseGhostRecordCommand::default_instance_ = NULL;

ResponseGhostRecordCommand* ResponseGhostRecordCommand::New() const {
  return new ResponseGhostRecordCommand;
}

void ResponseGhostRecordCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseGhostRecordCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGhostRecordCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseGhostRecordCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseGhostRecordCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGhostRecordCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseGhostRecordCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseGhostRecordCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseGhostRecordCommand::MergeFrom(const ResponseGhostRecordCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseGhostRecordCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGhostRecordCommand::CopyFrom(const ResponseGhostRecordCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGhostRecordCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseGhostRecordCommand::Swap(ResponseGhostRecordCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseGhostRecordCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGhostRecordCommand_descriptor_;
  metadata.reflection = ResponseGhostRecordCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestIapCheckCommand::kReceiptDataFieldNumber;
const int RequestIapCheckCommand::kIpspPurchaseItemCallBackTypeFieldNumber;
#endif  // !_MSC_VER

RequestIapCheckCommand::RequestIapCheckCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestIapCheckCommand::InitAsDefaultInstance() {
}

RequestIapCheckCommand::RequestIapCheckCommand(const RequestIapCheckCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestIapCheckCommand::SharedCtor() {
  _cached_size_ = 0;
  receiptdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ipsppurchaseitemcallbacktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestIapCheckCommand::~RequestIapCheckCommand() {
  SharedDtor();
}

void RequestIapCheckCommand::SharedDtor() {
  if (receiptdata_ != &::google::protobuf::internal::kEmptyString) {
    delete receiptdata_;
  }
  if (this != default_instance_) {
  }
}

void RequestIapCheckCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestIapCheckCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestIapCheckCommand_descriptor_;
}

const RequestIapCheckCommand& RequestIapCheckCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestIapCheckCommand* RequestIapCheckCommand::default_instance_ = NULL;

RequestIapCheckCommand* RequestIapCheckCommand::New() const {
  return new RequestIapCheckCommand;
}

void RequestIapCheckCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_receiptdata()) {
      if (receiptdata_ != &::google::protobuf::internal::kEmptyString) {
        receiptdata_->clear();
      }
    }
    ipsppurchaseitemcallbacktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestIapCheckCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string receiptData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiptdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiptdata().data(), this->receiptdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ipspPurchaseItemCallBackType;
        break;
      }
      
      // optional int32 ipspPurchaseItemCallBackType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ipspPurchaseItemCallBackType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipsppurchaseitemcallbacktype_)));
          set_has_ipsppurchaseitemcallbacktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestIapCheckCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string receiptData = 1;
  if (has_receiptdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiptdata().data(), this->receiptdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->receiptdata(), output);
  }
  
  // optional int32 ipspPurchaseItemCallBackType = 2;
  if (has_ipsppurchaseitemcallbacktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ipsppurchaseitemcallbacktype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestIapCheckCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string receiptData = 1;
  if (has_receiptdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiptdata().data(), this->receiptdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->receiptdata(), target);
  }
  
  // optional int32 ipspPurchaseItemCallBackType = 2;
  if (has_ipsppurchaseitemcallbacktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ipsppurchaseitemcallbacktype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestIapCheckCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string receiptData = 1;
    if (has_receiptdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiptdata());
    }
    
    // optional int32 ipspPurchaseItemCallBackType = 2;
    if (has_ipsppurchaseitemcallbacktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipsppurchaseitemcallbacktype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestIapCheckCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestIapCheckCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestIapCheckCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestIapCheckCommand::MergeFrom(const RequestIapCheckCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiptdata()) {
      set_receiptdata(from.receiptdata());
    }
    if (from.has_ipsppurchaseitemcallbacktype()) {
      set_ipsppurchaseitemcallbacktype(from.ipsppurchaseitemcallbacktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestIapCheckCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestIapCheckCommand::CopyFrom(const RequestIapCheckCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestIapCheckCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestIapCheckCommand::Swap(RequestIapCheckCommand* other) {
  if (other != this) {
    std::swap(receiptdata_, other->receiptdata_);
    std::swap(ipsppurchaseitemcallbacktype_, other->ipsppurchaseitemcallbacktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestIapCheckCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestIapCheckCommand_descriptor_;
  metadata.reflection = RequestIapCheckCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseIapCheckCommand::kSuccessFieldNumber;
const int ResponseIapCheckCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ResponseIapCheckCommand::ResponseIapCheckCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseIapCheckCommand::InitAsDefaultInstance() {
}

ResponseIapCheckCommand::ResponseIapCheckCommand(const ResponseIapCheckCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseIapCheckCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseIapCheckCommand::~ResponseIapCheckCommand() {
  SharedDtor();
}

void ResponseIapCheckCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ResponseIapCheckCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseIapCheckCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseIapCheckCommand_descriptor_;
}

const ResponseIapCheckCommand& ResponseIapCheckCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseIapCheckCommand* ResponseIapCheckCommand::default_instance_ = NULL;

ResponseIapCheckCommand* ResponseIapCheckCommand::New() const {
  return new ResponseIapCheckCommand;
}

void ResponseIapCheckCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseIapCheckCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseIapCheckCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseIapCheckCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseIapCheckCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseIapCheckCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseIapCheckCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseIapCheckCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseIapCheckCommand::MergeFrom(const ResponseIapCheckCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseIapCheckCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseIapCheckCommand::CopyFrom(const ResponseIapCheckCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseIapCheckCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseIapCheckCommand::Swap(ResponseIapCheckCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseIapCheckCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseIapCheckCommand_descriptor_;
  metadata.reflection = ResponseIapCheckCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentNotificationCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentNotificationCommand::ResponseTournamentNotificationCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentNotificationCommand::InitAsDefaultInstance() {
}

ResponseTournamentNotificationCommand::ResponseTournamentNotificationCommand(const ResponseTournamentNotificationCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentNotificationCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentNotificationCommand::~ResponseTournamentNotificationCommand() {
  SharedDtor();
}

void ResponseTournamentNotificationCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseTournamentNotificationCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentNotificationCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentNotificationCommand_descriptor_;
}

const ResponseTournamentNotificationCommand& ResponseTournamentNotificationCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentNotificationCommand* ResponseTournamentNotificationCommand::default_instance_ = NULL;

ResponseTournamentNotificationCommand* ResponseTournamentNotificationCommand::New() const {
  return new ResponseTournamentNotificationCommand;
}

void ResponseTournamentNotificationCommand::Clear() {
  message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentNotificationCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message(0).data(), this->message(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_message;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentNotificationCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string message = 1;
  for (int i = 0; i < this->message_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->message(i).data(), this->message(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentNotificationCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string message = 1;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message(i).data(), this->message(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentNotificationCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated string message = 1;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentNotificationCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentNotificationCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentNotificationCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentNotificationCommand::MergeFrom(const ResponseTournamentNotificationCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  message_.MergeFrom(from.message_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentNotificationCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentNotificationCommand::CopyFrom(const ResponseTournamentNotificationCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentNotificationCommand::IsInitialized() const {
  
  return true;
}

void ResponseTournamentNotificationCommand::Swap(ResponseTournamentNotificationCommand* other) {
  if (other != this) {
    message_.Swap(&other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentNotificationCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentNotificationCommand_descriptor_;
  metadata.reflection = ResponseTournamentNotificationCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestTutorialRewardCommand::kFinishedAllTutorialFieldNumber;
#endif  // !_MSC_VER

RequestTutorialRewardCommand::RequestTutorialRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTutorialRewardCommand::InitAsDefaultInstance() {
}

RequestTutorialRewardCommand::RequestTutorialRewardCommand(const RequestTutorialRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTutorialRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  finishedalltutorial_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTutorialRewardCommand::~RequestTutorialRewardCommand() {
  SharedDtor();
}

void RequestTutorialRewardCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTutorialRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTutorialRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTutorialRewardCommand_descriptor_;
}

const RequestTutorialRewardCommand& RequestTutorialRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTutorialRewardCommand* RequestTutorialRewardCommand::default_instance_ = NULL;

RequestTutorialRewardCommand* RequestTutorialRewardCommand::New() const {
  return new RequestTutorialRewardCommand;
}

void RequestTutorialRewardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    finishedalltutorial_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTutorialRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool finishedAllTutorial = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finishedalltutorial_)));
          set_has_finishedalltutorial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestTutorialRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool finishedAllTutorial = 1;
  if (has_finishedalltutorial()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->finishedalltutorial(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTutorialRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool finishedAllTutorial = 1;
  if (has_finishedalltutorial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->finishedalltutorial(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTutorialRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool finishedAllTutorial = 1;
    if (has_finishedalltutorial()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTutorialRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTutorialRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTutorialRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTutorialRewardCommand::MergeFrom(const RequestTutorialRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_finishedalltutorial()) {
      set_finishedalltutorial(from.finishedalltutorial());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTutorialRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTutorialRewardCommand::CopyFrom(const RequestTutorialRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTutorialRewardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestTutorialRewardCommand::Swap(RequestTutorialRewardCommand* other) {
  if (other != this) {
    std::swap(finishedalltutorial_, other->finishedalltutorial_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTutorialRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTutorialRewardCommand_descriptor_;
  metadata.reflection = RequestTutorialRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTutorialRewardCommand::kSuccessFieldNumber;
const int ResponseTutorialRewardCommand::kRewardFieldNumber;
#endif  // !_MSC_VER

ResponseTutorialRewardCommand::ResponseTutorialRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTutorialRewardCommand::InitAsDefaultInstance() {
  reward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::Reward*>(&::com::ea::eamobile::nfsmw::protoc::Reward::default_instance());
}

ResponseTutorialRewardCommand::ResponseTutorialRewardCommand(const ResponseTutorialRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTutorialRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTutorialRewardCommand::~ResponseTutorialRewardCommand() {
  SharedDtor();
}

void ResponseTutorialRewardCommand::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void ResponseTutorialRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTutorialRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTutorialRewardCommand_descriptor_;
}

const ResponseTutorialRewardCommand& ResponseTutorialRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTutorialRewardCommand* ResponseTutorialRewardCommand::default_instance_ = NULL;

ResponseTutorialRewardCommand* ResponseTutorialRewardCommand::New() const {
  return new ResponseTutorialRewardCommand;
}

void ResponseTutorialRewardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
    if (has_reward()) {
      if (reward_ != NULL) reward_->::com::ea::eamobile::nfsmw::protoc::Reward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTutorialRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTutorialRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTutorialRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTutorialRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.Reward reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTutorialRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTutorialRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTutorialRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTutorialRewardCommand::MergeFrom(const ResponseTutorialRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_reward()) {
      mutable_reward()->::com::ea::eamobile::nfsmw::protoc::Reward::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTutorialRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTutorialRewardCommand::CopyFrom(const ResponseTutorialRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTutorialRewardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseTutorialRewardCommand::Swap(ResponseTutorialRewardCommand* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTutorialRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTutorialRewardCommand_descriptor_;
  metadata.reflection = ResponseTutorialRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponsePopupCommand::kPopScreenFieldNumber;
const int ResponsePopupCommand::kFlowIDFieldNumber;
const int ResponsePopupCommand::kTextFieldNumber;
const int ResponsePopupCommand::kHeadingFieldNumber;
const int ResponsePopupCommand::kYesButtonIDFieldNumber;
const int ResponsePopupCommand::kNoButtonIDFieldNumber;
#endif  // !_MSC_VER

ResponsePopupCommand::ResponsePopupCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponsePopupCommand::InitAsDefaultInstance() {
}

ResponsePopupCommand::ResponsePopupCommand(const ResponsePopupCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponsePopupCommand::SharedCtor() {
  _cached_size_ = 0;
  popscreen_ = 0;
  flowid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  heading_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yesbuttonid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nobuttonid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePopupCommand::~ResponsePopupCommand() {
  SharedDtor();
}

void ResponsePopupCommand::SharedDtor() {
  if (flowid_ != &::google::protobuf::internal::kEmptyString) {
    delete flowid_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (heading_ != &::google::protobuf::internal::kEmptyString) {
    delete heading_;
  }
  if (yesbuttonid_ != &::google::protobuf::internal::kEmptyString) {
    delete yesbuttonid_;
  }
  if (nobuttonid_ != &::google::protobuf::internal::kEmptyString) {
    delete nobuttonid_;
  }
  if (this != default_instance_) {
  }
}

void ResponsePopupCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePopupCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePopupCommand_descriptor_;
}

const ResponsePopupCommand& ResponsePopupCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponsePopupCommand* ResponsePopupCommand::default_instance_ = NULL;

ResponsePopupCommand* ResponsePopupCommand::New() const {
  return new ResponsePopupCommand;
}

void ResponsePopupCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    popscreen_ = 0;
    if (has_flowid()) {
      if (flowid_ != &::google::protobuf::internal::kEmptyString) {
        flowid_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_heading()) {
      if (heading_ != &::google::protobuf::internal::kEmptyString) {
        heading_->clear();
      }
    }
    if (has_yesbuttonid()) {
      if (yesbuttonid_ != &::google::protobuf::internal::kEmptyString) {
        yesbuttonid_->clear();
      }
    }
    if (has_nobuttonid()) {
      if (nobuttonid_ != &::google::protobuf::internal::kEmptyString) {
        nobuttonid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponsePopupCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 popScreen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &popscreen_)));
          set_has_popscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flowID;
        break;
      }
      
      // optional string flowID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flowID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flowid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flowid().data(), this->flowid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // required string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_heading;
        break;
      }
      
      // optional string heading = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heading:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heading()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->heading().data(), this->heading().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_yesButtonID;
        break;
      }
      
      // optional string yesButtonID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesButtonID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_yesbuttonid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->yesbuttonid().data(), this->yesbuttonid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_noButtonID;
        break;
      }
      
      // optional string noButtonID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noButtonID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nobuttonid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nobuttonid().data(), this->nobuttonid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponsePopupCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 popScreen = 1;
  if (has_popscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->popscreen(), output);
  }
  
  // optional string flowID = 2;
  if (has_flowid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flowid().data(), this->flowid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->flowid(), output);
  }
  
  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  // optional string heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->heading(), output);
  }
  
  // optional string yesButtonID = 5;
  if (has_yesbuttonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yesbuttonid().data(), this->yesbuttonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->yesbuttonid(), output);
  }
  
  // optional string noButtonID = 6;
  if (has_nobuttonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nobuttonid().data(), this->nobuttonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->nobuttonid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponsePopupCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 popScreen = 1;
  if (has_popscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->popscreen(), target);
  }
  
  // optional string flowID = 2;
  if (has_flowid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flowid().data(), this->flowid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->flowid(), target);
  }
  
  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  // optional string heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->heading(), target);
  }
  
  // optional string yesButtonID = 5;
  if (has_yesbuttonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->yesbuttonid().data(), this->yesbuttonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->yesbuttonid(), target);
  }
  
  // optional string noButtonID = 6;
  if (has_nobuttonid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nobuttonid().data(), this->nobuttonid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->nobuttonid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponsePopupCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 popScreen = 1;
    if (has_popscreen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->popscreen());
    }
    
    // optional string flowID = 2;
    if (has_flowid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flowid());
    }
    
    // required string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string heading = 4;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heading());
    }
    
    // optional string yesButtonID = 5;
    if (has_yesbuttonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->yesbuttonid());
    }
    
    // optional string noButtonID = 6;
    if (has_nobuttonid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nobuttonid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePopupCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponsePopupCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponsePopupCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponsePopupCommand::MergeFrom(const ResponsePopupCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_popscreen()) {
      set_popscreen(from.popscreen());
    }
    if (from.has_flowid()) {
      set_flowid(from.flowid());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_yesbuttonid()) {
      set_yesbuttonid(from.yesbuttonid());
    }
    if (from.has_nobuttonid()) {
      set_nobuttonid(from.nobuttonid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponsePopupCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePopupCommand::CopyFrom(const ResponsePopupCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePopupCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void ResponsePopupCommand::Swap(ResponsePopupCommand* other) {
  if (other != this) {
    std::swap(popscreen_, other->popscreen_);
    std::swap(flowid_, other->flowid_);
    std::swap(text_, other->text_);
    std::swap(heading_, other->heading_);
    std::swap(yesbuttonid_, other->yesbuttonid_);
    std::swap(nobuttonid_, other->nobuttonid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponsePopupCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePopupCommand_descriptor_;
  metadata.reflection = ResponsePopupCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponsePopupListCommand::kPopupsFieldNumber;
#endif  // !_MSC_VER

ResponsePopupListCommand::ResponsePopupListCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponsePopupListCommand::InitAsDefaultInstance() {
}

ResponsePopupListCommand::ResponsePopupListCommand(const ResponsePopupListCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponsePopupListCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePopupListCommand::~ResponsePopupListCommand() {
  SharedDtor();
}

void ResponsePopupListCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponsePopupListCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePopupListCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePopupListCommand_descriptor_;
}

const ResponsePopupListCommand& ResponsePopupListCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponsePopupListCommand* ResponsePopupListCommand::default_instance_ = NULL;

ResponsePopupListCommand* ResponsePopupListCommand::New() const {
  return new ResponsePopupListCommand;
}

void ResponsePopupListCommand::Clear() {
  popups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponsePopupListCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_popups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_popups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_popups;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponsePopupListCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popups = 1;
  for (int i = 0; i < this->popups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->popups(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponsePopupListCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popups = 1;
  for (int i = 0; i < this->popups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->popups(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponsePopupListCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popups = 1;
  total_size += 1 * this->popups_size();
  for (int i = 0; i < this->popups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->popups(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePopupListCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponsePopupListCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponsePopupListCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponsePopupListCommand::MergeFrom(const ResponsePopupListCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  popups_.MergeFrom(from.popups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponsePopupListCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePopupListCommand::CopyFrom(const ResponsePopupListCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePopupListCommand::IsInitialized() const {
  
  for (int i = 0; i < popups_size(); i++) {
    if (!this->popups(i).IsInitialized()) return false;
  }
  return true;
}

void ResponsePopupListCommand::Swap(ResponsePopupListCommand* other) {
  if (other != this) {
    popups_.Swap(&other->popups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponsePopupListCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePopupListCommand_descriptor_;
  metadata.reflection = ResponsePopupListCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentRewardNumCommand::kRewardNumFieldNumber;
const int ResponseTournamentRewardNumCommand::kEndTimeFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentRewardNumCommand::ResponseTournamentRewardNumCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentRewardNumCommand::InitAsDefaultInstance() {
}

ResponseTournamentRewardNumCommand::ResponseTournamentRewardNumCommand(const ResponseTournamentRewardNumCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentRewardNumCommand::SharedCtor() {
  _cached_size_ = 0;
  rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentRewardNumCommand::~ResponseTournamentRewardNumCommand() {
  SharedDtor();
}

void ResponseTournamentRewardNumCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseTournamentRewardNumCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentRewardNumCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentRewardNumCommand_descriptor_;
}

const ResponseTournamentRewardNumCommand& ResponseTournamentRewardNumCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentRewardNumCommand* ResponseTournamentRewardNumCommand::default_instance_ = NULL;

ResponseTournamentRewardNumCommand* ResponseTournamentRewardNumCommand::New() const {
  return new ResponseTournamentRewardNumCommand;
}

void ResponseTournamentRewardNumCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardnum_ = 0;
  }
  endtime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentRewardNumCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rewardNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }
      
      // repeated int32 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_endtime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_endtime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentRewardNumCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rewardNum = 1;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardnum(), output);
  }
  
  // repeated int32 endTime = 2;
  for (int i = 0; i < this->endtime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->endtime(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentRewardNumCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rewardNum = 1;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardnum(), target);
  }
  
  // repeated int32 endTime = 2;
  for (int i = 0; i < this->endtime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->endtime(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentRewardNumCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rewardNum = 1;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }
    
  }
  // repeated int32 endTime = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->endtime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->endtime(i));
    }
    total_size += 1 * this->endtime_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentRewardNumCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentRewardNumCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentRewardNumCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentRewardNumCommand::MergeFrom(const ResponseTournamentRewardNumCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  endtime_.MergeFrom(from.endtime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentRewardNumCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentRewardNumCommand::CopyFrom(const ResponseTournamentRewardNumCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentRewardNumCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseTournamentRewardNumCommand::Swap(ResponseTournamentRewardNumCommand* other) {
  if (other != this) {
    std::swap(rewardnum_, other->rewardnum_);
    endtime_.Swap(&other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentRewardNumCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentRewardNumCommand_descriptor_;
  metadata.reflection = ResponseTournamentRewardNumCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestGotchaCommand::kLevelFieldNumber;
const int RequestGotchaCommand::kCarIdFieldNumber;
#endif  // !_MSC_VER

RequestGotchaCommand::RequestGotchaCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGotchaCommand::InitAsDefaultInstance() {
}

RequestGotchaCommand::RequestGotchaCommand(const RequestGotchaCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGotchaCommand::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGotchaCommand::~RequestGotchaCommand() {
  SharedDtor();
}

void RequestGotchaCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestGotchaCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGotchaCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGotchaCommand_descriptor_;
}

const RequestGotchaCommand& RequestGotchaCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestGotchaCommand* RequestGotchaCommand::default_instance_ = NULL;

RequestGotchaCommand* RequestGotchaCommand::New() const {
  return new RequestGotchaCommand;
}

void RequestGotchaCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGotchaCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_carId;
        break;
      }
      
      // required string carId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGotchaCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  // required string carId = 2;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->carid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGotchaCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  // required string carId = 2;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->carid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGotchaCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required string carId = 2;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGotchaCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGotchaCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGotchaCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGotchaCommand::MergeFrom(const RequestGotchaCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_carid()) {
      set_carid(from.carid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGotchaCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGotchaCommand::CopyFrom(const RequestGotchaCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGotchaCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestGotchaCommand::Swap(RequestGotchaCommand* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(carid_, other->carid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGotchaCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGotchaCommand_descriptor_;
  metadata.reflection = RequestGotchaCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGotchaCommand::kGotchaItemsFieldNumber;
const int ResponseGotchaCommand::kGlobalMessageFieldNumber;
#endif  // !_MSC_VER

ResponseGotchaCommand::ResponseGotchaCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseGotchaCommand::InitAsDefaultInstance() {
}

ResponseGotchaCommand::ResponseGotchaCommand(const ResponseGotchaCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGotchaCommand::SharedCtor() {
  _cached_size_ = 0;
  globalmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGotchaCommand::~ResponseGotchaCommand() {
  SharedDtor();
}

void ResponseGotchaCommand::SharedDtor() {
  if (globalmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete globalmessage_;
  }
  if (this != default_instance_) {
  }
}

void ResponseGotchaCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGotchaCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGotchaCommand_descriptor_;
}

const ResponseGotchaCommand& ResponseGotchaCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseGotchaCommand* ResponseGotchaCommand::default_instance_ = NULL;

ResponseGotchaCommand* ResponseGotchaCommand::New() const {
  return new ResponseGotchaCommand;
}

void ResponseGotchaCommand::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_globalmessage()) {
      if (globalmessage_ != &::google::protobuf::internal::kEmptyString) {
        globalmessage_->clear();
      }
    }
  }
  gotchaitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseGotchaCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.GotchaItemInfo gotchaItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gotchaItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gotchaitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gotchaItems;
        if (input->ExpectTag(18)) goto parse_globalMessage;
        break;
      }
      
      // optional string globalMessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_globalmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->globalmessage().data(), this->globalmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGotchaCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.GotchaItemInfo gotchaItems = 1;
  for (int i = 0; i < this->gotchaitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gotchaitems(i), output);
  }
  
  // optional string globalMessage = 2;
  if (has_globalmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalmessage().data(), this->globalmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->globalmessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseGotchaCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.GotchaItemInfo gotchaItems = 1;
  for (int i = 0; i < this->gotchaitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gotchaitems(i), target);
  }
  
  // optional string globalMessage = 2;
  if (has_globalmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->globalmessage().data(), this->globalmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->globalmessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseGotchaCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string globalMessage = 2;
    if (has_globalmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->globalmessage());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.GotchaItemInfo gotchaItems = 1;
  total_size += 1 * this->gotchaitems_size();
  for (int i = 0; i < this->gotchaitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gotchaitems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGotchaCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseGotchaCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseGotchaCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseGotchaCommand::MergeFrom(const ResponseGotchaCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  gotchaitems_.MergeFrom(from.gotchaitems_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_globalmessage()) {
      set_globalmessage(from.globalmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseGotchaCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGotchaCommand::CopyFrom(const ResponseGotchaCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGotchaCommand::IsInitialized() const {
  
  for (int i = 0; i < gotchaitems_size(); i++) {
    if (!this->gotchaitems(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseGotchaCommand::Swap(ResponseGotchaCommand* other) {
  if (other != this) {
    gotchaitems_.Swap(&other->gotchaitems_);
    std::swap(globalmessage_, other->globalmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseGotchaCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGotchaCommand_descriptor_;
  metadata.reflection = ResponseGotchaCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GotchaItemInfo::kTypeFieldNumber;
const int GotchaItemInfo::kNameFieldNumber;
const int GotchaItemInfo::kNumberFieldNumber;
#endif  // !_MSC_VER

GotchaItemInfo::GotchaItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GotchaItemInfo::InitAsDefaultInstance() {
}

GotchaItemInfo::GotchaItemInfo(const GotchaItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GotchaItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GotchaItemInfo::~GotchaItemInfo() {
  SharedDtor();
}

void GotchaItemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GotchaItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GotchaItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GotchaItemInfo_descriptor_;
}

const GotchaItemInfo& GotchaItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

GotchaItemInfo* GotchaItemInfo::default_instance_ = NULL;

GotchaItemInfo* GotchaItemInfo::New() const {
  return new GotchaItemInfo;
}

void GotchaItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GotchaItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }
      
      // required int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GotchaItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GotchaItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GotchaItemInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GotchaItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GotchaItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GotchaItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GotchaItemInfo::MergeFrom(const GotchaItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GotchaItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GotchaItemInfo::CopyFrom(const GotchaItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GotchaItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GotchaItemInfo::Swap(GotchaItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GotchaItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GotchaItemInfo_descriptor_;
  metadata.reflection = GotchaItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCheatInfoCommand::kCheatTypeFieldNumber;
const int RequestCheatInfoCommand::kCarConfigNameFieldNumber;
const int RequestCheatInfoCommand::kMidGearSpdFieldNumber;
const int RequestCheatInfoCommand::kTopGearSpdFieldNumber;
const int RequestCheatInfoCommand::kExeFileMD5FieldNumber;
const int RequestCheatInfoCommand::kUserSelectCarIDFieldNumber;
#endif  // !_MSC_VER

RequestCheatInfoCommand::RequestCheatInfoCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCheatInfoCommand::InitAsDefaultInstance() {
}

RequestCheatInfoCommand::RequestCheatInfoCommand(const RequestCheatInfoCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCheatInfoCommand::SharedCtor() {
  _cached_size_ = 0;
  cheattype_ = 0;
  carconfigname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midgearspd_ = 0;
  topgearspd_ = 0;
  exefilemd5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userselectcarid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCheatInfoCommand::~RequestCheatInfoCommand() {
  SharedDtor();
}

void RequestCheatInfoCommand::SharedDtor() {
  if (carconfigname_ != &::google::protobuf::internal::kEmptyString) {
    delete carconfigname_;
  }
  if (exefilemd5_ != &::google::protobuf::internal::kEmptyString) {
    delete exefilemd5_;
  }
  if (userselectcarid_ != &::google::protobuf::internal::kEmptyString) {
    delete userselectcarid_;
  }
  if (this != default_instance_) {
  }
}

void RequestCheatInfoCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCheatInfoCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCheatInfoCommand_descriptor_;
}

const RequestCheatInfoCommand& RequestCheatInfoCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestCheatInfoCommand* RequestCheatInfoCommand::default_instance_ = NULL;

RequestCheatInfoCommand* RequestCheatInfoCommand::New() const {
  return new RequestCheatInfoCommand;
}

void RequestCheatInfoCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cheattype_ = 0;
    if (has_carconfigname()) {
      if (carconfigname_ != &::google::protobuf::internal::kEmptyString) {
        carconfigname_->clear();
      }
    }
    midgearspd_ = 0;
    topgearspd_ = 0;
    if (has_exefilemd5()) {
      if (exefilemd5_ != &::google::protobuf::internal::kEmptyString) {
        exefilemd5_->clear();
      }
    }
    if (has_userselectcarid()) {
      if (userselectcarid_ != &::google::protobuf::internal::kEmptyString) {
        userselectcarid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCheatInfoCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CheatType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cheattype_)));
          set_has_cheattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CarConfigName;
        break;
      }
      
      // optional string CarConfigName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CarConfigName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carconfigname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carconfigname().data(), this->carconfigname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MidGearSpd;
        break;
      }
      
      // optional int32 MidGearSpd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MidGearSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &midgearspd_)));
          set_has_midgearspd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TopGearSpd;
        break;
      }
      
      // optional int32 TopGearSpd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TopGearSpd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topgearspd_)));
          set_has_topgearspd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ExeFileMD5;
        break;
      }
      
      // optional string ExeFileMD5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExeFileMD5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exefilemd5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exefilemd5().data(), this->exefilemd5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_UserSelectCarID;
        break;
      }
      
      // optional string UserSelectCarID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserSelectCarID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userselectcarid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userselectcarid().data(), this->userselectcarid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCheatInfoCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CheatType = 1;
  if (has_cheattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cheattype(), output);
  }
  
  // optional string CarConfigName = 2;
  if (has_carconfigname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carconfigname().data(), this->carconfigname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->carconfigname(), output);
  }
  
  // optional int32 MidGearSpd = 3;
  if (has_midgearspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->midgearspd(), output);
  }
  
  // optional int32 TopGearSpd = 4;
  if (has_topgearspd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->topgearspd(), output);
  }
  
  // optional string ExeFileMD5 = 5;
  if (has_exefilemd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exefilemd5().data(), this->exefilemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exefilemd5(), output);
  }
  
  // optional string UserSelectCarID = 6;
  if (has_userselectcarid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userselectcarid().data(), this->userselectcarid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userselectcarid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCheatInfoCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CheatType = 1;
  if (has_cheattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cheattype(), target);
  }
  
  // optional string CarConfigName = 2;
  if (has_carconfigname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carconfigname().data(), this->carconfigname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->carconfigname(), target);
  }
  
  // optional int32 MidGearSpd = 3;
  if (has_midgearspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->midgearspd(), target);
  }
  
  // optional int32 TopGearSpd = 4;
  if (has_topgearspd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->topgearspd(), target);
  }
  
  // optional string ExeFileMD5 = 5;
  if (has_exefilemd5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exefilemd5().data(), this->exefilemd5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exefilemd5(), target);
  }
  
  // optional string UserSelectCarID = 6;
  if (has_userselectcarid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userselectcarid().data(), this->userselectcarid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userselectcarid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCheatInfoCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CheatType = 1;
    if (has_cheattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cheattype());
    }
    
    // optional string CarConfigName = 2;
    if (has_carconfigname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carconfigname());
    }
    
    // optional int32 MidGearSpd = 3;
    if (has_midgearspd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->midgearspd());
    }
    
    // optional int32 TopGearSpd = 4;
    if (has_topgearspd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->topgearspd());
    }
    
    // optional string ExeFileMD5 = 5;
    if (has_exefilemd5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exefilemd5());
    }
    
    // optional string UserSelectCarID = 6;
    if (has_userselectcarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userselectcarid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheatInfoCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCheatInfoCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCheatInfoCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCheatInfoCommand::MergeFrom(const RequestCheatInfoCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cheattype()) {
      set_cheattype(from.cheattype());
    }
    if (from.has_carconfigname()) {
      set_carconfigname(from.carconfigname());
    }
    if (from.has_midgearspd()) {
      set_midgearspd(from.midgearspd());
    }
    if (from.has_topgearspd()) {
      set_topgearspd(from.topgearspd());
    }
    if (from.has_exefilemd5()) {
      set_exefilemd5(from.exefilemd5());
    }
    if (from.has_userselectcarid()) {
      set_userselectcarid(from.userselectcarid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCheatInfoCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCheatInfoCommand::CopyFrom(const RequestCheatInfoCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheatInfoCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestCheatInfoCommand::Swap(RequestCheatInfoCommand* other) {
  if (other != this) {
    std::swap(cheattype_, other->cheattype_);
    std::swap(carconfigname_, other->carconfigname_);
    std::swap(midgearspd_, other->midgearspd_);
    std::swap(topgearspd_, other->topgearspd_);
    std::swap(exefilemd5_, other->exefilemd5_);
    std::swap(userselectcarid_, other->userselectcarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCheatInfoCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCheatInfoCommand_descriptor_;
  metadata.reflection = RequestCheatInfoCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderboardClass::kIdFieldNumber;
const int LeaderboardClass::kNameFieldNumber;
const int LeaderboardClass::kTypeFieldNumber;
#endif  // !_MSC_VER

LeaderboardClass::LeaderboardClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderboardClass::InitAsDefaultInstance() {
}

LeaderboardClass::LeaderboardClass(const LeaderboardClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderboardClass::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderboardClass::~LeaderboardClass() {
  SharedDtor();
}

void LeaderboardClass::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LeaderboardClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderboardClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardClass_descriptor_;
}

const LeaderboardClass& LeaderboardClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

LeaderboardClass* LeaderboardClass::default_instance_ = NULL;

LeaderboardClass* LeaderboardClass::New() const {
  return new LeaderboardClass;
}

void LeaderboardClass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderboardClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderboardClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderboardClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderboardClass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderboardClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderboardClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderboardClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderboardClass::MergeFrom(const LeaderboardClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderboardClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardClass::CopyFrom(const LeaderboardClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardClass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LeaderboardClass::Swap(LeaderboardClass* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderboardClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderboardClass_descriptor_;
  metadata.reflection = LeaderboardClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderboardItem::kRankFieldNumber;
const int LeaderboardItem::kNameFieldNumber;
const int LeaderboardItem::kUserIdFieldNumber;
const int LeaderboardItem::kHeadIndexFieldNumber;
const int LeaderboardItem::kHeadUrlFieldNumber;
const int LeaderboardItem::kTextFieldNumber;
const int LeaderboardItem::kRpLevelFieldNumber;
const int LeaderboardItem::kRpNumFieldNumber;
const int LeaderboardItem::kIsMyselfFieldNumber;
#endif  // !_MSC_VER

LeaderboardItem::LeaderboardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderboardItem::InitAsDefaultInstance() {
}

LeaderboardItem::LeaderboardItem(const LeaderboardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderboardItem::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_LONGLONG(0);
  headindex_ = 0;
  headurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rplevel_ = 0;
  rpnum_ = 0;
  ismyself_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderboardItem::~LeaderboardItem() {
  SharedDtor();
}

void LeaderboardItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (headurl_ != &::google::protobuf::internal::kEmptyString) {
    delete headurl_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void LeaderboardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderboardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardItem_descriptor_;
}

const LeaderboardItem& LeaderboardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

LeaderboardItem* LeaderboardItem::default_instance_ = NULL;

LeaderboardItem* LeaderboardItem::New() const {
  return new LeaderboardItem;
}

void LeaderboardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    userid_ = GOOGLE_LONGLONG(0);
    headindex_ = 0;
    if (has_headurl()) {
      if (headurl_ != &::google::protobuf::internal::kEmptyString) {
        headurl_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    rplevel_ = 0;
    rpnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ismyself_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderboardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userId;
        break;
      }
      
      // required int64 userId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_headIndex;
        break;
      }
      
      // required int32 headIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headindex_)));
          set_has_headindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_headUrl;
        break;
      }
      
      // optional string headUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }
      
      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rpLevel;
        break;
      }
      
      // optional int32 rpLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rplevel_)));
          set_has_rplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_rpNum;
        break;
      }
      
      // optional int32 rpNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpnum_)));
          set_has_rpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isMyself;
        break;
      }
      
      // optional bool isMyself = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMyself:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismyself_)));
          set_has_ismyself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderboardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int64 userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userid(), output);
  }
  
  // required int32 headIndex = 4;
  if (has_headindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->headindex(), output);
  }
  
  // optional string headUrl = 5;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->headurl(), output);
  }
  
  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }
  
  // optional int32 rpLevel = 7;
  if (has_rplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rplevel(), output);
  }
  
  // optional int32 rpNum = 8;
  if (has_rpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rpnum(), output);
  }
  
  // optional bool isMyself = 9;
  if (has_ismyself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ismyself(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderboardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int64 userId = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userid(), target);
  }
  
  // required int32 headIndex = 4;
  if (has_headindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->headindex(), target);
  }
  
  // optional string headUrl = 5;
  if (has_headurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headurl(), target);
  }
  
  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }
  
  // optional int32 rpLevel = 7;
  if (has_rplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rplevel(), target);
  }
  
  // optional int32 rpNum = 8;
  if (has_rpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rpnum(), target);
  }
  
  // optional bool isMyself = 9;
  if (has_ismyself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ismyself(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderboardItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int64 userId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userid());
    }
    
    // required int32 headIndex = 4;
    if (has_headindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headindex());
    }
    
    // optional string headUrl = 5;
    if (has_headurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headurl());
    }
    
    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional int32 rpLevel = 7;
    if (has_rplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rplevel());
    }
    
    // optional int32 rpNum = 8;
    if (has_rpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rpnum());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isMyself = 9;
    if (has_ismyself()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderboardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderboardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderboardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderboardItem::MergeFrom(const LeaderboardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_headindex()) {
      set_headindex(from.headindex());
    }
    if (from.has_headurl()) {
      set_headurl(from.headurl());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_rplevel()) {
      set_rplevel(from.rplevel());
    }
    if (from.has_rpnum()) {
      set_rpnum(from.rpnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ismyself()) {
      set_ismyself(from.ismyself());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderboardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardItem::CopyFrom(const LeaderboardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void LeaderboardItem::Swap(LeaderboardItem* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(userid_, other->userid_);
    std::swap(headindex_, other->headindex_);
    std::swap(headurl_, other->headurl_);
    std::swap(text_, other->text_);
    std::swap(rplevel_, other->rplevel_);
    std::swap(rpnum_, other->rpnum_);
    std::swap(ismyself_, other->ismyself_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderboardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderboardItem_descriptor_;
  metadata.reflection = LeaderboardItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestLeaderboardClass::RequestLeaderboardClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestLeaderboardClass::InitAsDefaultInstance() {
}

RequestLeaderboardClass::RequestLeaderboardClass(const RequestLeaderboardClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLeaderboardClass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLeaderboardClass::~RequestLeaderboardClass() {
  SharedDtor();
}

void RequestLeaderboardClass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestLeaderboardClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLeaderboardClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLeaderboardClass_descriptor_;
}

const RequestLeaderboardClass& RequestLeaderboardClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestLeaderboardClass* RequestLeaderboardClass::default_instance_ = NULL;

RequestLeaderboardClass* RequestLeaderboardClass::New() const {
  return new RequestLeaderboardClass;
}

void RequestLeaderboardClass::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLeaderboardClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestLeaderboardClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestLeaderboardClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestLeaderboardClass::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLeaderboardClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLeaderboardClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLeaderboardClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLeaderboardClass::MergeFrom(const RequestLeaderboardClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLeaderboardClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLeaderboardClass::CopyFrom(const RequestLeaderboardClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaderboardClass::IsInitialized() const {
  
  return true;
}

void RequestLeaderboardClass::Swap(RequestLeaderboardClass* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLeaderboardClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLeaderboardClass_descriptor_;
  metadata.reflection = RequestLeaderboardClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseLeaderboardClass::kClasesFieldNumber;
#endif  // !_MSC_VER

ResponseLeaderboardClass::ResponseLeaderboardClass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseLeaderboardClass::InitAsDefaultInstance() {
}

ResponseLeaderboardClass::ResponseLeaderboardClass(const ResponseLeaderboardClass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseLeaderboardClass::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLeaderboardClass::~ResponseLeaderboardClass() {
  SharedDtor();
}

void ResponseLeaderboardClass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseLeaderboardClass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLeaderboardClass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLeaderboardClass_descriptor_;
}

const ResponseLeaderboardClass& ResponseLeaderboardClass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseLeaderboardClass* ResponseLeaderboardClass::default_instance_ = NULL;

ResponseLeaderboardClass* ResponseLeaderboardClass::New() const {
  return new ResponseLeaderboardClass;
}

void ResponseLeaderboardClass::Clear() {
  clases_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseLeaderboardClass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardClass clases = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clases:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clases()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_clases;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseLeaderboardClass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardClass clases = 1;
  for (int i = 0; i < this->clases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clases(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseLeaderboardClass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardClass clases = 1;
  for (int i = 0; i < this->clases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clases(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseLeaderboardClass::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardClass clases = 1;
  total_size += 1 * this->clases_size();
  for (int i = 0; i < this->clases_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clases(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLeaderboardClass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseLeaderboardClass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseLeaderboardClass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseLeaderboardClass::MergeFrom(const ResponseLeaderboardClass& from) {
  GOOGLE_CHECK_NE(&from, this);
  clases_.MergeFrom(from.clases_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseLeaderboardClass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLeaderboardClass::CopyFrom(const ResponseLeaderboardClass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLeaderboardClass::IsInitialized() const {
  
  for (int i = 0; i < clases_size(); i++) {
    if (!this->clases(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseLeaderboardClass::Swap(ResponseLeaderboardClass* other) {
  if (other != this) {
    clases_.Swap(&other->clases_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseLeaderboardClass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLeaderboardClass_descriptor_;
  metadata.reflection = ResponseLeaderboardClass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderboardHeadInfo::kClassIdFieldNumber;
const int LeaderboardHeadInfo::kTierFieldNumber;
const int LeaderboardHeadInfo::kRangeFieldNumber;
#endif  // !_MSC_VER

LeaderboardHeadInfo::LeaderboardHeadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaderboardHeadInfo::InitAsDefaultInstance() {
}

LeaderboardHeadInfo::LeaderboardHeadInfo(const LeaderboardHeadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaderboardHeadInfo::SharedCtor() {
  _cached_size_ = 0;
  classid_ = 0;
  tier_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderboardHeadInfo::~LeaderboardHeadInfo() {
  SharedDtor();
}

void LeaderboardHeadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaderboardHeadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderboardHeadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardHeadInfo_descriptor_;
}

const LeaderboardHeadInfo& LeaderboardHeadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

LeaderboardHeadInfo* LeaderboardHeadInfo::default_instance_ = NULL;

LeaderboardHeadInfo* LeaderboardHeadInfo::New() const {
  return new LeaderboardHeadInfo;
}

void LeaderboardHeadInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    classid_ = 0;
    tier_ = 0;
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderboardHeadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 classId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tier;
        break;
      }
      
      // required int32 tier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_range;
        break;
      }
      
      // required int32 range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaderboardHeadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 classId = 1;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->classid(), output);
  }
  
  // required int32 tier = 2;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tier(), output);
  }
  
  // required int32 range = 3;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaderboardHeadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 classId = 1;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->classid(), target);
  }
  
  // required int32 tier = 2;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tier(), target);
  }
  
  // required int32 range = 3;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaderboardHeadInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 classId = 1;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }
    
    // required int32 tier = 2;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }
    
    // required int32 range = 3;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderboardHeadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderboardHeadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderboardHeadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderboardHeadInfo::MergeFrom(const LeaderboardHeadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderboardHeadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderboardHeadInfo::CopyFrom(const LeaderboardHeadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderboardHeadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LeaderboardHeadInfo::Swap(LeaderboardHeadInfo* other) {
  if (other != this) {
    std::swap(classid_, other->classid_);
    std::swap(tier_, other->tier_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderboardHeadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderboardHeadInfo_descriptor_;
  metadata.reflection = LeaderboardHeadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLeaderboard::kInfoFieldNumber;
#endif  // !_MSC_VER

RequestLeaderboard::RequestLeaderboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestLeaderboard::InitAsDefaultInstance() {
  info_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo*>(&::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo::default_instance());
}

RequestLeaderboard::RequestLeaderboard(const RequestLeaderboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLeaderboard::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLeaderboard::~RequestLeaderboard() {
  SharedDtor();
}

void RequestLeaderboard::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RequestLeaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLeaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLeaderboard_descriptor_;
}

const RequestLeaderboard& RequestLeaderboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestLeaderboard* RequestLeaderboard::default_instance_ = NULL;

RequestLeaderboard* RequestLeaderboard::New() const {
  return new RequestLeaderboard;
}

void RequestLeaderboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLeaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestLeaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestLeaderboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestLeaderboard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLeaderboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLeaderboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLeaderboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLeaderboard::MergeFrom(const RequestLeaderboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLeaderboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLeaderboard::CopyFrom(const RequestLeaderboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaderboard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RequestLeaderboard::Swap(RequestLeaderboard* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLeaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLeaderboard_descriptor_;
  metadata.reflection = RequestLeaderboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseLeaderboard::kInfoFieldNumber;
const int ResponseLeaderboard::kItemsFieldNumber;
#endif  // !_MSC_VER

ResponseLeaderboard::ResponseLeaderboard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseLeaderboard::InitAsDefaultInstance() {
  info_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo*>(&::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo::default_instance());
}

ResponseLeaderboard::ResponseLeaderboard(const ResponseLeaderboard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseLeaderboard::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLeaderboard::~ResponseLeaderboard() {
  SharedDtor();
}

void ResponseLeaderboard::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ResponseLeaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLeaderboard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLeaderboard_descriptor_;
}

const ResponseLeaderboard& ResponseLeaderboard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseLeaderboard* ResponseLeaderboard::default_instance_ = NULL;

ResponseLeaderboard* ResponseLeaderboard::New() const {
  return new ResponseLeaderboard;
}

void ResponseLeaderboard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseLeaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseLeaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseLeaderboard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseLeaderboard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.LeaderboardHeadInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.LeaderboardItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLeaderboard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseLeaderboard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseLeaderboard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseLeaderboard::MergeFrom(const ResponseLeaderboard& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::com::ea::eamobile::nfsmw::protoc::LeaderboardHeadInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseLeaderboard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLeaderboard::CopyFrom(const ResponseLeaderboard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLeaderboard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseLeaderboard::Swap(ResponseLeaderboard* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseLeaderboard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLeaderboard_descriptor_;
  metadata.reflection = ResponseLeaderboard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestTournamentNum::RequestTournamentNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestTournamentNum::InitAsDefaultInstance() {
}

RequestTournamentNum::RequestTournamentNum(const RequestTournamentNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestTournamentNum::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestTournamentNum::~RequestTournamentNum() {
  SharedDtor();
}

void RequestTournamentNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestTournamentNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestTournamentNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestTournamentNum_descriptor_;
}

const RequestTournamentNum& RequestTournamentNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestTournamentNum* RequestTournamentNum::default_instance_ = NULL;

RequestTournamentNum* RequestTournamentNum::New() const {
  return new RequestTournamentNum;
}

void RequestTournamentNum::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestTournamentNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestTournamentNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestTournamentNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestTournamentNum::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestTournamentNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestTournamentNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestTournamentNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestTournamentNum::MergeFrom(const RequestTournamentNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestTournamentNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestTournamentNum::CopyFrom(const RequestTournamentNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTournamentNum::IsInitialized() const {
  
  return true;
}

void RequestTournamentNum::Swap(RequestTournamentNum* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestTournamentNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestTournamentNum_descriptor_;
  metadata.reflection = RequestTournamentNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseTournamentNum::kRewardNumFieldNumber;
#endif  // !_MSC_VER

ResponseTournamentNum::ResponseTournamentNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseTournamentNum::InitAsDefaultInstance() {
}

ResponseTournamentNum::ResponseTournamentNum(const ResponseTournamentNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseTournamentNum::SharedCtor() {
  _cached_size_ = 0;
  rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseTournamentNum::~ResponseTournamentNum() {
  SharedDtor();
}

void ResponseTournamentNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseTournamentNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseTournamentNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseTournamentNum_descriptor_;
}

const ResponseTournamentNum& ResponseTournamentNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseTournamentNum* ResponseTournamentNum::default_instance_ = NULL;

ResponseTournamentNum* ResponseTournamentNum::New() const {
  return new ResponseTournamentNum;
}

void ResponseTournamentNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseTournamentNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rewardNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseTournamentNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rewardNum = 1;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseTournamentNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rewardNum = 1;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseTournamentNum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rewardNum = 1;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseTournamentNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseTournamentNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseTournamentNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseTournamentNum::MergeFrom(const ResponseTournamentNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseTournamentNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseTournamentNum::CopyFrom(const ResponseTournamentNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTournamentNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResponseTournamentNum::Swap(ResponseTournamentNum* other) {
  if (other != this) {
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseTournamentNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseTournamentNum_descriptor_;
  metadata.reflection = ResponseTournamentNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestCollectEnergyCommand::RequestCollectEnergyCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCollectEnergyCommand::InitAsDefaultInstance() {
}

RequestCollectEnergyCommand::RequestCollectEnergyCommand(const RequestCollectEnergyCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCollectEnergyCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCollectEnergyCommand::~RequestCollectEnergyCommand() {
  SharedDtor();
}

void RequestCollectEnergyCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCollectEnergyCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCollectEnergyCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCollectEnergyCommand_descriptor_;
}

const RequestCollectEnergyCommand& RequestCollectEnergyCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestCollectEnergyCommand* RequestCollectEnergyCommand::default_instance_ = NULL;

RequestCollectEnergyCommand* RequestCollectEnergyCommand::New() const {
  return new RequestCollectEnergyCommand;
}

void RequestCollectEnergyCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCollectEnergyCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestCollectEnergyCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCollectEnergyCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCollectEnergyCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCollectEnergyCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCollectEnergyCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCollectEnergyCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCollectEnergyCommand::MergeFrom(const RequestCollectEnergyCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCollectEnergyCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCollectEnergyCommand::CopyFrom(const RequestCollectEnergyCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCollectEnergyCommand::IsInitialized() const {
  
  return true;
}

void RequestCollectEnergyCommand::Swap(RequestCollectEnergyCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCollectEnergyCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCollectEnergyCommand_descriptor_;
  metadata.reflection = RequestCollectEnergyCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestEnergyTimeCommand::RequestEnergyTimeCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestEnergyTimeCommand::InitAsDefaultInstance() {
}

RequestEnergyTimeCommand::RequestEnergyTimeCommand(const RequestEnergyTimeCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestEnergyTimeCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEnergyTimeCommand::~RequestEnergyTimeCommand() {
  SharedDtor();
}

void RequestEnergyTimeCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestEnergyTimeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEnergyTimeCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEnergyTimeCommand_descriptor_;
}

const RequestEnergyTimeCommand& RequestEnergyTimeCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestEnergyTimeCommand* RequestEnergyTimeCommand::default_instance_ = NULL;

RequestEnergyTimeCommand* RequestEnergyTimeCommand::New() const {
  return new RequestEnergyTimeCommand;
}

void RequestEnergyTimeCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestEnergyTimeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestEnergyTimeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestEnergyTimeCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestEnergyTimeCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEnergyTimeCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestEnergyTimeCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestEnergyTimeCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestEnergyTimeCommand::MergeFrom(const RequestEnergyTimeCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestEnergyTimeCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEnergyTimeCommand::CopyFrom(const RequestEnergyTimeCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEnergyTimeCommand::IsInitialized() const {
  
  return true;
}

void RequestEnergyTimeCommand::Swap(RequestEnergyTimeCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestEnergyTimeCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEnergyTimeCommand_descriptor_;
  metadata.reflection = RequestEnergyTimeCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseEnergyTimeCommand::kStarttimeFieldNumber;
const int ResponseEnergyTimeCommand::kEndtimeFieldNumber;
const int ResponseEnergyTimeCommand::kEnergyFieldNumber;
#endif  // !_MSC_VER

ResponseEnergyTimeCommand::ResponseEnergyTimeCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseEnergyTimeCommand::InitAsDefaultInstance() {
}

ResponseEnergyTimeCommand::ResponseEnergyTimeCommand(const ResponseEnergyTimeCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseEnergyTimeCommand::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseEnergyTimeCommand::~ResponseEnergyTimeCommand() {
  SharedDtor();
}

void ResponseEnergyTimeCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseEnergyTimeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEnergyTimeCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseEnergyTimeCommand_descriptor_;
}

const ResponseEnergyTimeCommand& ResponseEnergyTimeCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseEnergyTimeCommand* ResponseEnergyTimeCommand::default_instance_ = NULL;

ResponseEnergyTimeCommand* ResponseEnergyTimeCommand::New() const {
  return new ResponseEnergyTimeCommand;
}

void ResponseEnergyTimeCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0;
    endtime_ = 0;
    energy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseEnergyTimeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 starttime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }
      
      // required int32 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_energy;
        break;
      }
      
      // required int32 energy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseEnergyTimeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 starttime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->starttime(), output);
  }
  
  // required int32 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }
  
  // required int32 energy = 3;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->energy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseEnergyTimeCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 starttime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->starttime(), target);
  }
  
  // required int32 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }
  
  // required int32 energy = 3;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->energy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseEnergyTimeCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 starttime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }
    
    // required int32 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // required int32 energy = 3;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEnergyTimeCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseEnergyTimeCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseEnergyTimeCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseEnergyTimeCommand::MergeFrom(const ResponseEnergyTimeCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseEnergyTimeCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEnergyTimeCommand::CopyFrom(const ResponseEnergyTimeCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEnergyTimeCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ResponseEnergyTimeCommand::Swap(ResponseEnergyTimeCommand* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(energy_, other->energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseEnergyTimeCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseEnergyTimeCommand_descriptor_;
  metadata.reflection = ResponseEnergyTimeCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFansRewardCommand::kIdFieldNumber;
#endif  // !_MSC_VER

RequestFansRewardCommand::RequestFansRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFansRewardCommand::InitAsDefaultInstance() {
}

RequestFansRewardCommand::RequestFansRewardCommand(const RequestFansRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFansRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFansRewardCommand::~RequestFansRewardCommand() {
  SharedDtor();
}

void RequestFansRewardCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFansRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFansRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFansRewardCommand_descriptor_;
}

const RequestFansRewardCommand& RequestFansRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestFansRewardCommand* RequestFansRewardCommand::default_instance_ = NULL;

RequestFansRewardCommand* RequestFansRewardCommand::New() const {
  return new RequestFansRewardCommand;
}

void RequestFansRewardCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFansRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFansRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFansRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFansRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFansRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFansRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFansRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFansRewardCommand::MergeFrom(const RequestFansRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFansRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFansRewardCommand::CopyFrom(const RequestFansRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFansRewardCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestFansRewardCommand::Swap(RequestFansRewardCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFansRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFansRewardCommand_descriptor_;
  metadata.reflection = RequestFansRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFansRewardTimeCommand::kIdFieldNumber;
const int ResponseFansRewardTimeCommand::kStarttimeFieldNumber;
#endif  // !_MSC_VER

ResponseFansRewardTimeCommand::ResponseFansRewardTimeCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFansRewardTimeCommand::InitAsDefaultInstance() {
}

ResponseFansRewardTimeCommand::ResponseFansRewardTimeCommand(const ResponseFansRewardTimeCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFansRewardTimeCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  starttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFansRewardTimeCommand::~ResponseFansRewardTimeCommand() {
  SharedDtor();
}

void ResponseFansRewardTimeCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseFansRewardTimeCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFansRewardTimeCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFansRewardTimeCommand_descriptor_;
}

const ResponseFansRewardTimeCommand& ResponseFansRewardTimeCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFansRewardTimeCommand* ResponseFansRewardTimeCommand::default_instance_ = NULL;

ResponseFansRewardTimeCommand* ResponseFansRewardTimeCommand::New() const {
  return new ResponseFansRewardTimeCommand;
}

void ResponseFansRewardTimeCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    starttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFansRewardTimeCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starttime;
        break;
      }
      
      // optional int32 starttime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFansRewardTimeCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 starttime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->starttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFansRewardTimeCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 starttime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->starttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFansRewardTimeCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 starttime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFansRewardTimeCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFansRewardTimeCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFansRewardTimeCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFansRewardTimeCommand::MergeFrom(const ResponseFansRewardTimeCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFansRewardTimeCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFansRewardTimeCommand::CopyFrom(const ResponseFansRewardTimeCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFansRewardTimeCommand::IsInitialized() const {
  
  return true;
}

void ResponseFansRewardTimeCommand::Swap(ResponseFansRewardTimeCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFansRewardTimeCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFansRewardTimeCommand_descriptor_;
  metadata.reflection = ResponseFansRewardTimeCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPropPurchaseCommand::kIdFieldNumber;
const int RequestPropPurchaseCommand::kCountFieldNumber;
#endif  // !_MSC_VER

RequestPropPurchaseCommand::RequestPropPurchaseCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPropPurchaseCommand::InitAsDefaultInstance() {
}

RequestPropPurchaseCommand::RequestPropPurchaseCommand(const RequestPropPurchaseCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPropPurchaseCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPropPurchaseCommand::~RequestPropPurchaseCommand() {
  SharedDtor();
}

void RequestPropPurchaseCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPropPurchaseCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPropPurchaseCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPropPurchaseCommand_descriptor_;
}

const RequestPropPurchaseCommand& RequestPropPurchaseCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestPropPurchaseCommand* RequestPropPurchaseCommand::default_instance_ = NULL;

RequestPropPurchaseCommand* RequestPropPurchaseCommand::New() const {
  return new RequestPropPurchaseCommand;
}

void RequestPropPurchaseCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPropPurchaseCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPropPurchaseCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPropPurchaseCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPropPurchaseCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPropPurchaseCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPropPurchaseCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPropPurchaseCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPropPurchaseCommand::MergeFrom(const RequestPropPurchaseCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPropPurchaseCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPropPurchaseCommand::CopyFrom(const RequestPropPurchaseCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPropPurchaseCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestPropPurchaseCommand::Swap(RequestPropPurchaseCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPropPurchaseCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPropPurchaseCommand_descriptor_;
  metadata.reflection = RequestPropPurchaseCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestMissionRewardCommand::RequestMissionRewardCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestMissionRewardCommand::InitAsDefaultInstance() {
}

RequestMissionRewardCommand::RequestMissionRewardCommand(const RequestMissionRewardCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestMissionRewardCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMissionRewardCommand::~RequestMissionRewardCommand() {
  SharedDtor();
}

void RequestMissionRewardCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMissionRewardCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMissionRewardCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMissionRewardCommand_descriptor_;
}

const RequestMissionRewardCommand& RequestMissionRewardCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestMissionRewardCommand* RequestMissionRewardCommand::default_instance_ = NULL;

RequestMissionRewardCommand* RequestMissionRewardCommand::New() const {
  return new RequestMissionRewardCommand;
}

void RequestMissionRewardCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMissionRewardCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestMissionRewardCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestMissionRewardCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestMissionRewardCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMissionRewardCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMissionRewardCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMissionRewardCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMissionRewardCommand::MergeFrom(const RequestMissionRewardCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMissionRewardCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMissionRewardCommand::CopyFrom(const RequestMissionRewardCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMissionRewardCommand::IsInitialized() const {
  
  return true;
}

void RequestMissionRewardCommand::Swap(RequestMissionRewardCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMissionRewardCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMissionRewardCommand_descriptor_;
  metadata.reflection = RequestMissionRewardCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestMissionFinishCommand::kIdFieldNumber;
#endif  // !_MSC_VER

RequestMissionFinishCommand::RequestMissionFinishCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestMissionFinishCommand::InitAsDefaultInstance() {
}

RequestMissionFinishCommand::RequestMissionFinishCommand(const RequestMissionFinishCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestMissionFinishCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestMissionFinishCommand::~RequestMissionFinishCommand() {
  SharedDtor();
}

void RequestMissionFinishCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestMissionFinishCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestMissionFinishCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestMissionFinishCommand_descriptor_;
}

const RequestMissionFinishCommand& RequestMissionFinishCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestMissionFinishCommand* RequestMissionFinishCommand::default_instance_ = NULL;

RequestMissionFinishCommand* RequestMissionFinishCommand::New() const {
  return new RequestMissionFinishCommand;
}

void RequestMissionFinishCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestMissionFinishCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestMissionFinishCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestMissionFinishCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestMissionFinishCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestMissionFinishCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestMissionFinishCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestMissionFinishCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestMissionFinishCommand::MergeFrom(const RequestMissionFinishCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestMissionFinishCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestMissionFinishCommand::CopyFrom(const RequestMissionFinishCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMissionFinishCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestMissionFinishCommand::Swap(RequestMissionFinishCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestMissionFinishCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestMissionFinishCommand_descriptor_;
  metadata.reflection = RequestMissionFinishCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseMissionListCommand::kMissionsFieldNumber;
#endif  // !_MSC_VER

ResponseMissionListCommand::ResponseMissionListCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseMissionListCommand::InitAsDefaultInstance() {
}

ResponseMissionListCommand::ResponseMissionListCommand(const ResponseMissionListCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseMissionListCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseMissionListCommand::~ResponseMissionListCommand() {
  SharedDtor();
}

void ResponseMissionListCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseMissionListCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseMissionListCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseMissionListCommand_descriptor_;
}

const ResponseMissionListCommand& ResponseMissionListCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseMissionListCommand* ResponseMissionListCommand::default_instance_ = NULL;

ResponseMissionListCommand* ResponseMissionListCommand::New() const {
  return new ResponseMissionListCommand;
}

void ResponseMissionListCommand::Clear() {
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseMissionListCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.MissionInfo missions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseMissionListCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.MissionInfo missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseMissionListCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.MissionInfo missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseMissionListCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.MissionInfo missions = 1;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseMissionListCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseMissionListCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseMissionListCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseMissionListCommand::MergeFrom(const ResponseMissionListCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseMissionListCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseMissionListCommand::CopyFrom(const ResponseMissionListCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMissionListCommand::IsInitialized() const {
  
  for (int i = 0; i < missions_size(); i++) {
    if (!this->missions(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseMissionListCommand::Swap(ResponseMissionListCommand* other) {
  if (other != this) {
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseMissionListCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseMissionListCommand_descriptor_;
  metadata.reflection = ResponseMissionListCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestLotteryCommand::kLotteryTypeFieldNumber;
#endif  // !_MSC_VER

RequestLotteryCommand::RequestLotteryCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestLotteryCommand::InitAsDefaultInstance() {
}

RequestLotteryCommand::RequestLotteryCommand(const RequestLotteryCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestLotteryCommand::SharedCtor() {
  _cached_size_ = 0;
  lotterytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLotteryCommand::~RequestLotteryCommand() {
  SharedDtor();
}

void RequestLotteryCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestLotteryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLotteryCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLotteryCommand_descriptor_;
}

const RequestLotteryCommand& RequestLotteryCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestLotteryCommand* RequestLotteryCommand::default_instance_ = NULL;

RequestLotteryCommand* RequestLotteryCommand::New() const {
  return new RequestLotteryCommand;
}

void RequestLotteryCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lotterytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestLotteryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lotteryType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotterytype_)));
          set_has_lotterytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestLotteryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lotteryType = 1;
  if (has_lotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lotterytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestLotteryCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lotteryType = 1;
  if (has_lotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lotterytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestLotteryCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lotteryType = 1;
    if (has_lotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotterytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLotteryCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestLotteryCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestLotteryCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestLotteryCommand::MergeFrom(const RequestLotteryCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lotterytype()) {
      set_lotterytype(from.lotterytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestLotteryCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLotteryCommand::CopyFrom(const RequestLotteryCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLotteryCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestLotteryCommand::Swap(RequestLotteryCommand* other) {
  if (other != this) {
    std::swap(lotterytype_, other->lotterytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestLotteryCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLotteryCommand_descriptor_;
  metadata.reflection = RequestLotteryCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseLotteryCommand::kRewardsFieldNumber;
#endif  // !_MSC_VER

ResponseLotteryCommand::ResponseLotteryCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseLotteryCommand::InitAsDefaultInstance() {
}

ResponseLotteryCommand::ResponseLotteryCommand(const ResponseLotteryCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseLotteryCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLotteryCommand::~ResponseLotteryCommand() {
  SharedDtor();
}

void ResponseLotteryCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseLotteryCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLotteryCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLotteryCommand_descriptor_;
}

const ResponseLotteryCommand& ResponseLotteryCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseLotteryCommand* ResponseLotteryCommand::default_instance_ = NULL;

ResponseLotteryCommand* ResponseLotteryCommand::New() const {
  return new ResponseLotteryCommand;
}

void ResponseLotteryCommand::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseLotteryCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseLotteryCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseLotteryCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseLotteryCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLotteryCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseLotteryCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseLotteryCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseLotteryCommand::MergeFrom(const ResponseLotteryCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseLotteryCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLotteryCommand::CopyFrom(const ResponseLotteryCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLotteryCommand::IsInitialized() const {
  
  return true;
}

void ResponseLotteryCommand::Swap(ResponseLotteryCommand* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseLotteryCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLotteryCommand_descriptor_;
  metadata.reflection = ResponseLotteryCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RequestFleetRaceCommand::RequestFleetRaceCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFleetRaceCommand::InitAsDefaultInstance() {
}

RequestFleetRaceCommand::RequestFleetRaceCommand(const RequestFleetRaceCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFleetRaceCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFleetRaceCommand::~RequestFleetRaceCommand() {
  SharedDtor();
}

void RequestFleetRaceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFleetRaceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFleetRaceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFleetRaceCommand_descriptor_;
}

const RequestFleetRaceCommand& RequestFleetRaceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestFleetRaceCommand* RequestFleetRaceCommand::default_instance_ = NULL;

RequestFleetRaceCommand* RequestFleetRaceCommand::New() const {
  return new RequestFleetRaceCommand;
}

void RequestFleetRaceCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFleetRaceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RequestFleetRaceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFleetRaceCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFleetRaceCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFleetRaceCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFleetRaceCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFleetRaceCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFleetRaceCommand::MergeFrom(const RequestFleetRaceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFleetRaceCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFleetRaceCommand::CopyFrom(const RequestFleetRaceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFleetRaceCommand::IsInitialized() const {
  
  return true;
}

void RequestFleetRaceCommand::Swap(RequestFleetRaceCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFleetRaceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFleetRaceCommand_descriptor_;
  metadata.reflection = RequestFleetRaceCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFleetRaceCommand::kRacesFieldNumber;
const int ResponseFleetRaceCommand::kRpLeaderboardFieldNumber;
const int ResponseFleetRaceCommand::kSelfRankFieldNumber;
#endif  // !_MSC_VER

ResponseFleetRaceCommand::ResponseFleetRaceCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFleetRaceCommand::InitAsDefaultInstance() {
}

ResponseFleetRaceCommand::ResponseFleetRaceCommand(const ResponseFleetRaceCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFleetRaceCommand::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFleetRaceCommand::~ResponseFleetRaceCommand() {
  SharedDtor();
}

void ResponseFleetRaceCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseFleetRaceCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFleetRaceCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFleetRaceCommand_descriptor_;
}

const ResponseFleetRaceCommand& ResponseFleetRaceCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFleetRaceCommand* ResponseFleetRaceCommand::default_instance_ = NULL;

ResponseFleetRaceCommand* ResponseFleetRaceCommand::New() const {
  return new ResponseFleetRaceCommand;
}

void ResponseFleetRaceCommand::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    selfrank_ = 0;
  }
  races_.Clear();
  rpleaderboard_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFleetRaceCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.ea.eamobile.nfsmw.protoc.FleetRace races = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_races:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_races()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_races;
        if (input->ExpectTag(18)) goto parse_rpLeaderboard;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpLeaderboard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpleaderboard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rpLeaderboard;
        if (input->ExpectTag(24)) goto parse_selfRank;
        break;
      }
      
      // required int32 selfRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrank_)));
          set_has_selfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFleetRaceCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.FleetRace races = 1;
  for (int i = 0; i < this->races_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->races(i), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
  for (int i = 0; i < this->rpleaderboard_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rpleaderboard(i), output);
  }
  
  // required int32 selfRank = 3;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfrank(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFleetRaceCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .com.ea.eamobile.nfsmw.protoc.FleetRace races = 1;
  for (int i = 0; i < this->races_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->races(i), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
  for (int i = 0; i < this->rpleaderboard_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rpleaderboard(i), target);
  }
  
  // required int32 selfRank = 3;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfrank(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFleetRaceCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required int32 selfRank = 3;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrank());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.FleetRace races = 1;
  total_size += 1 * this->races_size();
  for (int i = 0; i < this->races_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->races(i));
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RpLeaderboardMessage rpLeaderboard = 2;
  total_size += 1 * this->rpleaderboard_size();
  for (int i = 0; i < this->rpleaderboard_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpleaderboard(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFleetRaceCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFleetRaceCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFleetRaceCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFleetRaceCommand::MergeFrom(const ResponseFleetRaceCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  races_.MergeFrom(from.races_);
  rpleaderboard_.MergeFrom(from.rpleaderboard_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_selfrank()) {
      set_selfrank(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFleetRaceCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFleetRaceCommand::CopyFrom(const ResponseFleetRaceCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFleetRaceCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < races_size(); i++) {
    if (!this->races(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rpleaderboard_size(); i++) {
    if (!this->rpleaderboard(i).IsInitialized()) return false;
  }
  return true;
}

void ResponseFleetRaceCommand::Swap(ResponseFleetRaceCommand* other) {
  if (other != this) {
    races_.Swap(&other->races_);
    rpleaderboard_.Swap(&other->rpleaderboard_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFleetRaceCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFleetRaceCommand_descriptor_;
  metadata.reflection = ResponseFleetRaceCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFleetStartCommand::kIdFieldNumber;
const int RequestFleetStartCommand::kCarsFieldNumber;
#endif  // !_MSC_VER

RequestFleetStartCommand::RequestFleetStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFleetStartCommand::InitAsDefaultInstance() {
}

RequestFleetStartCommand::RequestFleetStartCommand(const RequestFleetStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFleetStartCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFleetStartCommand::~RequestFleetStartCommand() {
  SharedDtor();
}

void RequestFleetStartCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFleetStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFleetStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFleetStartCommand_descriptor_;
}

const RequestFleetStartCommand& RequestFleetStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestFleetStartCommand* RequestFleetStartCommand::default_instance_ = NULL;

RequestFleetStartCommand* RequestFleetStartCommand::New() const {
  return new RequestFleetStartCommand;
}

void RequestFleetStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  cars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFleetStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cars;
        break;
      }
      
      // repeated string cars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cars()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cars(0).data(), this->cars(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cars;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFleetStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // repeated string cars = 2;
  for (int i = 0; i < this->cars_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cars(i).data(), this->cars(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cars(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFleetStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // repeated string cars = 2;
  for (int i = 0; i < this->cars_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cars(i).data(), this->cars(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->cars(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFleetStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  // repeated string cars = 2;
  total_size += 1 * this->cars_size();
  for (int i = 0; i < this->cars_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cars(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFleetStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFleetStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFleetStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFleetStartCommand::MergeFrom(const RequestFleetStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  cars_.MergeFrom(from.cars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFleetStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFleetStartCommand::CopyFrom(const RequestFleetStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFleetStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestFleetStartCommand::Swap(RequestFleetStartCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    cars_.Swap(&other->cars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFleetStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFleetStartCommand_descriptor_;
  metadata.reflection = RequestFleetStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFleetStartCommand::kIdFieldNumber;
const int ResponseFleetStartCommand::kResultFieldNumber;
const int ResponseFleetStartCommand::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

ResponseFleetStartCommand::ResponseFleetStartCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFleetStartCommand::InitAsDefaultInstance() {
}

ResponseFleetStartCommand::ResponseFleetStartCommand(const ResponseFleetStartCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFleetStartCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFleetStartCommand::~ResponseFleetStartCommand() {
  SharedDtor();
}

void ResponseFleetStartCommand::SharedDtor() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void ResponseFleetStartCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFleetStartCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFleetStartCommand_descriptor_;
}

const ResponseFleetStartCommand& ResponseFleetStartCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFleetStartCommand* ResponseFleetStartCommand::default_instance_ = NULL;

ResponseFleetStartCommand* ResponseFleetStartCommand::New() const {
  return new ResponseFleetStartCommand;
}

void ResponseFleetStartCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    result_ = 0;
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFleetStartCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_displayName;
        break;
      }
      
      // required string displayName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFleetStartCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->displayname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFleetStartCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFleetStartCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string displayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFleetStartCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFleetStartCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFleetStartCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFleetStartCommand::MergeFrom(const ResponseFleetStartCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFleetStartCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFleetStartCommand::CopyFrom(const ResponseFleetStartCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFleetStartCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ResponseFleetStartCommand::Swap(ResponseFleetStartCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(displayname_, other->displayname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFleetStartCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFleetStartCommand_descriptor_;
  metadata.reflection = ResponseFleetStartCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFleetEndCommand::kIdFieldNumber;
const int RequestFleetEndCommand::kAdvancedFieldNumber;
#endif  // !_MSC_VER

RequestFleetEndCommand::RequestFleetEndCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFleetEndCommand::InitAsDefaultInstance() {
}

RequestFleetEndCommand::RequestFleetEndCommand(const RequestFleetEndCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFleetEndCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  advanced_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFleetEndCommand::~RequestFleetEndCommand() {
  SharedDtor();
}

void RequestFleetEndCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFleetEndCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFleetEndCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFleetEndCommand_descriptor_;
}

const RequestFleetEndCommand& RequestFleetEndCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestFleetEndCommand* RequestFleetEndCommand::default_instance_ = NULL;

RequestFleetEndCommand* RequestFleetEndCommand::New() const {
  return new RequestFleetEndCommand;
}

void RequestFleetEndCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    advanced_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFleetEndCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advanced;
        break;
      }
      
      // optional bool advanced = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advanced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &advanced_)));
          set_has_advanced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFleetEndCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional bool advanced = 2;
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->advanced(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFleetEndCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional bool advanced = 2;
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->advanced(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFleetEndCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional bool advanced = 2;
    if (has_advanced()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFleetEndCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFleetEndCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFleetEndCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFleetEndCommand::MergeFrom(const RequestFleetEndCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_advanced()) {
      set_advanced(from.advanced());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFleetEndCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFleetEndCommand::CopyFrom(const RequestFleetEndCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFleetEndCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestFleetEndCommand::Swap(RequestFleetEndCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(advanced_, other->advanced_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFleetEndCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFleetEndCommand_descriptor_;
  metadata.reflection = RequestFleetEndCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFleetEndCommand::kIdFieldNumber;
const int ResponseFleetEndCommand::kResultFieldNumber;
const int ResponseFleetEndCommand::kDisplayNameFieldNumber;
const int ResponseFleetEndCommand::kRankFieldNumber;
const int ResponseFleetEndCommand::kRewardsFieldNumber;
#endif  // !_MSC_VER

ResponseFleetEndCommand::ResponseFleetEndCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFleetEndCommand::InitAsDefaultInstance() {
}

ResponseFleetEndCommand::ResponseFleetEndCommand(const ResponseFleetEndCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFleetEndCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFleetEndCommand::~ResponseFleetEndCommand() {
  SharedDtor();
}

void ResponseFleetEndCommand::SharedDtor() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void ResponseFleetEndCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFleetEndCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFleetEndCommand_descriptor_;
}

const ResponseFleetEndCommand& ResponseFleetEndCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFleetEndCommand* ResponseFleetEndCommand::default_instance_ = NULL;

ResponseFleetEndCommand* ResponseFleetEndCommand::New() const {
  return new ResponseFleetEndCommand;
}

void ResponseFleetEndCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    result_ = 0;
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
    rank_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFleetEndCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_displayName;
        break;
      }
      
      // required string displayName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }
      
      // required int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        break;
      }
      
      // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFleetEndCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->displayname(), output);
  }
  
  // required int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 5;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewards(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFleetEndCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }
  
  // required int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }
  
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 5;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewards(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFleetEndCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string displayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
    // required int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }
    
  }
  // repeated .com.ea.eamobile.nfsmw.protoc.RewardList rewards = 5;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFleetEndCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFleetEndCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFleetEndCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFleetEndCommand::MergeFrom(const ResponseFleetEndCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFleetEndCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFleetEndCommand::CopyFrom(const ResponseFleetEndCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFleetEndCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ResponseFleetEndCommand::Swap(ResponseFleetEndCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(displayname_, other->displayname_);
    std::swap(rank_, other->rank_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFleetEndCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFleetEndCommand_descriptor_;
  metadata.reflection = ResponseFleetEndCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFleetDoubleCommand::kIdFieldNumber;
#endif  // !_MSC_VER

RequestFleetDoubleCommand::RequestFleetDoubleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFleetDoubleCommand::InitAsDefaultInstance() {
}

RequestFleetDoubleCommand::RequestFleetDoubleCommand(const RequestFleetDoubleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFleetDoubleCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFleetDoubleCommand::~RequestFleetDoubleCommand() {
  SharedDtor();
}

void RequestFleetDoubleCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFleetDoubleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFleetDoubleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFleetDoubleCommand_descriptor_;
}

const RequestFleetDoubleCommand& RequestFleetDoubleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestFleetDoubleCommand* RequestFleetDoubleCommand::default_instance_ = NULL;

RequestFleetDoubleCommand* RequestFleetDoubleCommand::New() const {
  return new RequestFleetDoubleCommand;
}

void RequestFleetDoubleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFleetDoubleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFleetDoubleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFleetDoubleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFleetDoubleCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFleetDoubleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFleetDoubleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFleetDoubleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFleetDoubleCommand::MergeFrom(const RequestFleetDoubleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFleetDoubleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFleetDoubleCommand::CopyFrom(const RequestFleetDoubleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFleetDoubleCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestFleetDoubleCommand::Swap(RequestFleetDoubleCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFleetDoubleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFleetDoubleCommand_descriptor_;
  metadata.reflection = RequestFleetDoubleCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFleetDoubleCommand::kIdFieldNumber;
const int ResponseFleetDoubleCommand::kResultFieldNumber;
const int ResponseFleetDoubleCommand::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

ResponseFleetDoubleCommand::ResponseFleetDoubleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFleetDoubleCommand::InitAsDefaultInstance() {
}

ResponseFleetDoubleCommand::ResponseFleetDoubleCommand(const ResponseFleetDoubleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFleetDoubleCommand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFleetDoubleCommand::~ResponseFleetDoubleCommand() {
  SharedDtor();
}

void ResponseFleetDoubleCommand::SharedDtor() {
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void ResponseFleetDoubleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFleetDoubleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFleetDoubleCommand_descriptor_;
}

const ResponseFleetDoubleCommand& ResponseFleetDoubleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFleetDoubleCommand* ResponseFleetDoubleCommand::default_instance_ = NULL;

ResponseFleetDoubleCommand* ResponseFleetDoubleCommand::New() const {
  return new ResponseFleetDoubleCommand;
}

void ResponseFleetDoubleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    result_ = 0;
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFleetDoubleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_displayName;
        break;
      }
      
      // required string displayName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFleetDoubleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->displayname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFleetDoubleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFleetDoubleCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string displayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFleetDoubleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFleetDoubleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFleetDoubleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFleetDoubleCommand::MergeFrom(const ResponseFleetDoubleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFleetDoubleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFleetDoubleCommand::CopyFrom(const ResponseFleetDoubleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFleetDoubleCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ResponseFleetDoubleCommand::Swap(ResponseFleetDoubleCommand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(displayname_, other->displayname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFleetDoubleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFleetDoubleCommand_descriptor_;
  metadata.reflection = ResponseFleetDoubleCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFixCarLimitCommand::kCarIdFieldNumber;
#endif  // !_MSC_VER

RequestFixCarLimitCommand::RequestFixCarLimitCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFixCarLimitCommand::InitAsDefaultInstance() {
}

RequestFixCarLimitCommand::RequestFixCarLimitCommand(const RequestFixCarLimitCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFixCarLimitCommand::SharedCtor() {
  _cached_size_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFixCarLimitCommand::~RequestFixCarLimitCommand() {
  SharedDtor();
}

void RequestFixCarLimitCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (this != default_instance_) {
  }
}

void RequestFixCarLimitCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFixCarLimitCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFixCarLimitCommand_descriptor_;
}

const RequestFixCarLimitCommand& RequestFixCarLimitCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestFixCarLimitCommand* RequestFixCarLimitCommand::default_instance_ = NULL;

RequestFixCarLimitCommand* RequestFixCarLimitCommand::New() const {
  return new RequestFixCarLimitCommand;
}

void RequestFixCarLimitCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFixCarLimitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string carId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFixCarLimitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->carid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFixCarLimitCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->carid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFixCarLimitCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string carId = 1;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFixCarLimitCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFixCarLimitCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFixCarLimitCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFixCarLimitCommand::MergeFrom(const RequestFixCarLimitCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carid()) {
      set_carid(from.carid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFixCarLimitCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFixCarLimitCommand::CopyFrom(const RequestFixCarLimitCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFixCarLimitCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestFixCarLimitCommand::Swap(RequestFixCarLimitCommand* other) {
  if (other != this) {
    std::swap(carid_, other->carid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFixCarLimitCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFixCarLimitCommand_descriptor_;
  metadata.reflection = RequestFixCarLimitCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFixCarLimitCommand::kCarIdFieldNumber;
const int ResponseFixCarLimitCommand::kResultFieldNumber;
const int ResponseFixCarLimitCommand::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

ResponseFixCarLimitCommand::ResponseFixCarLimitCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFixCarLimitCommand::InitAsDefaultInstance() {
}

ResponseFixCarLimitCommand::ResponseFixCarLimitCommand(const ResponseFixCarLimitCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFixCarLimitCommand::SharedCtor() {
  _cached_size_ = 0;
  carid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0;
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFixCarLimitCommand::~ResponseFixCarLimitCommand() {
  SharedDtor();
}

void ResponseFixCarLimitCommand::SharedDtor() {
  if (carid_ != &::google::protobuf::internal::kEmptyString) {
    delete carid_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void ResponseFixCarLimitCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFixCarLimitCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFixCarLimitCommand_descriptor_;
}

const ResponseFixCarLimitCommand& ResponseFixCarLimitCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseFixCarLimitCommand* ResponseFixCarLimitCommand::default_instance_ = NULL;

ResponseFixCarLimitCommand* ResponseFixCarLimitCommand::New() const {
  return new ResponseFixCarLimitCommand;
}

void ResponseFixCarLimitCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_carid()) {
      if (carid_ != &::google::protobuf::internal::kEmptyString) {
        carid_->clear();
      }
    }
    result_ = 0;
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFixCarLimitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string carId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carid().data(), this->carid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_displayName;
        break;
      }
      
      // required string displayName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFixCarLimitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->carid(), output);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->displayname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFixCarLimitCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string carId = 1;
  if (has_carid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carid().data(), this->carid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->carid(), target);
  }
  
  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }
  
  // required string displayName = 3;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->displayname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFixCarLimitCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string carId = 1;
    if (has_carid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carid());
    }
    
    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }
    
    // required string displayName = 3;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFixCarLimitCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFixCarLimitCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFixCarLimitCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFixCarLimitCommand::MergeFrom(const ResponseFixCarLimitCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_carid()) {
      set_carid(from.carid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFixCarLimitCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFixCarLimitCommand::CopyFrom(const ResponseFixCarLimitCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFixCarLimitCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ResponseFixCarLimitCommand::Swap(ResponseFixCarLimitCommand* other) {
  if (other != this) {
    std::swap(carid_, other->carid_);
    std::swap(result_, other->result_);
    std::swap(displayname_, other->displayname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFixCarLimitCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFixCarLimitCommand_descriptor_;
  metadata.reflection = ResponseFixCarLimitCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCommand::kHeadFieldNumber;
const int RequestCommand::kTrackCommandFieldNumber;
const int RequestCommand::kLoginCommandFieldNumber;
const int RequestCommand::kGhostCommandFieldNumber;
const int RequestCommand::kRaceResultCommandFieldNumber;
const int RequestCommand::kTournamentDetailCommandFieldNumber;
const int RequestCommand::kTournamentRewardDetailCommandFieldNumber;
const int RequestCommand::kTournamentCommandFieldNumber;
const int RequestCommand::kResourceCommandFieldNumber;
const int RequestCommand::kTournamentSignUpCommandFieldNumber;
const int RequestCommand::kRaceStartCommandFieldNumber;
const int RequestCommand::kBindingStartCommandFieldNumber;
const int RequestCommand::kBindingResultCommandFieldNumber;
const int RequestCommand::kBindingConfirmCommandFieldNumber;
const int RequestCommand::kGetRwardFieldNumber;
const int RequestCommand::kGarageCommandFieldNumber;
const int RequestCommand::kBuyCarCommandFieldNumber;
const int RequestCommand::kCarDataCommandFieldNumber;
const int RequestCommand::kUpgradeSlotCommandFieldNumber;
const int RequestCommand::kUseChartletCommandFieldNumber;
const int RequestCommand::kModifyUserInfoCommandFieldNumber;
const int RequestCommand::kStoreDetailCommandFieldNumber;
const int RequestCommand::kBuyItemCommandFieldNumber;
const int RequestCommand::kRegistJaguarFieldNumber;
const int RequestCommand::kIapCheckCommandFieldNumber;
const int RequestCommand::kTutorialRewardCommandFieldNumber;
const int RequestCommand::kRpLeaderboardCommandFieldNumber;
const int RequestCommand::kGhostRecordCommandFieldNumber;
const int RequestCommand::kChallengeMathInfoCommandFieldNumber;
const int RequestCommand::kProfileUserDataCommandFieldNumber;
const int RequestCommand::kProfileNextCarCommandFieldNumber;
const int RequestCommand::kProfileLikeCommandFieldNumber;
const int RequestCommand::kProfileReportCommandFieldNumber;
const int RequestCommand::kProfileVSCommandFieldNumber;
const int RequestCommand::kGotchaCommandFieldNumber;
const int RequestCommand::kCheatInfoCommandFieldNumber;
const int RequestCommand::kRecordUserRaceActionCommandFieldNumber;
const int RequestCommand::kSystemCommandFieldNumber;
const int RequestCommand::kLeaderboardClassCommandFieldNumber;
const int RequestCommand::kLeaderboardCommandFieldNumber;
const int RequestCommand::kRequestTournamentNumFieldNumber;
const int RequestCommand::kRequestQuickRaceFieldNumber;
const int RequestCommand::kBindingTokenCommandFieldNumber;
const int RequestCommand::kBindingInfoCommandFieldNumber;
const int RequestCommand::kCollectEnergyCommandFieldNumber;
const int RequestCommand::kEnergyTimeCommandFieldNumber;
const int RequestCommand::kFansRewardCommandFieldNumber;
const int RequestCommand::kPropPurchaseCommandFieldNumber;
const int RequestCommand::kMissionRewardCommandFieldNumber;
const int RequestCommand::kMissionFinishCommandFieldNumber;
const int RequestCommand::kLotteryCommandFieldNumber;
const int RequestCommand::kFleetRaceCommandFieldNumber;
const int RequestCommand::kFleetStartCommandFieldNumber;
const int RequestCommand::kFleetEndCommandFieldNumber;
const int RequestCommand::kFleetDoubleCommandFieldNumber;
const int RequestCommand::kFixCarLimitCommandFieldNumber;
#endif  // !_MSC_VER

RequestCommand::RequestCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCommand::InitAsDefaultInstance() {
  head_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::HeadInfo*>(&::com::ea::eamobile::nfsmw::protoc::HeadInfo::default_instance());
  trackcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTrackCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestTrackCommand::default_instance());
  logincommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestUserInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestUserInfoCommand::default_instance());
  ghostcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestModeInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestModeInfoCommand::default_instance());
  raceresultcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestRaceResultCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestRaceResultCommand::default_instance());
  tournamentdetailcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTournamentDetailCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestTournamentDetailCommand::default_instance());
  tournamentrewarddetailcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTournamentRewardDetailCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestTournamentRewardDetailCommand::default_instance());
  tournamentcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTournamentCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestTournamentCommand::default_instance());
  resourcecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestResourceCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestResourceCommand::default_instance());
  tournamentsignupcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTournamentSignUpCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestTournamentSignUpCommand::default_instance());
  racestartcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestRaceStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestRaceStartCommand::default_instance());
  bindingstartcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBindingStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBindingStartCommand::default_instance());
  bindingresultcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBindingResultCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBindingResultCommand::default_instance());
  bindingconfirmcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBindingConfirmCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBindingConfirmCommand::default_instance());
  getrward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestGetRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestGetRewardCommand::default_instance());
  garagecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestGarageCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestGarageCommand::default_instance());
  buycarcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBuyCarCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBuyCarCommand::default_instance());
  cardatacommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestCarDataCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestCarDataCommand::default_instance());
  upgradeslotcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestUpgradeSlotCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestUpgradeSlotCommand::default_instance());
  usechartletcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestUseChartletCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestUseChartletCommand::default_instance());
  modifyuserinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestModifyUserInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestModifyUserInfoCommand::default_instance());
  storedetailcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestStoreDetailCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestStoreDetailCommand::default_instance());
  buyitemcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBuyItemCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBuyItemCommand::default_instance());
  registjaguar_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestRegistJaguarCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestRegistJaguarCommand::default_instance());
  iapcheckcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestIapCheckCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestIapCheckCommand::default_instance());
  tutorialrewardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTutorialRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestTutorialRewardCommand::default_instance());
  rpleaderboardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestRpLeaderboardCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestRpLeaderboardCommand::default_instance());
  ghostrecordcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestGhostRecordCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestGhostRecordCommand::default_instance());
  challengemathinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestChallengeMathInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestChallengeMathInfoCommand::default_instance());
  profileuserdatacommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestProfileUserDataCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestProfileUserDataCommand::default_instance());
  profilenextcarcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestProfileNextCarCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestProfileNextCarCommand::default_instance());
  profilelikecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestProfileLikeCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestProfileLikeCommand::default_instance());
  profilereportcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestProfileReportCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestProfileReportCommand::default_instance());
  profilevscommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestProfileVSCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestProfileVSCommand::default_instance());
  gotchacommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestGotchaCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestGotchaCommand::default_instance());
  cheatinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestCheatInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestCheatInfoCommand::default_instance());
  recorduserraceactioncommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestRecordUserRaceActionCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestRecordUserRaceActionCommand::default_instance());
  systemcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestSystemCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestSystemCommand::default_instance());
  leaderboardclasscommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestLeaderboardClass*>(&::com::ea::eamobile::nfsmw::protoc::RequestLeaderboardClass::default_instance());
  leaderboardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestLeaderboard*>(&::com::ea::eamobile::nfsmw::protoc::RequestLeaderboard::default_instance());
  requesttournamentnum_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestTournamentNum*>(&::com::ea::eamobile::nfsmw::protoc::RequestTournamentNum::default_instance());
  requestquickrace_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestQuickRaceCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestQuickRaceCommand::default_instance());
  bindingtokencommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBindingTokenCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBindingTokenCommand::default_instance());
  bindinginfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestBindingInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestBindingInfoCommand::default_instance());
  collectenergycommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestCollectEnergyCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestCollectEnergyCommand::default_instance());
  energytimecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestEnergyTimeCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestEnergyTimeCommand::default_instance());
  fansrewardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestFansRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestFansRewardCommand::default_instance());
  proppurchasecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestPropPurchaseCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestPropPurchaseCommand::default_instance());
  missionrewardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestMissionRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestMissionRewardCommand::default_instance());
  missionfinishcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestMissionFinishCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestMissionFinishCommand::default_instance());
  lotterycommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestLotteryCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestLotteryCommand::default_instance());
  fleetracecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestFleetRaceCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestFleetRaceCommand::default_instance());
  fleetstartcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestFleetStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestFleetStartCommand::default_instance());
  fleetendcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestFleetEndCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestFleetEndCommand::default_instance());
  fleetdoublecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestFleetDoubleCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestFleetDoubleCommand::default_instance());
  fixcarlimitcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::RequestFixCarLimitCommand*>(&::com::ea::eamobile::nfsmw::protoc::RequestFixCarLimitCommand::default_instance());
}

RequestCommand::RequestCommand(const RequestCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCommand::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  trackcommand_ = NULL;
  logincommand_ = NULL;
  ghostcommand_ = NULL;
  raceresultcommand_ = NULL;
  tournamentdetailcommand_ = NULL;
  tournamentrewarddetailcommand_ = NULL;
  tournamentcommand_ = NULL;
  resourcecommand_ = NULL;
  tournamentsignupcommand_ = NULL;
  racestartcommand_ = NULL;
  bindingstartcommand_ = NULL;
  bindingresultcommand_ = NULL;
  bindingconfirmcommand_ = NULL;
  getrward_ = NULL;
  garagecommand_ = NULL;
  buycarcommand_ = NULL;
  cardatacommand_ = NULL;
  upgradeslotcommand_ = NULL;
  usechartletcommand_ = NULL;
  modifyuserinfocommand_ = NULL;
  storedetailcommand_ = NULL;
  buyitemcommand_ = NULL;
  registjaguar_ = NULL;
  iapcheckcommand_ = NULL;
  tutorialrewardcommand_ = NULL;
  rpleaderboardcommand_ = NULL;
  ghostrecordcommand_ = NULL;
  challengemathinfocommand_ = NULL;
  profileuserdatacommand_ = NULL;
  profilenextcarcommand_ = NULL;
  profilelikecommand_ = NULL;
  profilereportcommand_ = NULL;
  profilevscommand_ = NULL;
  gotchacommand_ = NULL;
  cheatinfocommand_ = NULL;
  recorduserraceactioncommand_ = NULL;
  systemcommand_ = NULL;
  leaderboardclasscommand_ = NULL;
  leaderboardcommand_ = NULL;
  requesttournamentnum_ = NULL;
  requestquickrace_ = NULL;
  bindingtokencommand_ = NULL;
  bindinginfocommand_ = NULL;
  collectenergycommand_ = NULL;
  energytimecommand_ = NULL;
  fansrewardcommand_ = NULL;
  proppurchasecommand_ = NULL;
  missionrewardcommand_ = NULL;
  missionfinishcommand_ = NULL;
  lotterycommand_ = NULL;
  fleetracecommand_ = NULL;
  fleetstartcommand_ = NULL;
  fleetendcommand_ = NULL;
  fleetdoublecommand_ = NULL;
  fixcarlimitcommand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCommand::~RequestCommand() {
  SharedDtor();
}

void RequestCommand::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete trackcommand_;
    delete logincommand_;
    delete ghostcommand_;
    delete raceresultcommand_;
    delete tournamentdetailcommand_;
    delete tournamentrewarddetailcommand_;
    delete tournamentcommand_;
    delete resourcecommand_;
    delete tournamentsignupcommand_;
    delete racestartcommand_;
    delete bindingstartcommand_;
    delete bindingresultcommand_;
    delete bindingconfirmcommand_;
    delete getrward_;
    delete garagecommand_;
    delete buycarcommand_;
    delete cardatacommand_;
    delete upgradeslotcommand_;
    delete usechartletcommand_;
    delete modifyuserinfocommand_;
    delete storedetailcommand_;
    delete buyitemcommand_;
    delete registjaguar_;
    delete iapcheckcommand_;
    delete tutorialrewardcommand_;
    delete rpleaderboardcommand_;
    delete ghostrecordcommand_;
    delete challengemathinfocommand_;
    delete profileuserdatacommand_;
    delete profilenextcarcommand_;
    delete profilelikecommand_;
    delete profilereportcommand_;
    delete profilevscommand_;
    delete gotchacommand_;
    delete cheatinfocommand_;
    delete recorduserraceactioncommand_;
    delete systemcommand_;
    delete leaderboardclasscommand_;
    delete leaderboardcommand_;
    delete requesttournamentnum_;
    delete requestquickrace_;
    delete bindingtokencommand_;
    delete bindinginfocommand_;
    delete collectenergycommand_;
    delete energytimecommand_;
    delete fansrewardcommand_;
    delete proppurchasecommand_;
    delete missionrewardcommand_;
    delete missionfinishcommand_;
    delete lotterycommand_;
    delete fleetracecommand_;
    delete fleetstartcommand_;
    delete fleetendcommand_;
    delete fleetdoublecommand_;
    delete fixcarlimitcommand_;
  }
}

void RequestCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCommand_descriptor_;
}

const RequestCommand& RequestCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

RequestCommand* RequestCommand::default_instance_ = NULL;

RequestCommand* RequestCommand::New() const {
  return new RequestCommand;
}

void RequestCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::com::ea::eamobile::nfsmw::protoc::HeadInfo::Clear();
    }
    if (has_trackcommand()) {
      if (trackcommand_ != NULL) trackcommand_->::com::ea::eamobile::nfsmw::protoc::RequestTrackCommand::Clear();
    }
    if (has_logincommand()) {
      if (logincommand_ != NULL) logincommand_->::com::ea::eamobile::nfsmw::protoc::RequestUserInfoCommand::Clear();
    }
    if (has_ghostcommand()) {
      if (ghostcommand_ != NULL) ghostcommand_->::com::ea::eamobile::nfsmw::protoc::RequestModeInfoCommand::Clear();
    }
    if (has_raceresultcommand()) {
      if (raceresultcommand_ != NULL) raceresultcommand_->::com::ea::eamobile::nfsmw::protoc::RequestRaceResultCommand::Clear();
    }
    if (has_tournamentdetailcommand()) {
      if (tournamentdetailcommand_ != NULL) tournamentdetailcommand_->::com::ea::eamobile::nfsmw::protoc::RequestTournamentDetailCommand::Clear();
    }
    if (has_tournamentrewarddetailcommand()) {
      if (tournamentrewarddetailcommand_ != NULL) tournamentrewarddetailcommand_->::com::ea::eamobile::nfsmw::protoc::RequestTournamentRewardDetailCommand::Clear();
    }
    if (has_tournamentcommand()) {
      if (tournamentcommand_ != NULL) tournamentcommand_->::com::ea::eamobile::nfsmw::protoc::RequestTournamentCommand::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_resourcecommand()) {
      if (resourcecommand_ != NULL) resourcecommand_->::com::ea::eamobile::nfsmw::protoc::RequestResourceCommand::Clear();
    }
    if (has_tournamentsignupcommand()) {
      if (tournamentsignupcommand_ != NULL) tournamentsignupcommand_->::com::ea::eamobile::nfsmw::protoc::RequestTournamentSignUpCommand::Clear();
    }
    if (has_racestartcommand()) {
      if (racestartcommand_ != NULL) racestartcommand_->::com::ea::eamobile::nfsmw::protoc::RequestRaceStartCommand::Clear();
    }
    if (has_bindingstartcommand()) {
      if (bindingstartcommand_ != NULL) bindingstartcommand_->::com::ea::eamobile::nfsmw::protoc::RequestBindingStartCommand::Clear();
    }
    if (has_bindingresultcommand()) {
      if (bindingresultcommand_ != NULL) bindingresultcommand_->::com::ea::eamobile::nfsmw::protoc::RequestBindingResultCommand::Clear();
    }
    if (has_bindingconfirmcommand()) {
      if (bindingconfirmcommand_ != NULL) bindingconfirmcommand_->::com::ea::eamobile::nfsmw::protoc::RequestBindingConfirmCommand::Clear();
    }
    if (has_getrward()) {
      if (getrward_ != NULL) getrward_->::com::ea::eamobile::nfsmw::protoc::RequestGetRewardCommand::Clear();
    }
    if (has_garagecommand()) {
      if (garagecommand_ != NULL) garagecommand_->::com::ea::eamobile::nfsmw::protoc::RequestGarageCommand::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_buycarcommand()) {
      if (buycarcommand_ != NULL) buycarcommand_->::com::ea::eamobile::nfsmw::protoc::RequestBuyCarCommand::Clear();
    }
    if (has_cardatacommand()) {
      if (cardatacommand_ != NULL) cardatacommand_->::com::ea::eamobile::nfsmw::protoc::RequestCarDataCommand::Clear();
    }
    if (has_upgradeslotcommand()) {
      if (upgradeslotcommand_ != NULL) upgradeslotcommand_->::com::ea::eamobile::nfsmw::protoc::RequestUpgradeSlotCommand::Clear();
    }
    if (has_usechartletcommand()) {
      if (usechartletcommand_ != NULL) usechartletcommand_->::com::ea::eamobile::nfsmw::protoc::RequestUseChartletCommand::Clear();
    }
    if (has_modifyuserinfocommand()) {
      if (modifyuserinfocommand_ != NULL) modifyuserinfocommand_->::com::ea::eamobile::nfsmw::protoc::RequestModifyUserInfoCommand::Clear();
    }
    if (has_storedetailcommand()) {
      if (storedetailcommand_ != NULL) storedetailcommand_->::com::ea::eamobile::nfsmw::protoc::RequestStoreDetailCommand::Clear();
    }
    if (has_buyitemcommand()) {
      if (buyitemcommand_ != NULL) buyitemcommand_->::com::ea::eamobile::nfsmw::protoc::RequestBuyItemCommand::Clear();
    }
    if (has_registjaguar()) {
      if (registjaguar_ != NULL) registjaguar_->::com::ea::eamobile::nfsmw::protoc::RequestRegistJaguarCommand::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_iapcheckcommand()) {
      if (iapcheckcommand_ != NULL) iapcheckcommand_->::com::ea::eamobile::nfsmw::protoc::RequestIapCheckCommand::Clear();
    }
    if (has_tutorialrewardcommand()) {
      if (tutorialrewardcommand_ != NULL) tutorialrewardcommand_->::com::ea::eamobile::nfsmw::protoc::RequestTutorialRewardCommand::Clear();
    }
    if (has_rpleaderboardcommand()) {
      if (rpleaderboardcommand_ != NULL) rpleaderboardcommand_->::com::ea::eamobile::nfsmw::protoc::RequestRpLeaderboardCommand::Clear();
    }
    if (has_ghostrecordcommand()) {
      if (ghostrecordcommand_ != NULL) ghostrecordcommand_->::com::ea::eamobile::nfsmw::protoc::RequestGhostRecordCommand::Clear();
    }
    if (has_challengemathinfocommand()) {
      if (challengemathinfocommand_ != NULL) challengemathinfocommand_->::com::ea::eamobile::nfsmw::protoc::RequestChallengeMathInfoCommand::Clear();
    }
    if (has_profileuserdatacommand()) {
      if (profileuserdatacommand_ != NULL) profileuserdatacommand_->::com::ea::eamobile::nfsmw::protoc::RequestProfileUserDataCommand::Clear();
    }
    if (has_profilenextcarcommand()) {
      if (profilenextcarcommand_ != NULL) profilenextcarcommand_->::com::ea::eamobile::nfsmw::protoc::RequestProfileNextCarCommand::Clear();
    }
    if (has_profilelikecommand()) {
      if (profilelikecommand_ != NULL) profilelikecommand_->::com::ea::eamobile::nfsmw::protoc::RequestProfileLikeCommand::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_profilereportcommand()) {
      if (profilereportcommand_ != NULL) profilereportcommand_->::com::ea::eamobile::nfsmw::protoc::RequestProfileReportCommand::Clear();
    }
    if (has_profilevscommand()) {
      if (profilevscommand_ != NULL) profilevscommand_->::com::ea::eamobile::nfsmw::protoc::RequestProfileVSCommand::Clear();
    }
    if (has_gotchacommand()) {
      if (gotchacommand_ != NULL) gotchacommand_->::com::ea::eamobile::nfsmw::protoc::RequestGotchaCommand::Clear();
    }
    if (has_cheatinfocommand()) {
      if (cheatinfocommand_ != NULL) cheatinfocommand_->::com::ea::eamobile::nfsmw::protoc::RequestCheatInfoCommand::Clear();
    }
    if (has_recorduserraceactioncommand()) {
      if (recorduserraceactioncommand_ != NULL) recorduserraceactioncommand_->::com::ea::eamobile::nfsmw::protoc::RequestRecordUserRaceActionCommand::Clear();
    }
    if (has_systemcommand()) {
      if (systemcommand_ != NULL) systemcommand_->::com::ea::eamobile::nfsmw::protoc::RequestSystemCommand::Clear();
    }
    if (has_leaderboardclasscommand()) {
      if (leaderboardclasscommand_ != NULL) leaderboardclasscommand_->::com::ea::eamobile::nfsmw::protoc::RequestLeaderboardClass::Clear();
    }
    if (has_leaderboardcommand()) {
      if (leaderboardcommand_ != NULL) leaderboardcommand_->::com::ea::eamobile::nfsmw::protoc::RequestLeaderboard::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_requesttournamentnum()) {
      if (requesttournamentnum_ != NULL) requesttournamentnum_->::com::ea::eamobile::nfsmw::protoc::RequestTournamentNum::Clear();
    }
    if (has_requestquickrace()) {
      if (requestquickrace_ != NULL) requestquickrace_->::com::ea::eamobile::nfsmw::protoc::RequestQuickRaceCommand::Clear();
    }
    if (has_bindingtokencommand()) {
      if (bindingtokencommand_ != NULL) bindingtokencommand_->::com::ea::eamobile::nfsmw::protoc::RequestBindingTokenCommand::Clear();
    }
    if (has_bindinginfocommand()) {
      if (bindinginfocommand_ != NULL) bindinginfocommand_->::com::ea::eamobile::nfsmw::protoc::RequestBindingInfoCommand::Clear();
    }
    if (has_collectenergycommand()) {
      if (collectenergycommand_ != NULL) collectenergycommand_->::com::ea::eamobile::nfsmw::protoc::RequestCollectEnergyCommand::Clear();
    }
    if (has_energytimecommand()) {
      if (energytimecommand_ != NULL) energytimecommand_->::com::ea::eamobile::nfsmw::protoc::RequestEnergyTimeCommand::Clear();
    }
    if (has_fansrewardcommand()) {
      if (fansrewardcommand_ != NULL) fansrewardcommand_->::com::ea::eamobile::nfsmw::protoc::RequestFansRewardCommand::Clear();
    }
    if (has_proppurchasecommand()) {
      if (proppurchasecommand_ != NULL) proppurchasecommand_->::com::ea::eamobile::nfsmw::protoc::RequestPropPurchaseCommand::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_missionrewardcommand()) {
      if (missionrewardcommand_ != NULL) missionrewardcommand_->::com::ea::eamobile::nfsmw::protoc::RequestMissionRewardCommand::Clear();
    }
    if (has_missionfinishcommand()) {
      if (missionfinishcommand_ != NULL) missionfinishcommand_->::com::ea::eamobile::nfsmw::protoc::RequestMissionFinishCommand::Clear();
    }
    if (has_lotterycommand()) {
      if (lotterycommand_ != NULL) lotterycommand_->::com::ea::eamobile::nfsmw::protoc::RequestLotteryCommand::Clear();
    }
    if (has_fleetracecommand()) {
      if (fleetracecommand_ != NULL) fleetracecommand_->::com::ea::eamobile::nfsmw::protoc::RequestFleetRaceCommand::Clear();
    }
    if (has_fleetstartcommand()) {
      if (fleetstartcommand_ != NULL) fleetstartcommand_->::com::ea::eamobile::nfsmw::protoc::RequestFleetStartCommand::Clear();
    }
    if (has_fleetendcommand()) {
      if (fleetendcommand_ != NULL) fleetendcommand_->::com::ea::eamobile::nfsmw::protoc::RequestFleetEndCommand::Clear();
    }
    if (has_fleetdoublecommand()) {
      if (fleetdoublecommand_ != NULL) fleetdoublecommand_->::com::ea::eamobile::nfsmw::protoc::RequestFleetDoubleCommand::Clear();
    }
    if (has_fixcarlimitcommand()) {
      if (fixcarlimitcommand_ != NULL) fixcarlimitcommand_->::com::ea::eamobile::nfsmw::protoc::RequestFixCarLimitCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trackCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTrackCommand trackCommand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trackcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_loginCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestUserInfoCommand loginCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logincommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ghostCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestModeInfoCommand ghostCommand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghostCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghostcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_raceResultCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceResultCommand raceResultCommand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceResultCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raceresultcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tournamentDetailCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentDetailCommand tournamentDetailCommand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentDetailCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentdetailcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tournamentRewardDetailCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentRewardDetailCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentrewarddetailcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tournamentCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentCommand tournamentCommand = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_resourceCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestResourceCommand resourceCommand = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourcecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_tournamentSignUpCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentSignUpCommand tournamentSignUpCommand = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentSignUpCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentsignupcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_raceStartCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceStartCommand raceStartCommand = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceStartCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_racestartcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bindingStartCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingStartCommand bindingStartCommand = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingStartCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingstartcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bindingResultCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingResultCommand bindingResultCommand = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingResultCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingresultcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_bindingConfirmCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingConfirmCommand bindingConfirmCommand = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingConfirmCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingconfirmcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_getRward;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestGetRewardCommand getRward = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getRward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getrward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_garageCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestGarageCommand garageCommand = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_garageCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_garagecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_buyCarCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyCarCommand buyCarCommand = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyCarCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buycarcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_carDataCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestCarDataCommand carDataCommand = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carDataCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardatacommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_upgradeSlotCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestUpgradeSlotCommand upgradeSlotCommand = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgradeSlotCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgradeslotcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_useChartletCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestUseChartletCommand useChartletCommand = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useChartletCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usechartletcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_modifyUserInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestModifyUserInfoCommand modifyUserInfoCommand = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modifyUserInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modifyuserinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_storeDetailCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestStoreDetailCommand storeDetailCommand = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storeDetailCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storedetailcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_buyItemCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyItemCommand buyItemCommand = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyItemCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyitemcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_registJaguar;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestRegistJaguarCommand registJaguar = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registJaguar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registjaguar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_IapCheckCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestIapCheckCommand IapCheckCommand = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IapCheckCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iapcheckcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_tutorialRewardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTutorialRewardCommand tutorialRewardCommand = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tutorialRewardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tutorialrewardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_rpLeaderboardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestRpLeaderboardCommand rpLeaderboardCommand = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpLeaderboardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpleaderboardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_ghostRecordCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestGhostRecordCommand ghostRecordCommand = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghostRecordCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghostrecordcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_challengeMathInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestChallengeMathInfoCommand challengeMathInfoCommand = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengeMathInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengemathinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_profileUserDataCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileUserDataCommand profileUserDataCommand = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileUserDataCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profileuserdatacommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_profileNextCarCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileNextCarCommand profileNextCarCommand = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileNextCarCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilenextcarcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_profileLikeCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileLikeCommand profileLikeCommand = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileLikeCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilelikecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_profileReportCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileReportCommand profileReportCommand = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileReportCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilereportcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_profileVSCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileVSCommand profileVSCommand = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileVSCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilevscommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_gotchaCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestGotchaCommand gotchaCommand = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gotchaCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gotchacommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_cheatInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestCheatInfoCommand cheatInfoCommand = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cheatInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cheatinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_recordUserRaceActionCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestRecordUserRaceActionCommand recordUserRaceActionCommand = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recordUserRaceActionCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recorduserraceactioncommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_systemCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand systemCommand = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_systemCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_leaderboardClassCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboardClass leaderboardClassCommand = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboardClassCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboardclasscommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_leaderboardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboard leaderboardCommand = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_requestTournamentNum;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentNum requestTournamentNum = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestTournamentNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requesttournamentnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_requestQuickRace;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestQuickRaceCommand requestQuickRace = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestQuickRace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requestquickrace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_bindingTokenCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingTokenCommand bindingTokenCommand = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingTokenCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingtokencommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_bindingInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingInfoCommand bindingInfoCommand = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindinginfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_collectEnergyCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestCollectEnergyCommand collectEnergyCommand = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collectEnergyCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collectenergycommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_energyTimeCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestEnergyTimeCommand energyTimeCommand = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_energyTimeCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energytimecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_fansRewardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestFansRewardCommand fansRewardCommand = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fansRewardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fansrewardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_propPurchaseCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestPropPurchaseCommand propPurchaseCommand = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propPurchaseCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proppurchasecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_missionRewardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionRewardCommand missionRewardCommand = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionRewardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionrewardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_missionFinishCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionFinishCommand missionFinishCommand = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionFinishCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionfinishcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_lotteryCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestLotteryCommand lotteryCommand = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lotteryCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterycommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_fleetRaceCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetRaceCommand fleetRaceCommand = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetRaceCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetracecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_fleetStartCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetStartCommand fleetStartCommand = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetStartCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetstartcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_fleetEndCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetEndCommand fleetEndCommand = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetEndCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetendcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_fleetDoubleCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetDoubleCommand fleetDoubleCommand = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetDoubleCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetdoublecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_fixCarLimitCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.RequestFixCarLimitCommand fixCarLimitCommand = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixCarLimitCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixcarlimitcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTrackCommand trackCommand = 2;
  if (has_trackcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trackcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestUserInfoCommand loginCommand = 3;
  if (has_logincommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logincommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestModeInfoCommand ghostCommand = 4;
  if (has_ghostcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ghostcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceResultCommand raceResultCommand = 5;
  if (has_raceresultcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->raceresultcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentDetailCommand tournamentDetailCommand = 6;
  if (has_tournamentdetailcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tournamentdetailcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
  if (has_tournamentrewarddetailcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tournamentrewarddetailcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentCommand tournamentCommand = 9;
  if (has_tournamentcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tournamentcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestResourceCommand resourceCommand = 10;
  if (has_resourcecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resourcecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentSignUpCommand tournamentSignUpCommand = 16;
  if (has_tournamentsignupcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tournamentsignupcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceStartCommand raceStartCommand = 18;
  if (has_racestartcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->racestartcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingStartCommand bindingStartCommand = 19;
  if (has_bindingstartcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->bindingstartcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingResultCommand bindingResultCommand = 20;
  if (has_bindingresultcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bindingresultcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingConfirmCommand bindingConfirmCommand = 21;
  if (has_bindingconfirmcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->bindingconfirmcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGetRewardCommand getRward = 22;
  if (has_getrward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->getrward(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGarageCommand garageCommand = 23;
  if (has_garagecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->garagecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyCarCommand buyCarCommand = 24;
  if (has_buycarcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->buycarcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestCarDataCommand carDataCommand = 25;
  if (has_cardatacommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->cardatacommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestUpgradeSlotCommand upgradeSlotCommand = 26;
  if (has_upgradeslotcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->upgradeslotcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestUseChartletCommand useChartletCommand = 27;
  if (has_usechartletcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->usechartletcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestModifyUserInfoCommand modifyUserInfoCommand = 28;
  if (has_modifyuserinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->modifyuserinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestStoreDetailCommand storeDetailCommand = 29;
  if (has_storedetailcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->storedetailcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyItemCommand buyItemCommand = 30;
  if (has_buyitemcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->buyitemcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRegistJaguarCommand registJaguar = 31;
  if (has_registjaguar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->registjaguar(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestIapCheckCommand IapCheckCommand = 32;
  if (has_iapcheckcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->iapcheckcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTutorialRewardCommand tutorialRewardCommand = 33;
  if (has_tutorialrewardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->tutorialrewardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRpLeaderboardCommand rpLeaderboardCommand = 34;
  if (has_rpleaderboardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->rpleaderboardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGhostRecordCommand ghostRecordCommand = 35;
  if (has_ghostrecordcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->ghostrecordcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestChallengeMathInfoCommand challengeMathInfoCommand = 36;
  if (has_challengemathinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->challengemathinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileUserDataCommand profileUserDataCommand = 37;
  if (has_profileuserdatacommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->profileuserdatacommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileNextCarCommand profileNextCarCommand = 38;
  if (has_profilenextcarcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->profilenextcarcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileLikeCommand profileLikeCommand = 39;
  if (has_profilelikecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->profilelikecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileReportCommand profileReportCommand = 40;
  if (has_profilereportcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->profilereportcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileVSCommand profileVSCommand = 41;
  if (has_profilevscommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->profilevscommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGotchaCommand gotchaCommand = 42;
  if (has_gotchacommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->gotchacommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestCheatInfoCommand cheatInfoCommand = 43;
  if (has_cheatinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->cheatinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRecordUserRaceActionCommand recordUserRaceActionCommand = 44;
  if (has_recorduserraceactioncommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->recorduserraceactioncommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand systemCommand = 45;
  if (has_systemcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->systemcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboardClass leaderboardClassCommand = 46;
  if (has_leaderboardclasscommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->leaderboardclasscommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboard leaderboardCommand = 47;
  if (has_leaderboardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->leaderboardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentNum requestTournamentNum = 48;
  if (has_requesttournamentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->requesttournamentnum(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestQuickRaceCommand requestQuickRace = 49;
  if (has_requestquickrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->requestquickrace(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingTokenCommand bindingTokenCommand = 50;
  if (has_bindingtokencommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->bindingtokencommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingInfoCommand bindingInfoCommand = 51;
  if (has_bindinginfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->bindinginfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestCollectEnergyCommand collectEnergyCommand = 52;
  if (has_collectenergycommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->collectenergycommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestEnergyTimeCommand energyTimeCommand = 53;
  if (has_energytimecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->energytimecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFansRewardCommand fansRewardCommand = 54;
  if (has_fansrewardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->fansrewardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestPropPurchaseCommand propPurchaseCommand = 55;
  if (has_proppurchasecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->proppurchasecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionRewardCommand missionRewardCommand = 56;
  if (has_missionrewardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->missionrewardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionFinishCommand missionFinishCommand = 57;
  if (has_missionfinishcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->missionfinishcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestLotteryCommand lotteryCommand = 58;
  if (has_lotterycommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->lotterycommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetRaceCommand fleetRaceCommand = 59;
  if (has_fleetracecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->fleetracecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetStartCommand fleetStartCommand = 60;
  if (has_fleetstartcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->fleetstartcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetEndCommand fleetEndCommand = 61;
  if (has_fleetendcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->fleetendcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetDoubleCommand fleetDoubleCommand = 62;
  if (has_fleetdoublecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->fleetdoublecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFixCarLimitCommand fixCarLimitCommand = 63;
  if (has_fixcarlimitcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->fixcarlimitcommand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTrackCommand trackCommand = 2;
  if (has_trackcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trackcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestUserInfoCommand loginCommand = 3;
  if (has_logincommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logincommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestModeInfoCommand ghostCommand = 4;
  if (has_ghostcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ghostcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceResultCommand raceResultCommand = 5;
  if (has_raceresultcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->raceresultcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentDetailCommand tournamentDetailCommand = 6;
  if (has_tournamentdetailcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tournamentdetailcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
  if (has_tournamentrewarddetailcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tournamentrewarddetailcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentCommand tournamentCommand = 9;
  if (has_tournamentcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tournamentcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestResourceCommand resourceCommand = 10;
  if (has_resourcecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resourcecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentSignUpCommand tournamentSignUpCommand = 16;
  if (has_tournamentsignupcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tournamentsignupcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceStartCommand raceStartCommand = 18;
  if (has_racestartcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->racestartcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingStartCommand bindingStartCommand = 19;
  if (has_bindingstartcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->bindingstartcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingResultCommand bindingResultCommand = 20;
  if (has_bindingresultcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bindingresultcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingConfirmCommand bindingConfirmCommand = 21;
  if (has_bindingconfirmcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->bindingconfirmcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGetRewardCommand getRward = 22;
  if (has_getrward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->getrward(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGarageCommand garageCommand = 23;
  if (has_garagecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->garagecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyCarCommand buyCarCommand = 24;
  if (has_buycarcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->buycarcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestCarDataCommand carDataCommand = 25;
  if (has_cardatacommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->cardatacommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestUpgradeSlotCommand upgradeSlotCommand = 26;
  if (has_upgradeslotcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->upgradeslotcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestUseChartletCommand useChartletCommand = 27;
  if (has_usechartletcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->usechartletcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestModifyUserInfoCommand modifyUserInfoCommand = 28;
  if (has_modifyuserinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->modifyuserinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestStoreDetailCommand storeDetailCommand = 29;
  if (has_storedetailcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->storedetailcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyItemCommand buyItemCommand = 30;
  if (has_buyitemcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->buyitemcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRegistJaguarCommand registJaguar = 31;
  if (has_registjaguar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->registjaguar(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestIapCheckCommand IapCheckCommand = 32;
  if (has_iapcheckcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->iapcheckcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTutorialRewardCommand tutorialRewardCommand = 33;
  if (has_tutorialrewardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->tutorialrewardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRpLeaderboardCommand rpLeaderboardCommand = 34;
  if (has_rpleaderboardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->rpleaderboardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGhostRecordCommand ghostRecordCommand = 35;
  if (has_ghostrecordcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->ghostrecordcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestChallengeMathInfoCommand challengeMathInfoCommand = 36;
  if (has_challengemathinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->challengemathinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileUserDataCommand profileUserDataCommand = 37;
  if (has_profileuserdatacommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->profileuserdatacommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileNextCarCommand profileNextCarCommand = 38;
  if (has_profilenextcarcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->profilenextcarcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileLikeCommand profileLikeCommand = 39;
  if (has_profilelikecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->profilelikecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileReportCommand profileReportCommand = 40;
  if (has_profilereportcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->profilereportcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileVSCommand profileVSCommand = 41;
  if (has_profilevscommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->profilevscommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestGotchaCommand gotchaCommand = 42;
  if (has_gotchacommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->gotchacommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestCheatInfoCommand cheatInfoCommand = 43;
  if (has_cheatinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->cheatinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestRecordUserRaceActionCommand recordUserRaceActionCommand = 44;
  if (has_recorduserraceactioncommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->recorduserraceactioncommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand systemCommand = 45;
  if (has_systemcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->systemcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboardClass leaderboardClassCommand = 46;
  if (has_leaderboardclasscommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->leaderboardclasscommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboard leaderboardCommand = 47;
  if (has_leaderboardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->leaderboardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentNum requestTournamentNum = 48;
  if (has_requesttournamentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->requesttournamentnum(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestQuickRaceCommand requestQuickRace = 49;
  if (has_requestquickrace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->requestquickrace(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingTokenCommand bindingTokenCommand = 50;
  if (has_bindingtokencommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->bindingtokencommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingInfoCommand bindingInfoCommand = 51;
  if (has_bindinginfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->bindinginfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestCollectEnergyCommand collectEnergyCommand = 52;
  if (has_collectenergycommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->collectenergycommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestEnergyTimeCommand energyTimeCommand = 53;
  if (has_energytimecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->energytimecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFansRewardCommand fansRewardCommand = 54;
  if (has_fansrewardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->fansrewardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestPropPurchaseCommand propPurchaseCommand = 55;
  if (has_proppurchasecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->proppurchasecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionRewardCommand missionRewardCommand = 56;
  if (has_missionrewardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->missionrewardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionFinishCommand missionFinishCommand = 57;
  if (has_missionfinishcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->missionfinishcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestLotteryCommand lotteryCommand = 58;
  if (has_lotterycommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->lotterycommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetRaceCommand fleetRaceCommand = 59;
  if (has_fleetracecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->fleetracecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetStartCommand fleetStartCommand = 60;
  if (has_fleetstartcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->fleetstartcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetEndCommand fleetEndCommand = 61;
  if (has_fleetendcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->fleetendcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetDoubleCommand fleetDoubleCommand = 62;
  if (has_fleetdoublecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->fleetdoublecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.RequestFixCarLimitCommand fixCarLimitCommand = 63;
  if (has_fixcarlimitcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->fixcarlimitcommand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTrackCommand trackCommand = 2;
    if (has_trackcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trackcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestUserInfoCommand loginCommand = 3;
    if (has_logincommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logincommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestModeInfoCommand ghostCommand = 4;
    if (has_ghostcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghostcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceResultCommand raceResultCommand = 5;
    if (has_raceresultcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raceresultcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentDetailCommand tournamentDetailCommand = 6;
    if (has_tournamentdetailcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentdetailcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
    if (has_tournamentrewarddetailcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentrewarddetailcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentCommand tournamentCommand = 9;
    if (has_tournamentcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentcommand());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RequestResourceCommand resourceCommand = 10;
    if (has_resourcecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourcecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentSignUpCommand tournamentSignUpCommand = 16;
    if (has_tournamentsignupcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentsignupcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestRaceStartCommand raceStartCommand = 18;
    if (has_racestartcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->racestartcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingStartCommand bindingStartCommand = 19;
    if (has_bindingstartcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingstartcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingResultCommand bindingResultCommand = 20;
    if (has_bindingresultcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingresultcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingConfirmCommand bindingConfirmCommand = 21;
    if (has_bindingconfirmcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingconfirmcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestGetRewardCommand getRward = 22;
    if (has_getrward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getrward());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestGarageCommand garageCommand = 23;
    if (has_garagecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->garagecommand());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyCarCommand buyCarCommand = 24;
    if (has_buycarcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buycarcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestCarDataCommand carDataCommand = 25;
    if (has_cardatacommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardatacommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestUpgradeSlotCommand upgradeSlotCommand = 26;
    if (has_upgradeslotcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgradeslotcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestUseChartletCommand useChartletCommand = 27;
    if (has_usechartletcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usechartletcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestModifyUserInfoCommand modifyUserInfoCommand = 28;
    if (has_modifyuserinfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modifyuserinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestStoreDetailCommand storeDetailCommand = 29;
    if (has_storedetailcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storedetailcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBuyItemCommand buyItemCommand = 30;
    if (has_buyitemcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyitemcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestRegistJaguarCommand registJaguar = 31;
    if (has_registjaguar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registjaguar());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RequestIapCheckCommand IapCheckCommand = 32;
    if (has_iapcheckcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iapcheckcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTutorialRewardCommand tutorialRewardCommand = 33;
    if (has_tutorialrewardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tutorialrewardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestRpLeaderboardCommand rpLeaderboardCommand = 34;
    if (has_rpleaderboardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpleaderboardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestGhostRecordCommand ghostRecordCommand = 35;
    if (has_ghostrecordcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghostrecordcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestChallengeMathInfoCommand challengeMathInfoCommand = 36;
    if (has_challengemathinfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengemathinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileUserDataCommand profileUserDataCommand = 37;
    if (has_profileuserdatacommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profileuserdatacommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileNextCarCommand profileNextCarCommand = 38;
    if (has_profilenextcarcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilenextcarcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileLikeCommand profileLikeCommand = 39;
    if (has_profilelikecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilelikecommand());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileReportCommand profileReportCommand = 40;
    if (has_profilereportcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilereportcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestProfileVSCommand profileVSCommand = 41;
    if (has_profilevscommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilevscommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestGotchaCommand gotchaCommand = 42;
    if (has_gotchacommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gotchacommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestCheatInfoCommand cheatInfoCommand = 43;
    if (has_cheatinfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cheatinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestRecordUserRaceActionCommand recordUserRaceActionCommand = 44;
    if (has_recorduserraceactioncommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recorduserraceactioncommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestSystemCommand systemCommand = 45;
    if (has_systemcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboardClass leaderboardClassCommand = 46;
    if (has_leaderboardclasscommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderboardclasscommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestLeaderboard leaderboardCommand = 47;
    if (has_leaderboardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderboardcommand());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RequestTournamentNum requestTournamentNum = 48;
    if (has_requesttournamentnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requesttournamentnum());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestQuickRaceCommand requestQuickRace = 49;
    if (has_requestquickrace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requestquickrace());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingTokenCommand bindingTokenCommand = 50;
    if (has_bindingtokencommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingtokencommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestBindingInfoCommand bindingInfoCommand = 51;
    if (has_bindinginfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindinginfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestCollectEnergyCommand collectEnergyCommand = 52;
    if (has_collectenergycommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collectenergycommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestEnergyTimeCommand energyTimeCommand = 53;
    if (has_energytimecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energytimecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestFansRewardCommand fansRewardCommand = 54;
    if (has_fansrewardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fansrewardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestPropPurchaseCommand propPurchaseCommand = 55;
    if (has_proppurchasecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proppurchasecommand());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionRewardCommand missionRewardCommand = 56;
    if (has_missionrewardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionrewardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestMissionFinishCommand missionFinishCommand = 57;
    if (has_missionfinishcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionfinishcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestLotteryCommand lotteryCommand = 58;
    if (has_lotterycommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterycommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetRaceCommand fleetRaceCommand = 59;
    if (has_fleetracecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetracecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetStartCommand fleetStartCommand = 60;
    if (has_fleetstartcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetstartcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetEndCommand fleetEndCommand = 61;
    if (has_fleetendcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetendcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestFleetDoubleCommand fleetDoubleCommand = 62;
    if (has_fleetdoublecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetdoublecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.RequestFixCarLimitCommand fixCarLimitCommand = 63;
    if (has_fixcarlimitcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixcarlimitcommand());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCommand::MergeFrom(const RequestCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::com::ea::eamobile::nfsmw::protoc::HeadInfo::MergeFrom(from.head());
    }
    if (from.has_trackcommand()) {
      mutable_trackcommand()->::com::ea::eamobile::nfsmw::protoc::RequestTrackCommand::MergeFrom(from.trackcommand());
    }
    if (from.has_logincommand()) {
      mutable_logincommand()->::com::ea::eamobile::nfsmw::protoc::RequestUserInfoCommand::MergeFrom(from.logincommand());
    }
    if (from.has_ghostcommand()) {
      mutable_ghostcommand()->::com::ea::eamobile::nfsmw::protoc::RequestModeInfoCommand::MergeFrom(from.ghostcommand());
    }
    if (from.has_raceresultcommand()) {
      mutable_raceresultcommand()->::com::ea::eamobile::nfsmw::protoc::RequestRaceResultCommand::MergeFrom(from.raceresultcommand());
    }
    if (from.has_tournamentdetailcommand()) {
      mutable_tournamentdetailcommand()->::com::ea::eamobile::nfsmw::protoc::RequestTournamentDetailCommand::MergeFrom(from.tournamentdetailcommand());
    }
    if (from.has_tournamentrewarddetailcommand()) {
      mutable_tournamentrewarddetailcommand()->::com::ea::eamobile::nfsmw::protoc::RequestTournamentRewardDetailCommand::MergeFrom(from.tournamentrewarddetailcommand());
    }
    if (from.has_tournamentcommand()) {
      mutable_tournamentcommand()->::com::ea::eamobile::nfsmw::protoc::RequestTournamentCommand::MergeFrom(from.tournamentcommand());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resourcecommand()) {
      mutable_resourcecommand()->::com::ea::eamobile::nfsmw::protoc::RequestResourceCommand::MergeFrom(from.resourcecommand());
    }
    if (from.has_tournamentsignupcommand()) {
      mutable_tournamentsignupcommand()->::com::ea::eamobile::nfsmw::protoc::RequestTournamentSignUpCommand::MergeFrom(from.tournamentsignupcommand());
    }
    if (from.has_racestartcommand()) {
      mutable_racestartcommand()->::com::ea::eamobile::nfsmw::protoc::RequestRaceStartCommand::MergeFrom(from.racestartcommand());
    }
    if (from.has_bindingstartcommand()) {
      mutable_bindingstartcommand()->::com::ea::eamobile::nfsmw::protoc::RequestBindingStartCommand::MergeFrom(from.bindingstartcommand());
    }
    if (from.has_bindingresultcommand()) {
      mutable_bindingresultcommand()->::com::ea::eamobile::nfsmw::protoc::RequestBindingResultCommand::MergeFrom(from.bindingresultcommand());
    }
    if (from.has_bindingconfirmcommand()) {
      mutable_bindingconfirmcommand()->::com::ea::eamobile::nfsmw::protoc::RequestBindingConfirmCommand::MergeFrom(from.bindingconfirmcommand());
    }
    if (from.has_getrward()) {
      mutable_getrward()->::com::ea::eamobile::nfsmw::protoc::RequestGetRewardCommand::MergeFrom(from.getrward());
    }
    if (from.has_garagecommand()) {
      mutable_garagecommand()->::com::ea::eamobile::nfsmw::protoc::RequestGarageCommand::MergeFrom(from.garagecommand());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_buycarcommand()) {
      mutable_buycarcommand()->::com::ea::eamobile::nfsmw::protoc::RequestBuyCarCommand::MergeFrom(from.buycarcommand());
    }
    if (from.has_cardatacommand()) {
      mutable_cardatacommand()->::com::ea::eamobile::nfsmw::protoc::RequestCarDataCommand::MergeFrom(from.cardatacommand());
    }
    if (from.has_upgradeslotcommand()) {
      mutable_upgradeslotcommand()->::com::ea::eamobile::nfsmw::protoc::RequestUpgradeSlotCommand::MergeFrom(from.upgradeslotcommand());
    }
    if (from.has_usechartletcommand()) {
      mutable_usechartletcommand()->::com::ea::eamobile::nfsmw::protoc::RequestUseChartletCommand::MergeFrom(from.usechartletcommand());
    }
    if (from.has_modifyuserinfocommand()) {
      mutable_modifyuserinfocommand()->::com::ea::eamobile::nfsmw::protoc::RequestModifyUserInfoCommand::MergeFrom(from.modifyuserinfocommand());
    }
    if (from.has_storedetailcommand()) {
      mutable_storedetailcommand()->::com::ea::eamobile::nfsmw::protoc::RequestStoreDetailCommand::MergeFrom(from.storedetailcommand());
    }
    if (from.has_buyitemcommand()) {
      mutable_buyitemcommand()->::com::ea::eamobile::nfsmw::protoc::RequestBuyItemCommand::MergeFrom(from.buyitemcommand());
    }
    if (from.has_registjaguar()) {
      mutable_registjaguar()->::com::ea::eamobile::nfsmw::protoc::RequestRegistJaguarCommand::MergeFrom(from.registjaguar());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_iapcheckcommand()) {
      mutable_iapcheckcommand()->::com::ea::eamobile::nfsmw::protoc::RequestIapCheckCommand::MergeFrom(from.iapcheckcommand());
    }
    if (from.has_tutorialrewardcommand()) {
      mutable_tutorialrewardcommand()->::com::ea::eamobile::nfsmw::protoc::RequestTutorialRewardCommand::MergeFrom(from.tutorialrewardcommand());
    }
    if (from.has_rpleaderboardcommand()) {
      mutable_rpleaderboardcommand()->::com::ea::eamobile::nfsmw::protoc::RequestRpLeaderboardCommand::MergeFrom(from.rpleaderboardcommand());
    }
    if (from.has_ghostrecordcommand()) {
      mutable_ghostrecordcommand()->::com::ea::eamobile::nfsmw::protoc::RequestGhostRecordCommand::MergeFrom(from.ghostrecordcommand());
    }
    if (from.has_challengemathinfocommand()) {
      mutable_challengemathinfocommand()->::com::ea::eamobile::nfsmw::protoc::RequestChallengeMathInfoCommand::MergeFrom(from.challengemathinfocommand());
    }
    if (from.has_profileuserdatacommand()) {
      mutable_profileuserdatacommand()->::com::ea::eamobile::nfsmw::protoc::RequestProfileUserDataCommand::MergeFrom(from.profileuserdatacommand());
    }
    if (from.has_profilenextcarcommand()) {
      mutable_profilenextcarcommand()->::com::ea::eamobile::nfsmw::protoc::RequestProfileNextCarCommand::MergeFrom(from.profilenextcarcommand());
    }
    if (from.has_profilelikecommand()) {
      mutable_profilelikecommand()->::com::ea::eamobile::nfsmw::protoc::RequestProfileLikeCommand::MergeFrom(from.profilelikecommand());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_profilereportcommand()) {
      mutable_profilereportcommand()->::com::ea::eamobile::nfsmw::protoc::RequestProfileReportCommand::MergeFrom(from.profilereportcommand());
    }
    if (from.has_profilevscommand()) {
      mutable_profilevscommand()->::com::ea::eamobile::nfsmw::protoc::RequestProfileVSCommand::MergeFrom(from.profilevscommand());
    }
    if (from.has_gotchacommand()) {
      mutable_gotchacommand()->::com::ea::eamobile::nfsmw::protoc::RequestGotchaCommand::MergeFrom(from.gotchacommand());
    }
    if (from.has_cheatinfocommand()) {
      mutable_cheatinfocommand()->::com::ea::eamobile::nfsmw::protoc::RequestCheatInfoCommand::MergeFrom(from.cheatinfocommand());
    }
    if (from.has_recorduserraceactioncommand()) {
      mutable_recorduserraceactioncommand()->::com::ea::eamobile::nfsmw::protoc::RequestRecordUserRaceActionCommand::MergeFrom(from.recorduserraceactioncommand());
    }
    if (from.has_systemcommand()) {
      mutable_systemcommand()->::com::ea::eamobile::nfsmw::protoc::RequestSystemCommand::MergeFrom(from.systemcommand());
    }
    if (from.has_leaderboardclasscommand()) {
      mutable_leaderboardclasscommand()->::com::ea::eamobile::nfsmw::protoc::RequestLeaderboardClass::MergeFrom(from.leaderboardclasscommand());
    }
    if (from.has_leaderboardcommand()) {
      mutable_leaderboardcommand()->::com::ea::eamobile::nfsmw::protoc::RequestLeaderboard::MergeFrom(from.leaderboardcommand());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_requesttournamentnum()) {
      mutable_requesttournamentnum()->::com::ea::eamobile::nfsmw::protoc::RequestTournamentNum::MergeFrom(from.requesttournamentnum());
    }
    if (from.has_requestquickrace()) {
      mutable_requestquickrace()->::com::ea::eamobile::nfsmw::protoc::RequestQuickRaceCommand::MergeFrom(from.requestquickrace());
    }
    if (from.has_bindingtokencommand()) {
      mutable_bindingtokencommand()->::com::ea::eamobile::nfsmw::protoc::RequestBindingTokenCommand::MergeFrom(from.bindingtokencommand());
    }
    if (from.has_bindinginfocommand()) {
      mutable_bindinginfocommand()->::com::ea::eamobile::nfsmw::protoc::RequestBindingInfoCommand::MergeFrom(from.bindinginfocommand());
    }
    if (from.has_collectenergycommand()) {
      mutable_collectenergycommand()->::com::ea::eamobile::nfsmw::protoc::RequestCollectEnergyCommand::MergeFrom(from.collectenergycommand());
    }
    if (from.has_energytimecommand()) {
      mutable_energytimecommand()->::com::ea::eamobile::nfsmw::protoc::RequestEnergyTimeCommand::MergeFrom(from.energytimecommand());
    }
    if (from.has_fansrewardcommand()) {
      mutable_fansrewardcommand()->::com::ea::eamobile::nfsmw::protoc::RequestFansRewardCommand::MergeFrom(from.fansrewardcommand());
    }
    if (from.has_proppurchasecommand()) {
      mutable_proppurchasecommand()->::com::ea::eamobile::nfsmw::protoc::RequestPropPurchaseCommand::MergeFrom(from.proppurchasecommand());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_missionrewardcommand()) {
      mutable_missionrewardcommand()->::com::ea::eamobile::nfsmw::protoc::RequestMissionRewardCommand::MergeFrom(from.missionrewardcommand());
    }
    if (from.has_missionfinishcommand()) {
      mutable_missionfinishcommand()->::com::ea::eamobile::nfsmw::protoc::RequestMissionFinishCommand::MergeFrom(from.missionfinishcommand());
    }
    if (from.has_lotterycommand()) {
      mutable_lotterycommand()->::com::ea::eamobile::nfsmw::protoc::RequestLotteryCommand::MergeFrom(from.lotterycommand());
    }
    if (from.has_fleetracecommand()) {
      mutable_fleetracecommand()->::com::ea::eamobile::nfsmw::protoc::RequestFleetRaceCommand::MergeFrom(from.fleetracecommand());
    }
    if (from.has_fleetstartcommand()) {
      mutable_fleetstartcommand()->::com::ea::eamobile::nfsmw::protoc::RequestFleetStartCommand::MergeFrom(from.fleetstartcommand());
    }
    if (from.has_fleetendcommand()) {
      mutable_fleetendcommand()->::com::ea::eamobile::nfsmw::protoc::RequestFleetEndCommand::MergeFrom(from.fleetendcommand());
    }
    if (from.has_fleetdoublecommand()) {
      mutable_fleetdoublecommand()->::com::ea::eamobile::nfsmw::protoc::RequestFleetDoubleCommand::MergeFrom(from.fleetdoublecommand());
    }
    if (from.has_fixcarlimitcommand()) {
      mutable_fixcarlimitcommand()->::com::ea::eamobile::nfsmw::protoc::RequestFixCarLimitCommand::MergeFrom(from.fixcarlimitcommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCommand::CopyFrom(const RequestCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_trackcommand()) {
    if (!this->trackcommand().IsInitialized()) return false;
  }
  if (has_logincommand()) {
    if (!this->logincommand().IsInitialized()) return false;
  }
  if (has_ghostcommand()) {
    if (!this->ghostcommand().IsInitialized()) return false;
  }
  if (has_raceresultcommand()) {
    if (!this->raceresultcommand().IsInitialized()) return false;
  }
  if (has_tournamentdetailcommand()) {
    if (!this->tournamentdetailcommand().IsInitialized()) return false;
  }
  if (has_tournamentrewarddetailcommand()) {
    if (!this->tournamentrewarddetailcommand().IsInitialized()) return false;
  }
  if (has_tournamentcommand()) {
    if (!this->tournamentcommand().IsInitialized()) return false;
  }
  if (has_resourcecommand()) {
    if (!this->resourcecommand().IsInitialized()) return false;
  }
  if (has_tournamentsignupcommand()) {
    if (!this->tournamentsignupcommand().IsInitialized()) return false;
  }
  if (has_racestartcommand()) {
    if (!this->racestartcommand().IsInitialized()) return false;
  }
  if (has_bindingstartcommand()) {
    if (!this->bindingstartcommand().IsInitialized()) return false;
  }
  if (has_bindingresultcommand()) {
    if (!this->bindingresultcommand().IsInitialized()) return false;
  }
  if (has_bindingconfirmcommand()) {
    if (!this->bindingconfirmcommand().IsInitialized()) return false;
  }
  if (has_getrward()) {
    if (!this->getrward().IsInitialized()) return false;
  }
  if (has_buycarcommand()) {
    if (!this->buycarcommand().IsInitialized()) return false;
  }
  if (has_cardatacommand()) {
    if (!this->cardatacommand().IsInitialized()) return false;
  }
  if (has_upgradeslotcommand()) {
    if (!this->upgradeslotcommand().IsInitialized()) return false;
  }
  if (has_usechartletcommand()) {
    if (!this->usechartletcommand().IsInitialized()) return false;
  }
  if (has_buyitemcommand()) {
    if (!this->buyitemcommand().IsInitialized()) return false;
  }
  if (has_registjaguar()) {
    if (!this->registjaguar().IsInitialized()) return false;
  }
  if (has_iapcheckcommand()) {
    if (!this->iapcheckcommand().IsInitialized()) return false;
  }
  if (has_tutorialrewardcommand()) {
    if (!this->tutorialrewardcommand().IsInitialized()) return false;
  }
  if (has_rpleaderboardcommand()) {
    if (!this->rpleaderboardcommand().IsInitialized()) return false;
  }
  if (has_ghostrecordcommand()) {
    if (!this->ghostrecordcommand().IsInitialized()) return false;
  }
  if (has_challengemathinfocommand()) {
    if (!this->challengemathinfocommand().IsInitialized()) return false;
  }
  if (has_profileuserdatacommand()) {
    if (!this->profileuserdatacommand().IsInitialized()) return false;
  }
  if (has_profilenextcarcommand()) {
    if (!this->profilenextcarcommand().IsInitialized()) return false;
  }
  if (has_profilelikecommand()) {
    if (!this->profilelikecommand().IsInitialized()) return false;
  }
  if (has_profilereportcommand()) {
    if (!this->profilereportcommand().IsInitialized()) return false;
  }
  if (has_profilevscommand()) {
    if (!this->profilevscommand().IsInitialized()) return false;
  }
  if (has_gotchacommand()) {
    if (!this->gotchacommand().IsInitialized()) return false;
  }
  if (has_cheatinfocommand()) {
    if (!this->cheatinfocommand().IsInitialized()) return false;
  }
  if (has_recorduserraceactioncommand()) {
    if (!this->recorduserraceactioncommand().IsInitialized()) return false;
  }
  if (has_systemcommand()) {
    if (!this->systemcommand().IsInitialized()) return false;
  }
  if (has_leaderboardcommand()) {
    if (!this->leaderboardcommand().IsInitialized()) return false;
  }
  if (has_bindingtokencommand()) {
    if (!this->bindingtokencommand().IsInitialized()) return false;
  }
  if (has_bindinginfocommand()) {
    if (!this->bindinginfocommand().IsInitialized()) return false;
  }
  if (has_fansrewardcommand()) {
    if (!this->fansrewardcommand().IsInitialized()) return false;
  }
  if (has_proppurchasecommand()) {
    if (!this->proppurchasecommand().IsInitialized()) return false;
  }
  if (has_missionfinishcommand()) {
    if (!this->missionfinishcommand().IsInitialized()) return false;
  }
  if (has_lotterycommand()) {
    if (!this->lotterycommand().IsInitialized()) return false;
  }
  if (has_fleetstartcommand()) {
    if (!this->fleetstartcommand().IsInitialized()) return false;
  }
  if (has_fleetendcommand()) {
    if (!this->fleetendcommand().IsInitialized()) return false;
  }
  if (has_fleetdoublecommand()) {
    if (!this->fleetdoublecommand().IsInitialized()) return false;
  }
  if (has_fixcarlimitcommand()) {
    if (!this->fixcarlimitcommand().IsInitialized()) return false;
  }
  return true;
}

void RequestCommand::Swap(RequestCommand* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(trackcommand_, other->trackcommand_);
    std::swap(logincommand_, other->logincommand_);
    std::swap(ghostcommand_, other->ghostcommand_);
    std::swap(raceresultcommand_, other->raceresultcommand_);
    std::swap(tournamentdetailcommand_, other->tournamentdetailcommand_);
    std::swap(tournamentrewarddetailcommand_, other->tournamentrewarddetailcommand_);
    std::swap(tournamentcommand_, other->tournamentcommand_);
    std::swap(resourcecommand_, other->resourcecommand_);
    std::swap(tournamentsignupcommand_, other->tournamentsignupcommand_);
    std::swap(racestartcommand_, other->racestartcommand_);
    std::swap(bindingstartcommand_, other->bindingstartcommand_);
    std::swap(bindingresultcommand_, other->bindingresultcommand_);
    std::swap(bindingconfirmcommand_, other->bindingconfirmcommand_);
    std::swap(getrward_, other->getrward_);
    std::swap(garagecommand_, other->garagecommand_);
    std::swap(buycarcommand_, other->buycarcommand_);
    std::swap(cardatacommand_, other->cardatacommand_);
    std::swap(upgradeslotcommand_, other->upgradeslotcommand_);
    std::swap(usechartletcommand_, other->usechartletcommand_);
    std::swap(modifyuserinfocommand_, other->modifyuserinfocommand_);
    std::swap(storedetailcommand_, other->storedetailcommand_);
    std::swap(buyitemcommand_, other->buyitemcommand_);
    std::swap(registjaguar_, other->registjaguar_);
    std::swap(iapcheckcommand_, other->iapcheckcommand_);
    std::swap(tutorialrewardcommand_, other->tutorialrewardcommand_);
    std::swap(rpleaderboardcommand_, other->rpleaderboardcommand_);
    std::swap(ghostrecordcommand_, other->ghostrecordcommand_);
    std::swap(challengemathinfocommand_, other->challengemathinfocommand_);
    std::swap(profileuserdatacommand_, other->profileuserdatacommand_);
    std::swap(profilenextcarcommand_, other->profilenextcarcommand_);
    std::swap(profilelikecommand_, other->profilelikecommand_);
    std::swap(profilereportcommand_, other->profilereportcommand_);
    std::swap(profilevscommand_, other->profilevscommand_);
    std::swap(gotchacommand_, other->gotchacommand_);
    std::swap(cheatinfocommand_, other->cheatinfocommand_);
    std::swap(recorduserraceactioncommand_, other->recorduserraceactioncommand_);
    std::swap(systemcommand_, other->systemcommand_);
    std::swap(leaderboardclasscommand_, other->leaderboardclasscommand_);
    std::swap(leaderboardcommand_, other->leaderboardcommand_);
    std::swap(requesttournamentnum_, other->requesttournamentnum_);
    std::swap(requestquickrace_, other->requestquickrace_);
    std::swap(bindingtokencommand_, other->bindingtokencommand_);
    std::swap(bindinginfocommand_, other->bindinginfocommand_);
    std::swap(collectenergycommand_, other->collectenergycommand_);
    std::swap(energytimecommand_, other->energytimecommand_);
    std::swap(fansrewardcommand_, other->fansrewardcommand_);
    std::swap(proppurchasecommand_, other->proppurchasecommand_);
    std::swap(missionrewardcommand_, other->missionrewardcommand_);
    std::swap(missionfinishcommand_, other->missionfinishcommand_);
    std::swap(lotterycommand_, other->lotterycommand_);
    std::swap(fleetracecommand_, other->fleetracecommand_);
    std::swap(fleetstartcommand_, other->fleetstartcommand_);
    std::swap(fleetendcommand_, other->fleetendcommand_);
    std::swap(fleetdoublecommand_, other->fleetdoublecommand_);
    std::swap(fixcarlimitcommand_, other->fixcarlimitcommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCommand_descriptor_;
  metadata.reflection = RequestCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCommand::kHeadFieldNumber;
const int ResponseCommand::kTrackCommandFieldNumber;
const int ResponseCommand::kUserInfoCommandFieldNumber;
const int ResponseCommand::kGhostCommandFieldNumber;
const int ResponseCommand::kRaceResultCommandFieldNumber;
const int ResponseCommand::kTournamentDetailCommandFieldNumber;
const int ResponseCommand::kTournamentRewardDetailCommandFieldNumber;
const int ResponseCommand::kTournamentCommandFieldNumber;
const int ResponseCommand::kResourceCommandFieldNumber;
const int ResponseCommand::kTournamentSignUpCommandFieldNumber;
const int ResponseCommand::kRaceStartCommandFieldNumber;
const int ResponseCommand::kBindingStartCommandFieldNumber;
const int ResponseCommand::kBindingResultCommandFieldNumber;
const int ResponseCommand::kBindingConfirmCommandFieldNumber;
const int ResponseCommand::kBindingPopupCommandFieldNumber;
const int ResponseCommand::kErrorCommandFieldNumber;
const int ResponseCommand::kModeInfoCommandFieldNumber;
const int ResponseCommand::kRewardCommandFieldNumber;
const int ResponseCommand::kGetRewardFieldNumber;
const int ResponseCommand::kTournamentRaceStartFieldNumber;
const int ResponseCommand::kTournamentRaceReaultFieldNumber;
const int ResponseCommand::kGarageCommandFieldNumber;
const int ResponseCommand::kBuyCarCommandFieldNumber;
const int ResponseCommand::kCarDataCommandFieldNumber;
const int ResponseCommand::kUpgradeSlotCommandFieldNumber;
const int ResponseCommand::kUseChartletCommandFieldNumber;
const int ResponseCommand::kModifyUserInfoCommandFieldNumber;
const int ResponseCommand::kChallengeMatchInfoCommandFieldNumber;
const int ResponseCommand::kStoreDetailCommandFieldNumber;
const int ResponseCommand::kBuyItemCommandFieldNumber;
const int ResponseCommand::kSystemCommandFieldNumber;
const int ResponseCommand::kWeiboShareCommandFieldNumber;
const int ResponseCommand::kRegistJaguarFieldNumber;
const int ResponseCommand::kFeedCommandFieldNumber;
const int ResponseCommand::kIapCheckCommandFieldNumber;
const int ResponseCommand::kTournamentNotificationCommandFieldNumber;
const int ResponseCommand::kTutorialRewardCommandFieldNumber;
const int ResponseCommand::kPopupCommandFieldNumber;
const int ResponseCommand::kRpLeaderboardCommandFieldNumber;
const int ResponseCommand::kNotificationCommandFieldNumber;
const int ResponseCommand::kGhostRecordCommandFieldNumber;
const int ResponseCommand::kTournamentRewardNumCommandFieldNumber;
const int ResponseCommand::kProfileUserDataCommandFieldNumber;
const int ResponseCommand::kProfileNextCarCommandFieldNumber;
const int ResponseCommand::kProfileLikeCommandFieldNumber;
const int ResponseCommand::kProfileReportCommandFieldNumber;
const int ResponseCommand::kProfileVSCommandFieldNumber;
const int ResponseCommand::kGotchaCommandFieldNumber;
const int ResponseCommand::kLeaderboardClassCommandFieldNumber;
const int ResponseCommand::kLeaderboardCommandFieldNumber;
const int ResponseCommand::kResponseTournamentNumFieldNumber;
const int ResponseCommand::kResponseQuickRaceFieldNumber;
const int ResponseCommand::kBindingTokenCommandFieldNumber;
const int ResponseCommand::kBindingInfoCommandFieldNumber;
const int ResponseCommand::kEnergyTimeCommandFieldNumber;
const int ResponseCommand::kFansRewardTimeCommandFieldNumber;
const int ResponseCommand::kMissionListCommandFieldNumber;
const int ResponseCommand::kLotteryCommandFieldNumber;
const int ResponseCommand::kPopuplistCommandFieldNumber;
const int ResponseCommand::kFleetRaceCommandFieldNumber;
const int ResponseCommand::kFleetStartCommandFieldNumber;
const int ResponseCommand::kFleetEndCommandFieldNumber;
const int ResponseCommand::kFleetDoubleCommandFieldNumber;
const int ResponseCommand::kFixCarLimitCommandFieldNumber;
#endif  // !_MSC_VER

ResponseCommand::ResponseCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseCommand::InitAsDefaultInstance() {
  head_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::HeadInfo*>(&::com::ea::eamobile::nfsmw::protoc::HeadInfo::default_instance());
  trackcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTrackCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTrackCommand::default_instance());
  userinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseUserInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseUserInfoCommand::default_instance());
  ghostcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseRacerForGhostCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseRacerForGhostCommand::default_instance());
  raceresultcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseRaceResultCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseRaceResultCommand::default_instance());
  tournamentdetailcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentDetailCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentDetailCommand::default_instance());
  tournamentrewarddetailcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardDetailCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardDetailCommand::default_instance());
  tournamentcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentCommand::default_instance());
  resourcecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseResourceCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseResourceCommand::default_instance());
  tournamentsignupcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentSignUpCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentSignUpCommand::default_instance());
  racestartcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseRaceStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseRaceStartCommand::default_instance());
  bindingstartcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingStartCommand::default_instance());
  bindingresultcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingResultCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingResultCommand::default_instance());
  bindingconfirmcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::default_instance());
  bindingpopupcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingPopupCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingPopupCommand::default_instance());
  errorcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ErrorCommand*>(&::com::ea::eamobile::nfsmw::protoc::ErrorCommand::default_instance());
  modeinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseModeInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseModeInfoCommand::default_instance());
  rewardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::responseTournamentRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::responseTournamentRewardCommand::default_instance());
  getreward_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseGetRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseGetRewardCommand::default_instance());
  tournamentracestart_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceStartCommand::default_instance());
  tournamentracereault_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceResultCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceResultCommand::default_instance());
  garagecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseGarageCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseGarageCommand::default_instance());
  buycarcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBuyCarCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBuyCarCommand::default_instance());
  cardatacommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseCarDataCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseCarDataCommand::default_instance());
  upgradeslotcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseUpgradeSlotCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseUpgradeSlotCommand::default_instance());
  usechartletcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseUseChartletCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseUseChartletCommand::default_instance());
  modifyuserinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseModifyUserInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseModifyUserInfoCommand::default_instance());
  challengematchinfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseChallengeMatchInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseChallengeMatchInfoCommand::default_instance());
  storedetailcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseStoreDetailCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseStoreDetailCommand::default_instance());
  buyitemcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBuyItemCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBuyItemCommand::default_instance());
  systemcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseSystemCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseSystemCommand::default_instance());
  weibosharecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseWeiboShareLocksCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseWeiboShareLocksCommand::default_instance());
  registjaguar_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseRegistJaguarCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseRegistJaguarCommand::default_instance());
  feedcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFeedCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFeedCommand::default_instance());
  iapcheckcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseIapCheckCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseIapCheckCommand::default_instance());
  tournamentnotificationcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNotificationCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNotificationCommand::default_instance());
  tutorialrewardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTutorialRewardCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTutorialRewardCommand::default_instance());
  popupcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponsePopupCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponsePopupCommand::default_instance());
  rpleaderboardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseRpLeaderboardCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseRpLeaderboardCommand::default_instance());
  notificationcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseNotificationCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseNotificationCommand::default_instance());
  ghostrecordcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseGhostRecordCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseGhostRecordCommand::default_instance());
  tournamentrewardnumcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardNumCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardNumCommand::default_instance());
  profileuserdatacommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseProfileUserDataCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseProfileUserDataCommand::default_instance());
  profilenextcarcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseProfileNextCarCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseProfileNextCarCommand::default_instance());
  profilelikecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseProfileLikeCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseProfileLikeCommand::default_instance());
  profilereportcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseProfileReportCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseProfileReportCommand::default_instance());
  profilevscommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseProfileVSCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseProfileVSCommand::default_instance());
  gotchacommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseGotchaCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseGotchaCommand::default_instance());
  leaderboardclasscommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboardClass*>(&::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboardClass::default_instance());
  leaderboardcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboard*>(&::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboard::default_instance());
  responsetournamentnum_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNum*>(&::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNum::default_instance());
  responsequickrace_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseQuickRaceCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseQuickRaceCommand::default_instance());
  bindingtokencommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingTokenCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingTokenCommand::default_instance());
  bindinginfocommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseBindingInfoCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseBindingInfoCommand::default_instance());
  energytimecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseEnergyTimeCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseEnergyTimeCommand::default_instance());
  fansrewardtimecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFansRewardTimeCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFansRewardTimeCommand::default_instance());
  missionlistcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseMissionListCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseMissionListCommand::default_instance());
  lotterycommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseLotteryCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseLotteryCommand::default_instance());
  popuplistcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponsePopupListCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponsePopupListCommand::default_instance());
  fleetracecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFleetRaceCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFleetRaceCommand::default_instance());
  fleetstartcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFleetStartCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFleetStartCommand::default_instance());
  fleetendcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFleetEndCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFleetEndCommand::default_instance());
  fleetdoublecommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFleetDoubleCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFleetDoubleCommand::default_instance());
  fixcarlimitcommand_ = const_cast< ::com::ea::eamobile::nfsmw::protoc::ResponseFixCarLimitCommand*>(&::com::ea::eamobile::nfsmw::protoc::ResponseFixCarLimitCommand::default_instance());
}

ResponseCommand::ResponseCommand(const ResponseCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCommand::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  trackcommand_ = NULL;
  userinfocommand_ = NULL;
  ghostcommand_ = NULL;
  raceresultcommand_ = NULL;
  tournamentdetailcommand_ = NULL;
  tournamentrewarddetailcommand_ = NULL;
  tournamentcommand_ = NULL;
  resourcecommand_ = NULL;
  tournamentsignupcommand_ = NULL;
  racestartcommand_ = NULL;
  bindingstartcommand_ = NULL;
  bindingresultcommand_ = NULL;
  bindingconfirmcommand_ = NULL;
  bindingpopupcommand_ = NULL;
  errorcommand_ = NULL;
  modeinfocommand_ = NULL;
  rewardcommand_ = NULL;
  getreward_ = NULL;
  tournamentracestart_ = NULL;
  tournamentracereault_ = NULL;
  garagecommand_ = NULL;
  buycarcommand_ = NULL;
  cardatacommand_ = NULL;
  upgradeslotcommand_ = NULL;
  usechartletcommand_ = NULL;
  modifyuserinfocommand_ = NULL;
  challengematchinfocommand_ = NULL;
  storedetailcommand_ = NULL;
  buyitemcommand_ = NULL;
  systemcommand_ = NULL;
  weibosharecommand_ = NULL;
  registjaguar_ = NULL;
  feedcommand_ = NULL;
  iapcheckcommand_ = NULL;
  tournamentnotificationcommand_ = NULL;
  tutorialrewardcommand_ = NULL;
  popupcommand_ = NULL;
  rpleaderboardcommand_ = NULL;
  notificationcommand_ = NULL;
  ghostrecordcommand_ = NULL;
  tournamentrewardnumcommand_ = NULL;
  profileuserdatacommand_ = NULL;
  profilenextcarcommand_ = NULL;
  profilelikecommand_ = NULL;
  profilereportcommand_ = NULL;
  profilevscommand_ = NULL;
  gotchacommand_ = NULL;
  leaderboardclasscommand_ = NULL;
  leaderboardcommand_ = NULL;
  responsetournamentnum_ = NULL;
  responsequickrace_ = NULL;
  bindingtokencommand_ = NULL;
  bindinginfocommand_ = NULL;
  energytimecommand_ = NULL;
  fansrewardtimecommand_ = NULL;
  missionlistcommand_ = NULL;
  lotterycommand_ = NULL;
  popuplistcommand_ = NULL;
  fleetracecommand_ = NULL;
  fleetstartcommand_ = NULL;
  fleetendcommand_ = NULL;
  fleetdoublecommand_ = NULL;
  fixcarlimitcommand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCommand::~ResponseCommand() {
  SharedDtor();
}

void ResponseCommand::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete trackcommand_;
    delete userinfocommand_;
    delete ghostcommand_;
    delete raceresultcommand_;
    delete tournamentdetailcommand_;
    delete tournamentrewarddetailcommand_;
    delete tournamentcommand_;
    delete resourcecommand_;
    delete tournamentsignupcommand_;
    delete racestartcommand_;
    delete bindingstartcommand_;
    delete bindingresultcommand_;
    delete bindingconfirmcommand_;
    delete bindingpopupcommand_;
    delete errorcommand_;
    delete modeinfocommand_;
    delete rewardcommand_;
    delete getreward_;
    delete tournamentracestart_;
    delete tournamentracereault_;
    delete garagecommand_;
    delete buycarcommand_;
    delete cardatacommand_;
    delete upgradeslotcommand_;
    delete usechartletcommand_;
    delete modifyuserinfocommand_;
    delete challengematchinfocommand_;
    delete storedetailcommand_;
    delete buyitemcommand_;
    delete systemcommand_;
    delete weibosharecommand_;
    delete registjaguar_;
    delete feedcommand_;
    delete iapcheckcommand_;
    delete tournamentnotificationcommand_;
    delete tutorialrewardcommand_;
    delete popupcommand_;
    delete rpleaderboardcommand_;
    delete notificationcommand_;
    delete ghostrecordcommand_;
    delete tournamentrewardnumcommand_;
    delete profileuserdatacommand_;
    delete profilenextcarcommand_;
    delete profilelikecommand_;
    delete profilereportcommand_;
    delete profilevscommand_;
    delete gotchacommand_;
    delete leaderboardclasscommand_;
    delete leaderboardcommand_;
    delete responsetournamentnum_;
    delete responsequickrace_;
    delete bindingtokencommand_;
    delete bindinginfocommand_;
    delete energytimecommand_;
    delete fansrewardtimecommand_;
    delete missionlistcommand_;
    delete lotterycommand_;
    delete popuplistcommand_;
    delete fleetracecommand_;
    delete fleetstartcommand_;
    delete fleetendcommand_;
    delete fleetdoublecommand_;
    delete fixcarlimitcommand_;
  }
}

void ResponseCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCommand_descriptor_;
}

const ResponseCommand& ResponseCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

ResponseCommand* ResponseCommand::default_instance_ = NULL;

ResponseCommand* ResponseCommand::New() const {
  return new ResponseCommand;
}

void ResponseCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::com::ea::eamobile::nfsmw::protoc::HeadInfo::Clear();
    }
    if (has_trackcommand()) {
      if (trackcommand_ != NULL) trackcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTrackCommand::Clear();
    }
    if (has_userinfocommand()) {
      if (userinfocommand_ != NULL) userinfocommand_->::com::ea::eamobile::nfsmw::protoc::ResponseUserInfoCommand::Clear();
    }
    if (has_ghostcommand()) {
      if (ghostcommand_ != NULL) ghostcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseRacerForGhostCommand::Clear();
    }
    if (has_raceresultcommand()) {
      if (raceresultcommand_ != NULL) raceresultcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseRaceResultCommand::Clear();
    }
    if (has_tournamentdetailcommand()) {
      if (tournamentdetailcommand_ != NULL) tournamentdetailcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentDetailCommand::Clear();
    }
    if (has_tournamentrewarddetailcommand()) {
      if (tournamentrewarddetailcommand_ != NULL) tournamentrewarddetailcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardDetailCommand::Clear();
    }
    if (has_tournamentcommand()) {
      if (tournamentcommand_ != NULL) tournamentcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentCommand::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_resourcecommand()) {
      if (resourcecommand_ != NULL) resourcecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseResourceCommand::Clear();
    }
    if (has_tournamentsignupcommand()) {
      if (tournamentsignupcommand_ != NULL) tournamentsignupcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentSignUpCommand::Clear();
    }
    if (has_racestartcommand()) {
      if (racestartcommand_ != NULL) racestartcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseRaceStartCommand::Clear();
    }
    if (has_bindingstartcommand()) {
      if (bindingstartcommand_ != NULL) bindingstartcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingStartCommand::Clear();
    }
    if (has_bindingresultcommand()) {
      if (bindingresultcommand_ != NULL) bindingresultcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingResultCommand::Clear();
    }
    if (has_bindingconfirmcommand()) {
      if (bindingconfirmcommand_ != NULL) bindingconfirmcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::Clear();
    }
    if (has_bindingpopupcommand()) {
      if (bindingpopupcommand_ != NULL) bindingpopupcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingPopupCommand::Clear();
    }
    if (has_errorcommand()) {
      if (errorcommand_ != NULL) errorcommand_->::com::ea::eamobile::nfsmw::protoc::ErrorCommand::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_modeinfocommand()) {
      if (modeinfocommand_ != NULL) modeinfocommand_->::com::ea::eamobile::nfsmw::protoc::ResponseModeInfoCommand::Clear();
    }
    if (has_rewardcommand()) {
      if (rewardcommand_ != NULL) rewardcommand_->::com::ea::eamobile::nfsmw::protoc::responseTournamentRewardCommand::Clear();
    }
    if (has_getreward()) {
      if (getreward_ != NULL) getreward_->::com::ea::eamobile::nfsmw::protoc::ResponseGetRewardCommand::Clear();
    }
    if (has_tournamentracestart()) {
      if (tournamentracestart_ != NULL) tournamentracestart_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceStartCommand::Clear();
    }
    if (has_tournamentracereault()) {
      if (tournamentracereault_ != NULL) tournamentracereault_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceResultCommand::Clear();
    }
    if (has_garagecommand()) {
      if (garagecommand_ != NULL) garagecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseGarageCommand::Clear();
    }
    if (has_buycarcommand()) {
      if (buycarcommand_ != NULL) buycarcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBuyCarCommand::Clear();
    }
    if (has_cardatacommand()) {
      if (cardatacommand_ != NULL) cardatacommand_->::com::ea::eamobile::nfsmw::protoc::ResponseCarDataCommand::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_upgradeslotcommand()) {
      if (upgradeslotcommand_ != NULL) upgradeslotcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseUpgradeSlotCommand::Clear();
    }
    if (has_usechartletcommand()) {
      if (usechartletcommand_ != NULL) usechartletcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseUseChartletCommand::Clear();
    }
    if (has_modifyuserinfocommand()) {
      if (modifyuserinfocommand_ != NULL) modifyuserinfocommand_->::com::ea::eamobile::nfsmw::protoc::ResponseModifyUserInfoCommand::Clear();
    }
    if (has_challengematchinfocommand()) {
      if (challengematchinfocommand_ != NULL) challengematchinfocommand_->::com::ea::eamobile::nfsmw::protoc::ResponseChallengeMatchInfoCommand::Clear();
    }
    if (has_storedetailcommand()) {
      if (storedetailcommand_ != NULL) storedetailcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseStoreDetailCommand::Clear();
    }
    if (has_buyitemcommand()) {
      if (buyitemcommand_ != NULL) buyitemcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBuyItemCommand::Clear();
    }
    if (has_systemcommand()) {
      if (systemcommand_ != NULL) systemcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseSystemCommand::Clear();
    }
    if (has_weibosharecommand()) {
      if (weibosharecommand_ != NULL) weibosharecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseWeiboShareLocksCommand::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_registjaguar()) {
      if (registjaguar_ != NULL) registjaguar_->::com::ea::eamobile::nfsmw::protoc::ResponseRegistJaguarCommand::Clear();
    }
    if (has_feedcommand()) {
      if (feedcommand_ != NULL) feedcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFeedCommand::Clear();
    }
    if (has_iapcheckcommand()) {
      if (iapcheckcommand_ != NULL) iapcheckcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseIapCheckCommand::Clear();
    }
    if (has_tournamentnotificationcommand()) {
      if (tournamentnotificationcommand_ != NULL) tournamentnotificationcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNotificationCommand::Clear();
    }
    if (has_tutorialrewardcommand()) {
      if (tutorialrewardcommand_ != NULL) tutorialrewardcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTutorialRewardCommand::Clear();
    }
    if (has_popupcommand()) {
      if (popupcommand_ != NULL) popupcommand_->::com::ea::eamobile::nfsmw::protoc::ResponsePopupCommand::Clear();
    }
    if (has_rpleaderboardcommand()) {
      if (rpleaderboardcommand_ != NULL) rpleaderboardcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseRpLeaderboardCommand::Clear();
    }
    if (has_notificationcommand()) {
      if (notificationcommand_ != NULL) notificationcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseNotificationCommand::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_ghostrecordcommand()) {
      if (ghostrecordcommand_ != NULL) ghostrecordcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseGhostRecordCommand::Clear();
    }
    if (has_tournamentrewardnumcommand()) {
      if (tournamentrewardnumcommand_ != NULL) tournamentrewardnumcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardNumCommand::Clear();
    }
    if (has_profileuserdatacommand()) {
      if (profileuserdatacommand_ != NULL) profileuserdatacommand_->::com::ea::eamobile::nfsmw::protoc::ResponseProfileUserDataCommand::Clear();
    }
    if (has_profilenextcarcommand()) {
      if (profilenextcarcommand_ != NULL) profilenextcarcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseProfileNextCarCommand::Clear();
    }
    if (has_profilelikecommand()) {
      if (profilelikecommand_ != NULL) profilelikecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseProfileLikeCommand::Clear();
    }
    if (has_profilereportcommand()) {
      if (profilereportcommand_ != NULL) profilereportcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseProfileReportCommand::Clear();
    }
    if (has_profilevscommand()) {
      if (profilevscommand_ != NULL) profilevscommand_->::com::ea::eamobile::nfsmw::protoc::ResponseProfileVSCommand::Clear();
    }
    if (has_gotchacommand()) {
      if (gotchacommand_ != NULL) gotchacommand_->::com::ea::eamobile::nfsmw::protoc::ResponseGotchaCommand::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_leaderboardclasscommand()) {
      if (leaderboardclasscommand_ != NULL) leaderboardclasscommand_->::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboardClass::Clear();
    }
    if (has_leaderboardcommand()) {
      if (leaderboardcommand_ != NULL) leaderboardcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboard::Clear();
    }
    if (has_responsetournamentnum()) {
      if (responsetournamentnum_ != NULL) responsetournamentnum_->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNum::Clear();
    }
    if (has_responsequickrace()) {
      if (responsequickrace_ != NULL) responsequickrace_->::com::ea::eamobile::nfsmw::protoc::ResponseQuickRaceCommand::Clear();
    }
    if (has_bindingtokencommand()) {
      if (bindingtokencommand_ != NULL) bindingtokencommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingTokenCommand::Clear();
    }
    if (has_bindinginfocommand()) {
      if (bindinginfocommand_ != NULL) bindinginfocommand_->::com::ea::eamobile::nfsmw::protoc::ResponseBindingInfoCommand::Clear();
    }
    if (has_energytimecommand()) {
      if (energytimecommand_ != NULL) energytimecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseEnergyTimeCommand::Clear();
    }
    if (has_fansrewardtimecommand()) {
      if (fansrewardtimecommand_ != NULL) fansrewardtimecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFansRewardTimeCommand::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_missionlistcommand()) {
      if (missionlistcommand_ != NULL) missionlistcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseMissionListCommand::Clear();
    }
    if (has_lotterycommand()) {
      if (lotterycommand_ != NULL) lotterycommand_->::com::ea::eamobile::nfsmw::protoc::ResponseLotteryCommand::Clear();
    }
    if (has_popuplistcommand()) {
      if (popuplistcommand_ != NULL) popuplistcommand_->::com::ea::eamobile::nfsmw::protoc::ResponsePopupListCommand::Clear();
    }
    if (has_fleetracecommand()) {
      if (fleetracecommand_ != NULL) fleetracecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFleetRaceCommand::Clear();
    }
    if (has_fleetstartcommand()) {
      if (fleetstartcommand_ != NULL) fleetstartcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFleetStartCommand::Clear();
    }
    if (has_fleetendcommand()) {
      if (fleetendcommand_ != NULL) fleetendcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFleetEndCommand::Clear();
    }
    if (has_fleetdoublecommand()) {
      if (fleetdoublecommand_ != NULL) fleetdoublecommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFleetDoubleCommand::Clear();
    }
    if (has_fixcarlimitcommand()) {
      if (fixcarlimitcommand_ != NULL) fixcarlimitcommand_->::com::ea::eamobile::nfsmw::protoc::ResponseFixCarLimitCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trackCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTrackCommand trackCommand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trackcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseUserInfoCommand userInfoCommand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ghostCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseRacerForGhostCommand ghostCommand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghostCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghostcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_raceResultCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceResultCommand raceResultCommand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceResultCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raceresultcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tournamentDetailCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentDetailCommand tournamentDetailCommand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentDetailCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentdetailcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tournamentRewardDetailCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentRewardDetailCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentrewarddetailcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_tournamentCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentCommand tournamentCommand = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_resourceCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseResourceCommand resourceCommand = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourceCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resourcecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tournamentSignUpCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentSignUpCommand tournamentSignUpCommand = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentSignUpCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentsignupcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_raceStartCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceStartCommand raceStartCommand = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raceStartCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_racestartcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_bindingStartCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingStartCommand bindingStartCommand = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingStartCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingstartcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_bindingResultCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingResultCommand bindingResultCommand = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingResultCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingresultcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_bindingConfirmCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingConfirmCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingconfirmcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_bindingPopupCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingPopupCommand bindingPopupCommand = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingPopupCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingpopupcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_errorCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand errorCommand = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errorcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_modeInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseModeInfoCommand modeInfoCommand = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modeInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modeinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_rewardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.responseTournamentRewardCommand rewardCommand = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_getReward;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseGetRewardCommand getReward = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_tournamentRaceStart;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceStartCommand tournamentRaceStart = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentRaceStart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentracestart()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_tournamentRaceReault;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceResultCommand tournamentRaceReault = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentRaceReault:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentracereault()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_garageCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseGarageCommand garageCommand = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_garageCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_garagecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_buyCarCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyCarCommand buyCarCommand = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyCarCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buycarcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_carDataCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseCarDataCommand carDataCommand = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carDataCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cardatacommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_upgradeSlotCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseUpgradeSlotCommand upgradeSlotCommand = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upgradeSlotCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgradeslotcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_useChartletCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseUseChartletCommand useChartletCommand = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useChartletCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usechartletcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_modifyUserInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseModifyUserInfoCommand modifyUserInfoCommand = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modifyUserInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modifyuserinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_challengeMatchInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseChallengeMatchInfoCommand challengeMatchInfoCommand = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengeMatchInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengematchinfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_storeDetailCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseStoreDetailCommand storeDetailCommand = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storeDetailCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storedetailcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_buyItemCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyItemCommand buyItemCommand = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buyItemCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyitemcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_systemCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseSystemCommand systemCommand = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_systemCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_weiboShareCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseWeiboShareLocksCommand weiboShareCommand = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weiboShareCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weibosharecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_registJaguar;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseRegistJaguarCommand registJaguar = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registJaguar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registjaguar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_feedCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFeedCommand feedCommand = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feedCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feedcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_IapCheckCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseIapCheckCommand IapCheckCommand = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IapCheckCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iapcheckcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_tournamentNotificationCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNotificationCommand tournamentNotificationCommand = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentNotificationCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentnotificationcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_tutorialRewardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTutorialRewardCommand tutorialRewardCommand = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tutorialRewardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tutorialrewardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_popupCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popupCommand = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_popupCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_popupcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_rpLeaderboardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseRpLeaderboardCommand rpLeaderboardCommand = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpLeaderboardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpleaderboardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_notificationCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseNotificationCommand notificationCommand = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notificationCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notificationcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_ghostRecordCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseGhostRecordCommand ghostRecordCommand = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghostRecordCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghostrecordcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_tournamentRewardNumCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardNumCommand tournamentRewardNumCommand = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tournamentRewardNumCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournamentrewardnumcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_profileUserDataCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileUserDataCommand profileUserDataCommand = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileUserDataCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profileuserdatacommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_profileNextCarCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileNextCarCommand profileNextCarCommand = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileNextCarCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilenextcarcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_profileLikeCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileLikeCommand profileLikeCommand = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileLikeCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilelikecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_profileReportCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileReportCommand profileReportCommand = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileReportCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilereportcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_profileVSCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileVSCommand profileVSCommand = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profileVSCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profilevscommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(450)) goto parse_gotchaCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseGotchaCommand gotchaCommand = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gotchaCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gotchacommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_leaderboardClassCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboardClass leaderboardClassCommand = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboardClassCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboardclasscommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_leaderboardCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboard leaderboardCommand = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderboardCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderboardcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_responseTournamentNum;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNum responseTournamentNum = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responseTournamentNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsetournamentnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(482)) goto parse_responseQuickRace;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseQuickRaceCommand responseQuickRace = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responseQuickRace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsequickrace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(490)) goto parse_bindingTokenCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingTokenCommand bindingTokenCommand = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingTokenCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindingtokencommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(498)) goto parse_bindingInfoCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingInfoCommand bindingInfoCommand = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bindingInfoCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bindinginfocommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(506)) goto parse_energyTimeCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseEnergyTimeCommand energyTimeCommand = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_energyTimeCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energytimecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_fansRewardTimeCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFansRewardTimeCommand fansRewardTimeCommand = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fansRewardTimeCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fansrewardtimecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_missionListCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseMissionListCommand missionListCommand = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionListCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missionlistcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(530)) goto parse_lotteryCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseLotteryCommand lotteryCommand = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lotteryCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lotterycommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(538)) goto parse_popuplistCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupListCommand popuplistCommand = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_popuplistCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_popuplistcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(546)) goto parse_fleetRaceCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetRaceCommand fleetRaceCommand = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetRaceCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetracecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_fleetStartCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetStartCommand fleetStartCommand = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetStartCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetstartcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(562)) goto parse_fleetEndCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetEndCommand fleetEndCommand = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetEndCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetendcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_fleetDoubleCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetDoubleCommand fleetDoubleCommand = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fleetDoubleCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fleetdoublecommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_fixCarLimitCommand;
        break;
      }
      
      // optional .com.ea.eamobile.nfsmw.protoc.ResponseFixCarLimitCommand fixCarLimitCommand = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixCarLimitCommand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixcarlimitcommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTrackCommand trackCommand = 2;
  if (has_trackcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trackcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseUserInfoCommand userInfoCommand = 3;
  if (has_userinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRacerForGhostCommand ghostCommand = 4;
  if (has_ghostcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ghostcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceResultCommand raceResultCommand = 5;
  if (has_raceresultcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->raceresultcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentDetailCommand tournamentDetailCommand = 6;
  if (has_tournamentdetailcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tournamentdetailcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
  if (has_tournamentrewarddetailcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tournamentrewarddetailcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentCommand tournamentCommand = 9;
  if (has_tournamentcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tournamentcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseResourceCommand resourceCommand = 10;
  if (has_resourcecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->resourcecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentSignUpCommand tournamentSignUpCommand = 17;
  if (has_tournamentsignupcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tournamentsignupcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceStartCommand raceStartCommand = 19;
  if (has_racestartcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->racestartcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingStartCommand bindingStartCommand = 20;
  if (has_bindingstartcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->bindingstartcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingResultCommand bindingResultCommand = 21;
  if (has_bindingresultcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->bindingresultcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 22;
  if (has_bindingconfirmcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->bindingconfirmcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingPopupCommand bindingPopupCommand = 23;
  if (has_bindingpopupcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->bindingpopupcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand errorCommand = 24;
  if (has_errorcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->errorcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseModeInfoCommand modeInfoCommand = 25;
  if (has_modeinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->modeinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.responseTournamentRewardCommand rewardCommand = 26;
  if (has_rewardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->rewardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGetRewardCommand getReward = 27;
  if (has_getreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->getreward(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceStartCommand tournamentRaceStart = 28;
  if (has_tournamentracestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->tournamentracestart(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceResultCommand tournamentRaceReault = 29;
  if (has_tournamentracereault()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->tournamentracereault(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGarageCommand garageCommand = 30;
  if (has_garagecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->garagecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyCarCommand buyCarCommand = 31;
  if (has_buycarcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->buycarcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseCarDataCommand carDataCommand = 32;
  if (has_cardatacommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->cardatacommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseUpgradeSlotCommand upgradeSlotCommand = 33;
  if (has_upgradeslotcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->upgradeslotcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseUseChartletCommand useChartletCommand = 34;
  if (has_usechartletcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->usechartletcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseModifyUserInfoCommand modifyUserInfoCommand = 35;
  if (has_modifyuserinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->modifyuserinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseChallengeMatchInfoCommand challengeMatchInfoCommand = 36;
  if (has_challengematchinfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->challengematchinfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseStoreDetailCommand storeDetailCommand = 37;
  if (has_storedetailcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->storedetailcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyItemCommand buyItemCommand = 38;
  if (has_buyitemcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->buyitemcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseSystemCommand systemCommand = 39;
  if (has_systemcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->systemcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseWeiboShareLocksCommand weiboShareCommand = 40;
  if (has_weibosharecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->weibosharecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRegistJaguarCommand registJaguar = 41;
  if (has_registjaguar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->registjaguar(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFeedCommand feedCommand = 42;
  if (has_feedcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->feedcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseIapCheckCommand IapCheckCommand = 43;
  if (has_iapcheckcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->iapcheckcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNotificationCommand tournamentNotificationCommand = 44;
  if (has_tournamentnotificationcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->tournamentnotificationcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTutorialRewardCommand tutorialRewardCommand = 45;
  if (has_tutorialrewardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->tutorialrewardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popupCommand = 46;
  if (has_popupcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->popupcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRpLeaderboardCommand rpLeaderboardCommand = 47;
  if (has_rpleaderboardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->rpleaderboardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseNotificationCommand notificationCommand = 48;
  if (has_notificationcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->notificationcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGhostRecordCommand ghostRecordCommand = 49;
  if (has_ghostrecordcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, this->ghostrecordcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardNumCommand tournamentRewardNumCommand = 50;
  if (has_tournamentrewardnumcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->tournamentrewardnumcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileUserDataCommand profileUserDataCommand = 51;
  if (has_profileuserdatacommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->profileuserdatacommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileNextCarCommand profileNextCarCommand = 52;
  if (has_profilenextcarcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->profilenextcarcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileLikeCommand profileLikeCommand = 53;
  if (has_profilelikecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->profilelikecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileReportCommand profileReportCommand = 54;
  if (has_profilereportcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->profilereportcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileVSCommand profileVSCommand = 55;
  if (has_profilevscommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->profilevscommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGotchaCommand gotchaCommand = 56;
  if (has_gotchacommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      56, this->gotchacommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboardClass leaderboardClassCommand = 57;
  if (has_leaderboardclasscommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->leaderboardclasscommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboard leaderboardCommand = 58;
  if (has_leaderboardcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->leaderboardcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNum responseTournamentNum = 59;
  if (has_responsetournamentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->responsetournamentnum(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseQuickRaceCommand responseQuickRace = 60;
  if (has_responsequickrace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->responsequickrace(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingTokenCommand bindingTokenCommand = 61;
  if (has_bindingtokencommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->bindingtokencommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingInfoCommand bindingInfoCommand = 62;
  if (has_bindinginfocommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->bindinginfocommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseEnergyTimeCommand energyTimeCommand = 63;
  if (has_energytimecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, this->energytimecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFansRewardTimeCommand fansRewardTimeCommand = 64;
  if (has_fansrewardtimecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, this->fansrewardtimecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseMissionListCommand missionListCommand = 65;
  if (has_missionlistcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      65, this->missionlistcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseLotteryCommand lotteryCommand = 66;
  if (has_lotterycommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      66, this->lotterycommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupListCommand popuplistCommand = 67;
  if (has_popuplistcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      67, this->popuplistcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetRaceCommand fleetRaceCommand = 68;
  if (has_fleetracecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->fleetracecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetStartCommand fleetStartCommand = 69;
  if (has_fleetstartcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->fleetstartcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetEndCommand fleetEndCommand = 70;
  if (has_fleetendcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->fleetendcommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetDoubleCommand fleetDoubleCommand = 71;
  if (has_fleetdoublecommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->fleetdoublecommand(), output);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFixCarLimitCommand fixCarLimitCommand = 72;
  if (has_fixcarlimitcommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->fixcarlimitcommand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTrackCommand trackCommand = 2;
  if (has_trackcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trackcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseUserInfoCommand userInfoCommand = 3;
  if (has_userinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRacerForGhostCommand ghostCommand = 4;
  if (has_ghostcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ghostcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceResultCommand raceResultCommand = 5;
  if (has_raceresultcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->raceresultcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentDetailCommand tournamentDetailCommand = 6;
  if (has_tournamentdetailcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tournamentdetailcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
  if (has_tournamentrewarddetailcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tournamentrewarddetailcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentCommand tournamentCommand = 9;
  if (has_tournamentcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tournamentcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseResourceCommand resourceCommand = 10;
  if (has_resourcecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->resourcecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentSignUpCommand tournamentSignUpCommand = 17;
  if (has_tournamentsignupcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tournamentsignupcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceStartCommand raceStartCommand = 19;
  if (has_racestartcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->racestartcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingStartCommand bindingStartCommand = 20;
  if (has_bindingstartcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->bindingstartcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingResultCommand bindingResultCommand = 21;
  if (has_bindingresultcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->bindingresultcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 22;
  if (has_bindingconfirmcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->bindingconfirmcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingPopupCommand bindingPopupCommand = 23;
  if (has_bindingpopupcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->bindingpopupcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand errorCommand = 24;
  if (has_errorcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->errorcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseModeInfoCommand modeInfoCommand = 25;
  if (has_modeinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->modeinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.responseTournamentRewardCommand rewardCommand = 26;
  if (has_rewardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->rewardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGetRewardCommand getReward = 27;
  if (has_getreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->getreward(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceStartCommand tournamentRaceStart = 28;
  if (has_tournamentracestart()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->tournamentracestart(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceResultCommand tournamentRaceReault = 29;
  if (has_tournamentracereault()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->tournamentracereault(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGarageCommand garageCommand = 30;
  if (has_garagecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->garagecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyCarCommand buyCarCommand = 31;
  if (has_buycarcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->buycarcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseCarDataCommand carDataCommand = 32;
  if (has_cardatacommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->cardatacommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseUpgradeSlotCommand upgradeSlotCommand = 33;
  if (has_upgradeslotcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->upgradeslotcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseUseChartletCommand useChartletCommand = 34;
  if (has_usechartletcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->usechartletcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseModifyUserInfoCommand modifyUserInfoCommand = 35;
  if (has_modifyuserinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->modifyuserinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseChallengeMatchInfoCommand challengeMatchInfoCommand = 36;
  if (has_challengematchinfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->challengematchinfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseStoreDetailCommand storeDetailCommand = 37;
  if (has_storedetailcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->storedetailcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyItemCommand buyItemCommand = 38;
  if (has_buyitemcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->buyitemcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseSystemCommand systemCommand = 39;
  if (has_systemcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->systemcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseWeiboShareLocksCommand weiboShareCommand = 40;
  if (has_weibosharecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->weibosharecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRegistJaguarCommand registJaguar = 41;
  if (has_registjaguar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->registjaguar(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFeedCommand feedCommand = 42;
  if (has_feedcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->feedcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseIapCheckCommand IapCheckCommand = 43;
  if (has_iapcheckcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->iapcheckcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNotificationCommand tournamentNotificationCommand = 44;
  if (has_tournamentnotificationcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->tournamentnotificationcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTutorialRewardCommand tutorialRewardCommand = 45;
  if (has_tutorialrewardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->tutorialrewardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popupCommand = 46;
  if (has_popupcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->popupcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseRpLeaderboardCommand rpLeaderboardCommand = 47;
  if (has_rpleaderboardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->rpleaderboardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseNotificationCommand notificationCommand = 48;
  if (has_notificationcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->notificationcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGhostRecordCommand ghostRecordCommand = 49;
  if (has_ghostrecordcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->ghostrecordcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardNumCommand tournamentRewardNumCommand = 50;
  if (has_tournamentrewardnumcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->tournamentrewardnumcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileUserDataCommand profileUserDataCommand = 51;
  if (has_profileuserdatacommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->profileuserdatacommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileNextCarCommand profileNextCarCommand = 52;
  if (has_profilenextcarcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->profilenextcarcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileLikeCommand profileLikeCommand = 53;
  if (has_profilelikecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->profilelikecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileReportCommand profileReportCommand = 54;
  if (has_profilereportcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->profilereportcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileVSCommand profileVSCommand = 55;
  if (has_profilevscommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->profilevscommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseGotchaCommand gotchaCommand = 56;
  if (has_gotchacommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->gotchacommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboardClass leaderboardClassCommand = 57;
  if (has_leaderboardclasscommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->leaderboardclasscommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboard leaderboardCommand = 58;
  if (has_leaderboardcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->leaderboardcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNum responseTournamentNum = 59;
  if (has_responsetournamentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->responsetournamentnum(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseQuickRaceCommand responseQuickRace = 60;
  if (has_responsequickrace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->responsequickrace(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingTokenCommand bindingTokenCommand = 61;
  if (has_bindingtokencommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->bindingtokencommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingInfoCommand bindingInfoCommand = 62;
  if (has_bindinginfocommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->bindinginfocommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseEnergyTimeCommand energyTimeCommand = 63;
  if (has_energytimecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->energytimecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFansRewardTimeCommand fansRewardTimeCommand = 64;
  if (has_fansrewardtimecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->fansrewardtimecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseMissionListCommand missionListCommand = 65;
  if (has_missionlistcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->missionlistcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseLotteryCommand lotteryCommand = 66;
  if (has_lotterycommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->lotterycommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupListCommand popuplistCommand = 67;
  if (has_popuplistcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->popuplistcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetRaceCommand fleetRaceCommand = 68;
  if (has_fleetracecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->fleetracecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetStartCommand fleetStartCommand = 69;
  if (has_fleetstartcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->fleetstartcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetEndCommand fleetEndCommand = 70;
  if (has_fleetendcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->fleetendcommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetDoubleCommand fleetDoubleCommand = 71;
  if (has_fleetdoublecommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->fleetdoublecommand(), target);
  }
  
  // optional .com.ea.eamobile.nfsmw.protoc.ResponseFixCarLimitCommand fixCarLimitCommand = 72;
  if (has_fixcarlimitcommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->fixcarlimitcommand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.ea.eamobile.nfsmw.protoc.HeadInfo head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTrackCommand trackCommand = 2;
    if (has_trackcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trackcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseUserInfoCommand userInfoCommand = 3;
    if (has_userinfocommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseRacerForGhostCommand ghostCommand = 4;
    if (has_ghostcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghostcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceResultCommand raceResultCommand = 5;
    if (has_raceresultcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raceresultcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentDetailCommand tournamentDetailCommand = 6;
    if (has_tournamentdetailcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentdetailcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardDetailCommand tournamentRewardDetailCommand = 7;
    if (has_tournamentrewarddetailcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentrewarddetailcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentCommand tournamentCommand = 9;
    if (has_tournamentcommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentcommand());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseResourceCommand resourceCommand = 10;
    if (has_resourcecommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourcecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentSignUpCommand tournamentSignUpCommand = 17;
    if (has_tournamentsignupcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentsignupcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseRaceStartCommand raceStartCommand = 19;
    if (has_racestartcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->racestartcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingStartCommand bindingStartCommand = 20;
    if (has_bindingstartcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingstartcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingResultCommand bindingResultCommand = 21;
    if (has_bindingresultcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingresultcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingConfirmCommand bindingConfirmCommand = 22;
    if (has_bindingconfirmcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingconfirmcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingPopupCommand bindingPopupCommand = 23;
    if (has_bindingpopupcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingpopupcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ErrorCommand errorCommand = 24;
    if (has_errorcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errorcommand());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseModeInfoCommand modeInfoCommand = 25;
    if (has_modeinfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modeinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.responseTournamentRewardCommand rewardCommand = 26;
    if (has_rewardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseGetRewardCommand getReward = 27;
    if (has_getreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getreward());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceStartCommand tournamentRaceStart = 28;
    if (has_tournamentracestart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentracestart());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRaceResultCommand tournamentRaceReault = 29;
    if (has_tournamentracereault()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentracereault());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseGarageCommand garageCommand = 30;
    if (has_garagecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->garagecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyCarCommand buyCarCommand = 31;
    if (has_buycarcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buycarcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseCarDataCommand carDataCommand = 32;
    if (has_cardatacommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cardatacommand());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseUpgradeSlotCommand upgradeSlotCommand = 33;
    if (has_upgradeslotcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgradeslotcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseUseChartletCommand useChartletCommand = 34;
    if (has_usechartletcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usechartletcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseModifyUserInfoCommand modifyUserInfoCommand = 35;
    if (has_modifyuserinfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modifyuserinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseChallengeMatchInfoCommand challengeMatchInfoCommand = 36;
    if (has_challengematchinfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengematchinfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseStoreDetailCommand storeDetailCommand = 37;
    if (has_storedetailcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storedetailcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBuyItemCommand buyItemCommand = 38;
    if (has_buyitemcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyitemcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseSystemCommand systemCommand = 39;
    if (has_systemcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseWeiboShareLocksCommand weiboShareCommand = 40;
    if (has_weibosharecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weibosharecommand());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseRegistJaguarCommand registJaguar = 41;
    if (has_registjaguar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registjaguar());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFeedCommand feedCommand = 42;
    if (has_feedcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feedcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseIapCheckCommand IapCheckCommand = 43;
    if (has_iapcheckcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iapcheckcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNotificationCommand tournamentNotificationCommand = 44;
    if (has_tournamentnotificationcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentnotificationcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTutorialRewardCommand tutorialRewardCommand = 45;
    if (has_tutorialrewardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tutorialrewardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupCommand popupCommand = 46;
    if (has_popupcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->popupcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseRpLeaderboardCommand rpLeaderboardCommand = 47;
    if (has_rpleaderboardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpleaderboardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseNotificationCommand notificationCommand = 48;
    if (has_notificationcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notificationcommand());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseGhostRecordCommand ghostRecordCommand = 49;
    if (has_ghostrecordcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghostrecordcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentRewardNumCommand tournamentRewardNumCommand = 50;
    if (has_tournamentrewardnumcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournamentrewardnumcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileUserDataCommand profileUserDataCommand = 51;
    if (has_profileuserdatacommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profileuserdatacommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileNextCarCommand profileNextCarCommand = 52;
    if (has_profilenextcarcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilenextcarcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileLikeCommand profileLikeCommand = 53;
    if (has_profilelikecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilelikecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileReportCommand profileReportCommand = 54;
    if (has_profilereportcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilereportcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseProfileVSCommand profileVSCommand = 55;
    if (has_profilevscommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profilevscommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseGotchaCommand gotchaCommand = 56;
    if (has_gotchacommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gotchacommand());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboardClass leaderboardClassCommand = 57;
    if (has_leaderboardclasscommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderboardclasscommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseLeaderboard leaderboardCommand = 58;
    if (has_leaderboardcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderboardcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseTournamentNum responseTournamentNum = 59;
    if (has_responsetournamentnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responsetournamentnum());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseQuickRaceCommand responseQuickRace = 60;
    if (has_responsequickrace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responsequickrace());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingTokenCommand bindingTokenCommand = 61;
    if (has_bindingtokencommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindingtokencommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseBindingInfoCommand bindingInfoCommand = 62;
    if (has_bindinginfocommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bindinginfocommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseEnergyTimeCommand energyTimeCommand = 63;
    if (has_energytimecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energytimecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFansRewardTimeCommand fansRewardTimeCommand = 64;
    if (has_fansrewardtimecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fansrewardtimecommand());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseMissionListCommand missionListCommand = 65;
    if (has_missionlistcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionlistcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseLotteryCommand lotteryCommand = 66;
    if (has_lotterycommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lotterycommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponsePopupListCommand popuplistCommand = 67;
    if (has_popuplistcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->popuplistcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetRaceCommand fleetRaceCommand = 68;
    if (has_fleetracecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetracecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetStartCommand fleetStartCommand = 69;
    if (has_fleetstartcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetstartcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetEndCommand fleetEndCommand = 70;
    if (has_fleetendcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetendcommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFleetDoubleCommand fleetDoubleCommand = 71;
    if (has_fleetdoublecommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fleetdoublecommand());
    }
    
    // optional .com.ea.eamobile.nfsmw.protoc.ResponseFixCarLimitCommand fixCarLimitCommand = 72;
    if (has_fixcarlimitcommand()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixcarlimitcommand());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCommand::MergeFrom(const ResponseCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::com::ea::eamobile::nfsmw::protoc::HeadInfo::MergeFrom(from.head());
    }
    if (from.has_trackcommand()) {
      mutable_trackcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTrackCommand::MergeFrom(from.trackcommand());
    }
    if (from.has_userinfocommand()) {
      mutable_userinfocommand()->::com::ea::eamobile::nfsmw::protoc::ResponseUserInfoCommand::MergeFrom(from.userinfocommand());
    }
    if (from.has_ghostcommand()) {
      mutable_ghostcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseRacerForGhostCommand::MergeFrom(from.ghostcommand());
    }
    if (from.has_raceresultcommand()) {
      mutable_raceresultcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseRaceResultCommand::MergeFrom(from.raceresultcommand());
    }
    if (from.has_tournamentdetailcommand()) {
      mutable_tournamentdetailcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentDetailCommand::MergeFrom(from.tournamentdetailcommand());
    }
    if (from.has_tournamentrewarddetailcommand()) {
      mutable_tournamentrewarddetailcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardDetailCommand::MergeFrom(from.tournamentrewarddetailcommand());
    }
    if (from.has_tournamentcommand()) {
      mutable_tournamentcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentCommand::MergeFrom(from.tournamentcommand());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resourcecommand()) {
      mutable_resourcecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseResourceCommand::MergeFrom(from.resourcecommand());
    }
    if (from.has_tournamentsignupcommand()) {
      mutable_tournamentsignupcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentSignUpCommand::MergeFrom(from.tournamentsignupcommand());
    }
    if (from.has_racestartcommand()) {
      mutable_racestartcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseRaceStartCommand::MergeFrom(from.racestartcommand());
    }
    if (from.has_bindingstartcommand()) {
      mutable_bindingstartcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingStartCommand::MergeFrom(from.bindingstartcommand());
    }
    if (from.has_bindingresultcommand()) {
      mutable_bindingresultcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingResultCommand::MergeFrom(from.bindingresultcommand());
    }
    if (from.has_bindingconfirmcommand()) {
      mutable_bindingconfirmcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingConfirmCommand::MergeFrom(from.bindingconfirmcommand());
    }
    if (from.has_bindingpopupcommand()) {
      mutable_bindingpopupcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingPopupCommand::MergeFrom(from.bindingpopupcommand());
    }
    if (from.has_errorcommand()) {
      mutable_errorcommand()->::com::ea::eamobile::nfsmw::protoc::ErrorCommand::MergeFrom(from.errorcommand());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_modeinfocommand()) {
      mutable_modeinfocommand()->::com::ea::eamobile::nfsmw::protoc::ResponseModeInfoCommand::MergeFrom(from.modeinfocommand());
    }
    if (from.has_rewardcommand()) {
      mutable_rewardcommand()->::com::ea::eamobile::nfsmw::protoc::responseTournamentRewardCommand::MergeFrom(from.rewardcommand());
    }
    if (from.has_getreward()) {
      mutable_getreward()->::com::ea::eamobile::nfsmw::protoc::ResponseGetRewardCommand::MergeFrom(from.getreward());
    }
    if (from.has_tournamentracestart()) {
      mutable_tournamentracestart()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceStartCommand::MergeFrom(from.tournamentracestart());
    }
    if (from.has_tournamentracereault()) {
      mutable_tournamentracereault()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRaceResultCommand::MergeFrom(from.tournamentracereault());
    }
    if (from.has_garagecommand()) {
      mutable_garagecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseGarageCommand::MergeFrom(from.garagecommand());
    }
    if (from.has_buycarcommand()) {
      mutable_buycarcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBuyCarCommand::MergeFrom(from.buycarcommand());
    }
    if (from.has_cardatacommand()) {
      mutable_cardatacommand()->::com::ea::eamobile::nfsmw::protoc::ResponseCarDataCommand::MergeFrom(from.cardatacommand());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_upgradeslotcommand()) {
      mutable_upgradeslotcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseUpgradeSlotCommand::MergeFrom(from.upgradeslotcommand());
    }
    if (from.has_usechartletcommand()) {
      mutable_usechartletcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseUseChartletCommand::MergeFrom(from.usechartletcommand());
    }
    if (from.has_modifyuserinfocommand()) {
      mutable_modifyuserinfocommand()->::com::ea::eamobile::nfsmw::protoc::ResponseModifyUserInfoCommand::MergeFrom(from.modifyuserinfocommand());
    }
    if (from.has_challengematchinfocommand()) {
      mutable_challengematchinfocommand()->::com::ea::eamobile::nfsmw::protoc::ResponseChallengeMatchInfoCommand::MergeFrom(from.challengematchinfocommand());
    }
    if (from.has_storedetailcommand()) {
      mutable_storedetailcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseStoreDetailCommand::MergeFrom(from.storedetailcommand());
    }
    if (from.has_buyitemcommand()) {
      mutable_buyitemcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBuyItemCommand::MergeFrom(from.buyitemcommand());
    }
    if (from.has_systemcommand()) {
      mutable_systemcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseSystemCommand::MergeFrom(from.systemcommand());
    }
    if (from.has_weibosharecommand()) {
      mutable_weibosharecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseWeiboShareLocksCommand::MergeFrom(from.weibosharecommand());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_registjaguar()) {
      mutable_registjaguar()->::com::ea::eamobile::nfsmw::protoc::ResponseRegistJaguarCommand::MergeFrom(from.registjaguar());
    }
    if (from.has_feedcommand()) {
      mutable_feedcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFeedCommand::MergeFrom(from.feedcommand());
    }
    if (from.has_iapcheckcommand()) {
      mutable_iapcheckcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseIapCheckCommand::MergeFrom(from.iapcheckcommand());
    }
    if (from.has_tournamentnotificationcommand()) {
      mutable_tournamentnotificationcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNotificationCommand::MergeFrom(from.tournamentnotificationcommand());
    }
    if (from.has_tutorialrewardcommand()) {
      mutable_tutorialrewardcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTutorialRewardCommand::MergeFrom(from.tutorialrewardcommand());
    }
    if (from.has_popupcommand()) {
      mutable_popupcommand()->::com::ea::eamobile::nfsmw::protoc::ResponsePopupCommand::MergeFrom(from.popupcommand());
    }
    if (from.has_rpleaderboardcommand()) {
      mutable_rpleaderboardcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseRpLeaderboardCommand::MergeFrom(from.rpleaderboardcommand());
    }
    if (from.has_notificationcommand()) {
      mutable_notificationcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseNotificationCommand::MergeFrom(from.notificationcommand());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ghostrecordcommand()) {
      mutable_ghostrecordcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseGhostRecordCommand::MergeFrom(from.ghostrecordcommand());
    }
    if (from.has_tournamentrewardnumcommand()) {
      mutable_tournamentrewardnumcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentRewardNumCommand::MergeFrom(from.tournamentrewardnumcommand());
    }
    if (from.has_profileuserdatacommand()) {
      mutable_profileuserdatacommand()->::com::ea::eamobile::nfsmw::protoc::ResponseProfileUserDataCommand::MergeFrom(from.profileuserdatacommand());
    }
    if (from.has_profilenextcarcommand()) {
      mutable_profilenextcarcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseProfileNextCarCommand::MergeFrom(from.profilenextcarcommand());
    }
    if (from.has_profilelikecommand()) {
      mutable_profilelikecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseProfileLikeCommand::MergeFrom(from.profilelikecommand());
    }
    if (from.has_profilereportcommand()) {
      mutable_profilereportcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseProfileReportCommand::MergeFrom(from.profilereportcommand());
    }
    if (from.has_profilevscommand()) {
      mutable_profilevscommand()->::com::ea::eamobile::nfsmw::protoc::ResponseProfileVSCommand::MergeFrom(from.profilevscommand());
    }
    if (from.has_gotchacommand()) {
      mutable_gotchacommand()->::com::ea::eamobile::nfsmw::protoc::ResponseGotchaCommand::MergeFrom(from.gotchacommand());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_leaderboardclasscommand()) {
      mutable_leaderboardclasscommand()->::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboardClass::MergeFrom(from.leaderboardclasscommand());
    }
    if (from.has_leaderboardcommand()) {
      mutable_leaderboardcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseLeaderboard::MergeFrom(from.leaderboardcommand());
    }
    if (from.has_responsetournamentnum()) {
      mutable_responsetournamentnum()->::com::ea::eamobile::nfsmw::protoc::ResponseTournamentNum::MergeFrom(from.responsetournamentnum());
    }
    if (from.has_responsequickrace()) {
      mutable_responsequickrace()->::com::ea::eamobile::nfsmw::protoc::ResponseQuickRaceCommand::MergeFrom(from.responsequickrace());
    }
    if (from.has_bindingtokencommand()) {
      mutable_bindingtokencommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingTokenCommand::MergeFrom(from.bindingtokencommand());
    }
    if (from.has_bindinginfocommand()) {
      mutable_bindinginfocommand()->::com::ea::eamobile::nfsmw::protoc::ResponseBindingInfoCommand::MergeFrom(from.bindinginfocommand());
    }
    if (from.has_energytimecommand()) {
      mutable_energytimecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseEnergyTimeCommand::MergeFrom(from.energytimecommand());
    }
    if (from.has_fansrewardtimecommand()) {
      mutable_fansrewardtimecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFansRewardTimeCommand::MergeFrom(from.fansrewardtimecommand());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_missionlistcommand()) {
      mutable_missionlistcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseMissionListCommand::MergeFrom(from.missionlistcommand());
    }
    if (from.has_lotterycommand()) {
      mutable_lotterycommand()->::com::ea::eamobile::nfsmw::protoc::ResponseLotteryCommand::MergeFrom(from.lotterycommand());
    }
    if (from.has_popuplistcommand()) {
      mutable_popuplistcommand()->::com::ea::eamobile::nfsmw::protoc::ResponsePopupListCommand::MergeFrom(from.popuplistcommand());
    }
    if (from.has_fleetracecommand()) {
      mutable_fleetracecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFleetRaceCommand::MergeFrom(from.fleetracecommand());
    }
    if (from.has_fleetstartcommand()) {
      mutable_fleetstartcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFleetStartCommand::MergeFrom(from.fleetstartcommand());
    }
    if (from.has_fleetendcommand()) {
      mutable_fleetendcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFleetEndCommand::MergeFrom(from.fleetendcommand());
    }
    if (from.has_fleetdoublecommand()) {
      mutable_fleetdoublecommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFleetDoubleCommand::MergeFrom(from.fleetdoublecommand());
    }
    if (from.has_fixcarlimitcommand()) {
      mutable_fixcarlimitcommand()->::com::ea::eamobile::nfsmw::protoc::ResponseFixCarLimitCommand::MergeFrom(from.fixcarlimitcommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCommand::CopyFrom(const ResponseCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_head()) {
    if (!this->head().IsInitialized()) return false;
  }
  if (has_trackcommand()) {
    if (!this->trackcommand().IsInitialized()) return false;
  }
  if (has_userinfocommand()) {
    if (!this->userinfocommand().IsInitialized()) return false;
  }
  if (has_ghostcommand()) {
    if (!this->ghostcommand().IsInitialized()) return false;
  }
  if (has_raceresultcommand()) {
    if (!this->raceresultcommand().IsInitialized()) return false;
  }
  if (has_tournamentdetailcommand()) {
    if (!this->tournamentdetailcommand().IsInitialized()) return false;
  }
  if (has_tournamentrewarddetailcommand()) {
    if (!this->tournamentrewarddetailcommand().IsInitialized()) return false;
  }
  if (has_tournamentcommand()) {
    if (!this->tournamentcommand().IsInitialized()) return false;
  }
  if (has_resourcecommand()) {
    if (!this->resourcecommand().IsInitialized()) return false;
  }
  if (has_tournamentsignupcommand()) {
    if (!this->tournamentsignupcommand().IsInitialized()) return false;
  }
  if (has_racestartcommand()) {
    if (!this->racestartcommand().IsInitialized()) return false;
  }
  if (has_bindingstartcommand()) {
    if (!this->bindingstartcommand().IsInitialized()) return false;
  }
  if (has_bindingresultcommand()) {
    if (!this->bindingresultcommand().IsInitialized()) return false;
  }
  if (has_bindingconfirmcommand()) {
    if (!this->bindingconfirmcommand().IsInitialized()) return false;
  }
  if (has_bindingpopupcommand()) {
    if (!this->bindingpopupcommand().IsInitialized()) return false;
  }
  if (has_errorcommand()) {
    if (!this->errorcommand().IsInitialized()) return false;
  }
  if (has_modeinfocommand()) {
    if (!this->modeinfocommand().IsInitialized()) return false;
  }
  if (has_rewardcommand()) {
    if (!this->rewardcommand().IsInitialized()) return false;
  }
  if (has_getreward()) {
    if (!this->getreward().IsInitialized()) return false;
  }
  if (has_tournamentracestart()) {
    if (!this->tournamentracestart().IsInitialized()) return false;
  }
  if (has_tournamentracereault()) {
    if (!this->tournamentracereault().IsInitialized()) return false;
  }
  if (has_garagecommand()) {
    if (!this->garagecommand().IsInitialized()) return false;
  }
  if (has_buycarcommand()) {
    if (!this->buycarcommand().IsInitialized()) return false;
  }
  if (has_cardatacommand()) {
    if (!this->cardatacommand().IsInitialized()) return false;
  }
  if (has_upgradeslotcommand()) {
    if (!this->upgradeslotcommand().IsInitialized()) return false;
  }
  if (has_usechartletcommand()) {
    if (!this->usechartletcommand().IsInitialized()) return false;
  }
  if (has_modifyuserinfocommand()) {
    if (!this->modifyuserinfocommand().IsInitialized()) return false;
  }
  if (has_challengematchinfocommand()) {
    if (!this->challengematchinfocommand().IsInitialized()) return false;
  }
  if (has_storedetailcommand()) {
    if (!this->storedetailcommand().IsInitialized()) return false;
  }
  if (has_buyitemcommand()) {
    if (!this->buyitemcommand().IsInitialized()) return false;
  }
  if (has_systemcommand()) {
    if (!this->systemcommand().IsInitialized()) return false;
  }
  if (has_weibosharecommand()) {
    if (!this->weibosharecommand().IsInitialized()) return false;
  }
  if (has_registjaguar()) {
    if (!this->registjaguar().IsInitialized()) return false;
  }
  if (has_iapcheckcommand()) {
    if (!this->iapcheckcommand().IsInitialized()) return false;
  }
  if (has_tutorialrewardcommand()) {
    if (!this->tutorialrewardcommand().IsInitialized()) return false;
  }
  if (has_popupcommand()) {
    if (!this->popupcommand().IsInitialized()) return false;
  }
  if (has_rpleaderboardcommand()) {
    if (!this->rpleaderboardcommand().IsInitialized()) return false;
  }
  if (has_notificationcommand()) {
    if (!this->notificationcommand().IsInitialized()) return false;
  }
  if (has_ghostrecordcommand()) {
    if (!this->ghostrecordcommand().IsInitialized()) return false;
  }
  if (has_tournamentrewardnumcommand()) {
    if (!this->tournamentrewardnumcommand().IsInitialized()) return false;
  }
  if (has_profileuserdatacommand()) {
    if (!this->profileuserdatacommand().IsInitialized()) return false;
  }
  if (has_profilenextcarcommand()) {
    if (!this->profilenextcarcommand().IsInitialized()) return false;
  }
  if (has_profilelikecommand()) {
    if (!this->profilelikecommand().IsInitialized()) return false;
  }
  if (has_profilevscommand()) {
    if (!this->profilevscommand().IsInitialized()) return false;
  }
  if (has_gotchacommand()) {
    if (!this->gotchacommand().IsInitialized()) return false;
  }
  if (has_leaderboardclasscommand()) {
    if (!this->leaderboardclasscommand().IsInitialized()) return false;
  }
  if (has_leaderboardcommand()) {
    if (!this->leaderboardcommand().IsInitialized()) return false;
  }
  if (has_responsetournamentnum()) {
    if (!this->responsetournamentnum().IsInitialized()) return false;
  }
  if (has_responsequickrace()) {
    if (!this->responsequickrace().IsInitialized()) return false;
  }
  if (has_bindingtokencommand()) {
    if (!this->bindingtokencommand().IsInitialized()) return false;
  }
  if (has_bindinginfocommand()) {
    if (!this->bindinginfocommand().IsInitialized()) return false;
  }
  if (has_energytimecommand()) {
    if (!this->energytimecommand().IsInitialized()) return false;
  }
  if (has_missionlistcommand()) {
    if (!this->missionlistcommand().IsInitialized()) return false;
  }
  if (has_popuplistcommand()) {
    if (!this->popuplistcommand().IsInitialized()) return false;
  }
  if (has_fleetracecommand()) {
    if (!this->fleetracecommand().IsInitialized()) return false;
  }
  if (has_fleetstartcommand()) {
    if (!this->fleetstartcommand().IsInitialized()) return false;
  }
  if (has_fleetendcommand()) {
    if (!this->fleetendcommand().IsInitialized()) return false;
  }
  if (has_fleetdoublecommand()) {
    if (!this->fleetdoublecommand().IsInitialized()) return false;
  }
  if (has_fixcarlimitcommand()) {
    if (!this->fixcarlimitcommand().IsInitialized()) return false;
  }
  return true;
}

void ResponseCommand::Swap(ResponseCommand* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    std::swap(trackcommand_, other->trackcommand_);
    std::swap(userinfocommand_, other->userinfocommand_);
    std::swap(ghostcommand_, other->ghostcommand_);
    std::swap(raceresultcommand_, other->raceresultcommand_);
    std::swap(tournamentdetailcommand_, other->tournamentdetailcommand_);
    std::swap(tournamentrewarddetailcommand_, other->tournamentrewarddetailcommand_);
    std::swap(tournamentcommand_, other->tournamentcommand_);
    std::swap(resourcecommand_, other->resourcecommand_);
    std::swap(tournamentsignupcommand_, other->tournamentsignupcommand_);
    std::swap(racestartcommand_, other->racestartcommand_);
    std::swap(bindingstartcommand_, other->bindingstartcommand_);
    std::swap(bindingresultcommand_, other->bindingresultcommand_);
    std::swap(bindingconfirmcommand_, other->bindingconfirmcommand_);
    std::swap(bindingpopupcommand_, other->bindingpopupcommand_);
    std::swap(errorcommand_, other->errorcommand_);
    std::swap(modeinfocommand_, other->modeinfocommand_);
    std::swap(rewardcommand_, other->rewardcommand_);
    std::swap(getreward_, other->getreward_);
    std::swap(tournamentracestart_, other->tournamentracestart_);
    std::swap(tournamentracereault_, other->tournamentracereault_);
    std::swap(garagecommand_, other->garagecommand_);
    std::swap(buycarcommand_, other->buycarcommand_);
    std::swap(cardatacommand_, other->cardatacommand_);
    std::swap(upgradeslotcommand_, other->upgradeslotcommand_);
    std::swap(usechartletcommand_, other->usechartletcommand_);
    std::swap(modifyuserinfocommand_, other->modifyuserinfocommand_);
    std::swap(challengematchinfocommand_, other->challengematchinfocommand_);
    std::swap(storedetailcommand_, other->storedetailcommand_);
    std::swap(buyitemcommand_, other->buyitemcommand_);
    std::swap(systemcommand_, other->systemcommand_);
    std::swap(weibosharecommand_, other->weibosharecommand_);
    std::swap(registjaguar_, other->registjaguar_);
    std::swap(feedcommand_, other->feedcommand_);
    std::swap(iapcheckcommand_, other->iapcheckcommand_);
    std::swap(tournamentnotificationcommand_, other->tournamentnotificationcommand_);
    std::swap(tutorialrewardcommand_, other->tutorialrewardcommand_);
    std::swap(popupcommand_, other->popupcommand_);
    std::swap(rpleaderboardcommand_, other->rpleaderboardcommand_);
    std::swap(notificationcommand_, other->notificationcommand_);
    std::swap(ghostrecordcommand_, other->ghostrecordcommand_);
    std::swap(tournamentrewardnumcommand_, other->tournamentrewardnumcommand_);
    std::swap(profileuserdatacommand_, other->profileuserdatacommand_);
    std::swap(profilenextcarcommand_, other->profilenextcarcommand_);
    std::swap(profilelikecommand_, other->profilelikecommand_);
    std::swap(profilereportcommand_, other->profilereportcommand_);
    std::swap(profilevscommand_, other->profilevscommand_);
    std::swap(gotchacommand_, other->gotchacommand_);
    std::swap(leaderboardclasscommand_, other->leaderboardclasscommand_);
    std::swap(leaderboardcommand_, other->leaderboardcommand_);
    std::swap(responsetournamentnum_, other->responsetournamentnum_);
    std::swap(responsequickrace_, other->responsequickrace_);
    std::swap(bindingtokencommand_, other->bindingtokencommand_);
    std::swap(bindinginfocommand_, other->bindinginfocommand_);
    std::swap(energytimecommand_, other->energytimecommand_);
    std::swap(fansrewardtimecommand_, other->fansrewardtimecommand_);
    std::swap(missionlistcommand_, other->missionlistcommand_);
    std::swap(lotterycommand_, other->lotterycommand_);
    std::swap(popuplistcommand_, other->popuplistcommand_);
    std::swap(fleetracecommand_, other->fleetracecommand_);
    std::swap(fleetstartcommand_, other->fleetstartcommand_);
    std::swap(fleetendcommand_, other->fleetendcommand_);
    std::swap(fleetdoublecommand_, other->fleetdoublecommand_);
    std::swap(fixcarlimitcommand_, other->fixcarlimitcommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCommand_descriptor_;
  metadata.reflection = ResponseCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocalUserinfo::kSnsFlagFieldNumber;
const int LocalUserinfo::kSessionFieldNumber;
const int LocalUserinfo::kTokenFieldNumber;
const int LocalUserinfo::kServerUrlFieldNumber;
const int LocalUserinfo::kAccessTokenFieldNumber;
const int LocalUserinfo::kUidFieldNumber;
#endif  // !_MSC_VER

LocalUserinfo::LocalUserinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocalUserinfo::InitAsDefaultInstance() {
}

LocalUserinfo::LocalUserinfo(const LocalUserinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocalUserinfo::SharedCtor() {
  _cached_size_ = 0;
  snsflag_ = 0;
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalUserinfo::~LocalUserinfo() {
  SharedDtor();
}

void LocalUserinfo::SharedDtor() {
  if (session_ != &::google::protobuf::internal::kEmptyString) {
    delete session_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (access_token_ != &::google::protobuf::internal::kEmptyString) {
    delete access_token_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void LocalUserinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalUserinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalUserinfo_descriptor_;
}

const LocalUserinfo& LocalUserinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Commands_2eproto();  return *default_instance_;
}

LocalUserinfo* LocalUserinfo::default_instance_ = NULL;

LocalUserinfo* LocalUserinfo::New() const {
  return new LocalUserinfo;
}

void LocalUserinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    snsflag_ = 0;
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::kEmptyString) {
        session_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::kEmptyString) {
        access_token_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  serverurl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocalUserinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 snsFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &snsflag_)));
          set_has_snsflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional string session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serverUrl;
        break;
      }
      
      // repeated string serverUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serverurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverurl(0).data(), this->serverurl(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serverUrl;
        if (input->ExpectTag(42)) goto parse_access_token;
        break;
      }
      
      // optional string access_token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_uid;
        break;
      }
      
      // optional string uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocalUserinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 snsFlag = 1;
  if (has_snsflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->snsflag(), output);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session(), output);
  }
  
  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }
  
  // repeated string serverUrl = 4;
  for (int i = 0; i < this->serverurl_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->serverurl(i).data(), this->serverurl(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->serverurl(i), output);
  }
  
  // optional string access_token = 5;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->access_token(), output);
  }
  
  // optional string uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocalUserinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 snsFlag = 1;
  if (has_snsflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->snsflag(), target);
  }
  
  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }
  
  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }
  
  // repeated string serverUrl = 4;
  for (int i = 0; i < this->serverurl_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverurl(i).data(), this->serverurl(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->serverurl(i), target);
  }
  
  // optional string access_token = 5;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->access_token(), target);
  }
  
  // optional string uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocalUserinfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 snsFlag = 1;
    if (has_snsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->snsflag());
    }
    
    // optional string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }
    
    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional string access_token = 5;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }
    
    // optional string uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  // repeated string serverUrl = 4;
  total_size += 1 * this->serverurl_size();
  for (int i = 0; i < this->serverurl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serverurl(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalUserinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocalUserinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocalUserinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocalUserinfo::MergeFrom(const LocalUserinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  serverurl_.MergeFrom(from.serverurl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snsflag()) {
      set_snsflag(from.snsflag());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocalUserinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalUserinfo::CopyFrom(const LocalUserinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalUserinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void LocalUserinfo::Swap(LocalUserinfo* other) {
  if (other != this) {
    std::swap(snsflag_, other->snsflag_);
    std::swap(session_, other->session_);
    std::swap(token_, other->token_);
    serverurl_.Swap(&other->serverurl_);
    std::swap(access_token_, other->access_token_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocalUserinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalUserinfo_descriptor_;
  metadata.reflection = LocalUserinfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoc
}  // namespace nfsmw
}  // namespace eamobile
}  // namespace ea
}  // namespace com

// @@protoc_insertion_point(global_scope)
